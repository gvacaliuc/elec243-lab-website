{
    "docs": [
        {
            "location": "/", 
            "text": "ELEC 243 Lab Manual\n\n\nBefore Going to Lab\n\n\n\n\nIntroduction\n\n\nLab Station Handbook\n\n\nTools and Resources\n\n\nVirtualBench\n\n\n\n\nThe Laboratories\n\n\n\n\nLab 1: \nBasic Electrical Measurements\n\n\nLab 2: \nAC Signals and Measurements\n\n\nLab 3: \nComputer Aided Measurements I\n\n\nLab 4: \nComputer Aided Measurements II\n\n\nLab 5: \nOp Amps I\n\n\nLab 6: \nOp Amps II\n\n\nLab 7: \nDigital Signal Processing\n\n\nLab 8: \nDigital Logic\n\n\nFinal Lab: \nDesigning a Pulse Oximeter\n\n\n\n\nReferences\n\n\n\n\nResistor Color Code\n\n\n741 Op-Amp Pin Configuration\n\n\nBreadboard Pin Configuration", 
            "title": "Home"
        }, 
        {
            "location": "/#elec-243-lab-manual", 
            "text": "", 
            "title": "ELEC 243 Lab Manual"
        }, 
        {
            "location": "/#before-going-to-lab", 
            "text": "Introduction  Lab Station Handbook  Tools and Resources  VirtualBench", 
            "title": "Before Going to Lab"
        }, 
        {
            "location": "/#the-laboratories", 
            "text": "Lab 1:  Basic Electrical Measurements  Lab 2:  AC Signals and Measurements  Lab 3:  Computer Aided Measurements I  Lab 4:  Computer Aided Measurements II  Lab 5:  Op Amps I  Lab 6:  Op Amps II  Lab 7:  Digital Signal Processing  Lab 8:  Digital Logic  Final Lab:  Designing a Pulse Oximeter", 
            "title": "The Laboratories"
        }, 
        {
            "location": "/#references", 
            "text": "Resistor Color Code  741 Op-Amp Pin Configuration  Breadboard Pin Configuration", 
            "title": "References"
        }, 
        {
            "location": "/lab-home/introduction/", 
            "text": "Introduction\n\n\nWelcome to the ELEC 243 Lab, the real world companion to the ELEC 243\nlectures.\n\n\nThe Grand Plan\n\n\nWe have a number of lofty goals for this lab. Our ultimate goal is the\ntransmission and processing of information and our vehicle for that\ninformation will be the signal. Along the way we will study how signals\ncarry information, how they arise in circuits and systems, how to\ncharacterize them, and how they interact with the components that make\nup information systems. Finally we will give you a chance to do what\nengineers do: to put it all together in the design, construction, and\nanalysis of a biosignals measurement system.\n\n\nThe Laboratory Schedule\n\n\nHere's what we have to do:\n\n\n\n\n\n\n\n\n\n\nDate\n\n\nLaboratory\n\n\n\n\n\n\n\n\n\n\nWeek 1\n\n\nNo Lab\n\n\n\n\n\n\nWeek 2\n\n\nNo Lab\n\n\n\n\n\n\nWeek 3\n\n\nLab 1: Basic Electrical Measurements\n\n\n\n\n\n\nWeek 4\n\n\nLab 2: AC Signals and Measurements\n\n\n\n\n\n\nWeek 5\n\n\nLab 3: Computer Aided Measurements I\n\n\n\n\n\n\nWeek 6\n\n\nLab 4: Computer Aided Measurements II\n\n\n\n\n\n\nWeek 7\n\n\nLab 5: Op Amps I\n\n\n\n\n\n\nWeek 8\n\n\nLab 6: Op Amps II\n\n\n\n\n\n\nWeek 9\n\n\nLab 7: Transducer Amplifiers\n\n\n\n\n\n\nWeek 10\n\n\nNo Lab - Spring Break\n\n\n\n\n\n\nWeek 11\n\n\nLab 8: Signal Processing\n\n\n\n\n\n\nWeek 12\n\n\nLab 9: Designing a Pulse Oximeter\n\n\n\n\n\n\nWeek 13\n\n\nLab 9 cont'd\n\n\n\n\n\n\nWeek 14\n\n\nLab 9 cont'd\n\n\n\n\n\n\nWeek 15\n\n\nLab 9 cont'd\n\n\n\n\n\n\n\n\n\n\nLab Groups\n\n\nIn lab (and outside lab as well) you will work in a team of two or three people,\nand responsibilities should be shared across all members. Lab grades\nwill be given on a per group basis, rather than individually.", 
            "title": "Introduction"
        }, 
        {
            "location": "/lab-home/introduction/#introduction", 
            "text": "Welcome to the ELEC 243 Lab, the real world companion to the ELEC 243\nlectures.", 
            "title": "Introduction"
        }, 
        {
            "location": "/lab-home/introduction/#the-grand-plan", 
            "text": "We have a number of lofty goals for this lab. Our ultimate goal is the\ntransmission and processing of information and our vehicle for that\ninformation will be the signal. Along the way we will study how signals\ncarry information, how they arise in circuits and systems, how to\ncharacterize them, and how they interact with the components that make\nup information systems. Finally we will give you a chance to do what\nengineers do: to put it all together in the design, construction, and\nanalysis of a biosignals measurement system.", 
            "title": "The Grand Plan"
        }, 
        {
            "location": "/lab-home/introduction/#the-laboratory-schedule", 
            "text": "Here's what we have to do:      Date  Laboratory      Week 1  No Lab    Week 2  No Lab    Week 3  Lab 1: Basic Electrical Measurements    Week 4  Lab 2: AC Signals and Measurements    Week 5  Lab 3: Computer Aided Measurements I    Week 6  Lab 4: Computer Aided Measurements II    Week 7  Lab 5: Op Amps I    Week 8  Lab 6: Op Amps II    Week 9  Lab 7: Transducer Amplifiers    Week 10  No Lab - Spring Break    Week 11  Lab 8: Signal Processing    Week 12  Lab 9: Designing a Pulse Oximeter    Week 13  Lab 9 cont'd    Week 14  Lab 9 cont'd    Week 15  Lab 9 cont'd", 
            "title": "The Laboratory Schedule"
        }, 
        {
            "location": "/lab-home/introduction/#lab-groups", 
            "text": "In lab (and outside lab as well) you will work in a team of two or three people,\nand responsibilities should be shared across all members. Lab grades\nwill be given on a per group basis, rather than individually.", 
            "title": "Lab Groups"
        }, 
        {
            "location": "/lab-home/lab-station-handbook/", 
            "text": "Lab Station Handbook\n\n\nIn the lab we will construct systems by combining the lab instruments\n(i.e., function generator, oscilloscope, and power supply) and \"virtual\ninstruments\" running on the Lab PC with components that we wire together\nto make circuits. To do this we need to be able to make several types of\nconnections.\n\n\nThe instruments have either banana jacks or BNC connectors. The Lab PC\nhas stereo jacks and a ribbon cable connector. Most of our components\nhave wire pins or leads, but some of the larger ones have their own\ncables with connectors. Our basic strategy will be to wire the small\ncomponents together on a breadboard, and then use cables with\nappropriate connectors to bring signals from the instruments, Lab PC,\nand large components to the breadboard.\n\n\nThe breadboard is a grid of holes or connection points where you can\nmake electrical connections between components and construct circuits.\nOur lab breadboard consists of a region with unconnected holes where you\ncan build your circuits. However, the upper region of your breadboard is\nthe called breadboard interface module, where there each column is\ninternally connected to the different types of terminals you see on the\nmodules. This allows you to interface your circuits with the instruments\nand lab PC.\n\n\nPatch Cords and Cables\n\n\nThe Breadboard\n\n\nPin Connections\n\n\nWiring", 
            "title": "Lab Station Handbook"
        }, 
        {
            "location": "/lab-home/lab-station-handbook/#lab-station-handbook", 
            "text": "In the lab we will construct systems by combining the lab instruments\n(i.e., function generator, oscilloscope, and power supply) and \"virtual\ninstruments\" running on the Lab PC with components that we wire together\nto make circuits. To do this we need to be able to make several types of\nconnections.  The instruments have either banana jacks or BNC connectors. The Lab PC\nhas stereo jacks and a ribbon cable connector. Most of our components\nhave wire pins or leads, but some of the larger ones have their own\ncables with connectors. Our basic strategy will be to wire the small\ncomponents together on a breadboard, and then use cables with\nappropriate connectors to bring signals from the instruments, Lab PC,\nand large components to the breadboard.  The breadboard is a grid of holes or connection points where you can\nmake electrical connections between components and construct circuits.\nOur lab breadboard consists of a region with unconnected holes where you\ncan build your circuits. However, the upper region of your breadboard is\nthe called breadboard interface module, where there each column is\ninternally connected to the different types of terminals you see on the\nmodules. This allows you to interface your circuits with the instruments\nand lab PC.", 
            "title": "Lab Station Handbook"
        }, 
        {
            "location": "/lab-home/lab-station-handbook/#patch-cords-and-cables", 
            "text": "", 
            "title": "Patch Cords and Cables"
        }, 
        {
            "location": "/lab-home/lab-station-handbook/#the-breadboard", 
            "text": "", 
            "title": "The Breadboard"
        }, 
        {
            "location": "/lab-home/lab-station-handbook/#pin-connections", 
            "text": "", 
            "title": "Pin Connections"
        }, 
        {
            "location": "/lab-home/lab-station-handbook/#wiring", 
            "text": "", 
            "title": "Wiring"
        }, 
        {
            "location": "/lab-home/tools-and-resources/", 
            "text": "Tools and Resources\n\n\nIf you look over the labs we have planned, it's clear that there's a\nconsiderable amount of work to be done. Fortunately we have a\nsubstantial collection of tools available to make this an efficient\nprocess. These include the materials used to build the circuits, tools\nto assemble them, instruments to analyze them, data analysis software,\nand of course documentation.\n\n\nIn this chapter we will take a brief inventory of the tools and\nresources we have available.\n\n\nInstruments\n\n\nEach station is equipped with a VirtualBench, which will work as power\nsupply, oscilloscope, and function generator. It will also work as a\ndigitial multimeter (DMM), but a handheld digital multimeter is\navailable for each station, kept in the equipment room.\n\n\nComponents\n\n\nEach lab group will get a kit containing an assortment of resistors,\ncapacitors, and semiconductors. These should be sufficient to build all\nthe circuits we will study this semester, but if not additional\ncomponents are available in the equipment room. Larger components, such\nas microphones, speakers, handsets, etc., are also kept in the equipment\nroom, and must be left there between lab sessions, as we only have\nenough for each day's lab groups. Do not keep equipment such as\nmicrophones in your locker!\n\n\nInterconnects\n\n\nThere are two kinds of things we will need to connect: components to\neach other to make circuits and instruments to circuits (and to each\nother) to measure signals.\n\n\nPatch Cords\n\n\nPatch cords are lengths of cable a foot or so long with a connector on\neach end. We have two kinds: with \nbanana plugs\n for\nconnecting to the power supply and DMM, and with \nBNC\nconnectors\n for connecting to the oscilloscope and\nfunction generator. We also have \nBNC clip leads\n\nfor connecting instruments directly to components, but the interface\nmodule provides an easier way to do this in most cases.\n\n\nThe Breadboard\n\n\nEach lab group will be issued a breadboard and interface board. You may\ntake these home with you between labs, or leave them in the equipment\nroom, as you choose. In any event, place a label (also available in the\nequipment room) with the names of your group members and your lab day on\nthe underside of the breadboard and on the back side of the interface\nboard. The breadboard and interface board must be returned, in usable\ncondition, at the end of the semester.\n\n\nTool Kit\n\n\nEach student will be given a kit containing tools that will be useful in\nbuilding circuits in the lab. It includes wire cutters, wire strippers,\nneedle nose pliers, a chip puller, and a small screwdriver for adjusting\ntrimpots. It also includes a BNC T connector and banana plug adapter for\nmaking interconnections with patch cords. These tools will be useful in\nseveral of your other lab courses, so try to hang onto them.\n\n\nLab PC\n\n\nEach lab station has a Dell PC running Windows 10. It is connected to\nthe network so you may access Canvas, and other lab\nand common software. It also contains a data acquisition card,\nallowing it to measure and produce signals in the circuits you will be\nbuilding.", 
            "title": "Tools and Resources"
        }, 
        {
            "location": "/lab-home/tools-and-resources/#tools-and-resources", 
            "text": "If you look over the labs we have planned, it's clear that there's a\nconsiderable amount of work to be done. Fortunately we have a\nsubstantial collection of tools available to make this an efficient\nprocess. These include the materials used to build the circuits, tools\nto assemble them, instruments to analyze them, data analysis software,\nand of course documentation.  In this chapter we will take a brief inventory of the tools and\nresources we have available.", 
            "title": "Tools and Resources"
        }, 
        {
            "location": "/lab-home/tools-and-resources/#instruments", 
            "text": "Each station is equipped with a VirtualBench, which will work as power\nsupply, oscilloscope, and function generator. It will also work as a\ndigitial multimeter (DMM), but a handheld digital multimeter is\navailable for each station, kept in the equipment room.", 
            "title": "Instruments"
        }, 
        {
            "location": "/lab-home/tools-and-resources/#components", 
            "text": "Each lab group will get a kit containing an assortment of resistors,\ncapacitors, and semiconductors. These should be sufficient to build all\nthe circuits we will study this semester, but if not additional\ncomponents are available in the equipment room. Larger components, such\nas microphones, speakers, handsets, etc., are also kept in the equipment\nroom, and must be left there between lab sessions, as we only have\nenough for each day's lab groups. Do not keep equipment such as\nmicrophones in your locker!", 
            "title": "Components"
        }, 
        {
            "location": "/lab-home/tools-and-resources/#interconnects", 
            "text": "There are two kinds of things we will need to connect: components to\neach other to make circuits and instruments to circuits (and to each\nother) to measure signals.", 
            "title": "Interconnects"
        }, 
        {
            "location": "/lab-home/tools-and-resources/#patch-cords", 
            "text": "Patch cords are lengths of cable a foot or so long with a connector on\neach end. We have two kinds: with  banana plugs  for\nconnecting to the power supply and DMM, and with  BNC\nconnectors  for connecting to the oscilloscope and\nfunction generator. We also have  BNC clip leads \nfor connecting instruments directly to components, but the interface\nmodule provides an easier way to do this in most cases.", 
            "title": "Patch Cords"
        }, 
        {
            "location": "/lab-home/tools-and-resources/#the-breadboard", 
            "text": "Each lab group will be issued a breadboard and interface board. You may\ntake these home with you between labs, or leave them in the equipment\nroom, as you choose. In any event, place a label (also available in the\nequipment room) with the names of your group members and your lab day on\nthe underside of the breadboard and on the back side of the interface\nboard. The breadboard and interface board must be returned, in usable\ncondition, at the end of the semester.", 
            "title": "The Breadboard"
        }, 
        {
            "location": "/lab-home/tools-and-resources/#tool-kit", 
            "text": "Each student will be given a kit containing tools that will be useful in\nbuilding circuits in the lab. It includes wire cutters, wire strippers,\nneedle nose pliers, a chip puller, and a small screwdriver for adjusting\ntrimpots. It also includes a BNC T connector and banana plug adapter for\nmaking interconnections with patch cords. These tools will be useful in\nseveral of your other lab courses, so try to hang onto them.", 
            "title": "Tool Kit"
        }, 
        {
            "location": "/lab-home/tools-and-resources/#lab-pc", 
            "text": "Each lab station has a Dell PC running Windows 10. It is connected to\nthe network so you may access Canvas, and other lab\nand common software. It also contains a data acquisition card,\nallowing it to measure and produce signals in the circuits you will be\nbuilding.", 
            "title": "Lab PC"
        }, 
        {
            "location": "/lab-home/virtualbench/", 
            "text": "ELEC 243 Lab\n\n\n\n\nVirtualBench\n\n\nThe National Instruments VirtualBench is five instruments in one\ndevice:  \n\n\n\n\nMixed-Signal Oscilloscope With Protocol Analysis\n\n\nDigital Multimeter\n\n\nFunction Generator\n\n\nProgrammable DC Power Supply\n\n\nDigital I/O\n\n\n\n\n\n\nThe digital I/O will not be used in 241 lab, and we will use a handheld\nmultimeter, at least in the beginning of the lab. But VirtualBench\nessentially replaces three devices in the lab - the oscilloscope, the\nfunction generator, and the power supply. VirtualBench can also connect\nwirelessly and be used on an iPad, instead of the lab computers. The\ndigital interface of VirtualBench allows for more exact measurements and\ncustomizable settings, as well as an easy way to get screenshots of the\noscilloscope.\n\n\nClick \nhere\n for\nspecifications, and click \nhere\n to\nview video tutorials.", 
            "title": "VirtualBench"
        }, 
        {
            "location": "/lab-home/virtualbench/#virtualbench", 
            "text": "The National Instruments VirtualBench is five instruments in one\ndevice:     Mixed-Signal Oscilloscope With Protocol Analysis  Digital Multimeter  Function Generator  Programmable DC Power Supply  Digital I/O    The digital I/O will not be used in 241 lab, and we will use a handheld\nmultimeter, at least in the beginning of the lab. But VirtualBench\nessentially replaces three devices in the lab - the oscilloscope, the\nfunction generator, and the power supply. VirtualBench can also connect\nwirelessly and be used on an iPad, instead of the lab computers. The\ndigital interface of VirtualBench allows for more exact measurements and\ncustomizable settings, as well as an easy way to get screenshots of the\noscilloscope.  Click  here  for\nspecifications, and click  here  to\nview video tutorials.", 
            "title": "VirtualBench"
        }, 
        {
            "location": "/references/patch-cords-and-cables/", 
            "text": "Patch Cords and Cables\n\n\nA patch cord is a length of cable with a connector on each end. We have two\ndifferent types: banana plug patch cords to connect the DC Power Supply to the\nbreadboard and BNC patch cords to connect the other instruments to each other\nand to the breadboard interface module.\n\n\nThere are two accessories to increase the flexibility of the patch cords: the\nBNC to banana adapter and the BNC T connector. The \nBNC to banana plug\nadapter\n allows a BNC cable to be connected to a\npair of banana jacks. Note the ground bump on one side of the adapter; this\ndenotes which banana plug prong is connected to the outer (ground) conductor of\nthe BNC connector. The \nBNC T connector\n allows two BNC\ncables to be plugged into the same connector.\n\n\nThere are two dedicated cables that connect the Lab PC to the breadboard. One\nhas several phone plugs on one end to plug into the sound card and an 8-pin DIN\nconnector to plug into J2-1 of the interface module. The other is a 50-pin\nribbon cable to connect the interface module to the data acquisition card.", 
            "title": "Patch Cords and Cables"
        }, 
        {
            "location": "/references/patch-cords-and-cables/#patch-cords-and-cables", 
            "text": "A patch cord is a length of cable with a connector on each end. We have two\ndifferent types: banana plug patch cords to connect the DC Power Supply to the\nbreadboard and BNC patch cords to connect the other instruments to each other\nand to the breadboard interface module.  There are two accessories to increase the flexibility of the patch cords: the\nBNC to banana adapter and the BNC T connector. The  BNC to banana plug\nadapter  allows a BNC cable to be connected to a\npair of banana jacks. Note the ground bump on one side of the adapter; this\ndenotes which banana plug prong is connected to the outer (ground) conductor of\nthe BNC connector. The  BNC T connector  allows two BNC\ncables to be plugged into the same connector.  There are two dedicated cables that connect the Lab PC to the breadboard. One\nhas several phone plugs on one end to plug into the sound card and an 8-pin DIN\nconnector to plug into J2-1 of the interface module. The other is a 50-pin\nribbon cable to connect the interface module to the data acquisition card.", 
            "title": "Patch Cords and Cables"
        }, 
        {
            "location": "/references/breadboard/", 
            "text": "ELEC 243 Lab\n\n\n\n\nThe Breadboard\n\n\nThe Concept\n\n\nWhen building a \"permanent circuit\" the components can be \"grown\" together (as\nin an integrated circuit), soldered together (as on a printed circuit board),\nor held together by screws and clamps (as in house wiring). In lab, we want\nsomething that is easy to assemble and easy to change. We also want something\nthat can be used with the same components that \"real\" circuits use. Most of\nthese components have pieces of wire or metal tabs sticking out of them to form\ntheir terminals.\n\n\nHow it Works\n\n\nThe heart of the solderless breadboard is a small metal clip that looks like\nthis:\n\n\n\n\n\n\n\n\nEach of the pairs of fingers is mechanically independent from the others, so we\ncan insert the end of a wire between any pair without reducing the tension in\nany of the other fingers. However when we insert a wire between any pair, we\nelectrically connect all metal fingers together.\n\n\nTo make a breadboard, an array of these clips is embedded in a plastic block\nwhich holds them in place and insulates them from each other, like this:\n\n\n\n\n\n\n\n\nDepending on the size and arrangement of the clips, we get either a socket\nstrip or a bus strip. The socket strip is used for connecting components\ntogether. It has two rows of short (5 contact) clips arranged one above\nanother, like this:\n\n\n\n\n\n\n\n\nThe bus strip is used to distribute power and ground voltages through the\ncircuit. It has has six long (24 contact) clips arranged lengthwise, like this:\n\n\n\n\n\n\n\n\nNote that the bus strip is not electrically connected in the center. If you\nwant a single, continuous bus, you will have to bridge that central gap\nyourself.\n\n\nWhen we combine two socket strips, three bus strips, power connectors, power\ntie points, interface modules, and an interface connector on a large printed\ncircuit board, we get the complete breadboard:\n\n\n\n\n\n\n\n\n(In this picture we have replaced the plastic covers, hiding the connection\nbetween the terminal points).\n\n\nThe breadboard lets us connect components together and by wiring the bus strips\nto the binding posts and the binding posts to the power supply, to connect the\npower supply to the circuit. Now what we need is a way to bring connections\nfrom the rest of the instruments into the breadboard.", 
            "title": "The Breadboard"
        }, 
        {
            "location": "/references/breadboard/#the-breadboard", 
            "text": "", 
            "title": "The Breadboard"
        }, 
        {
            "location": "/references/breadboard/#the-concept", 
            "text": "When building a \"permanent circuit\" the components can be \"grown\" together (as\nin an integrated circuit), soldered together (as on a printed circuit board),\nor held together by screws and clamps (as in house wiring). In lab, we want\nsomething that is easy to assemble and easy to change. We also want something\nthat can be used with the same components that \"real\" circuits use. Most of\nthese components have pieces of wire or metal tabs sticking out of them to form\ntheir terminals.", 
            "title": "The Concept"
        }, 
        {
            "location": "/references/breadboard/#how-it-works", 
            "text": "The heart of the solderless breadboard is a small metal clip that looks like\nthis:     Each of the pairs of fingers is mechanically independent from the others, so we\ncan insert the end of a wire between any pair without reducing the tension in\nany of the other fingers. However when we insert a wire between any pair, we\nelectrically connect all metal fingers together.  To make a breadboard, an array of these clips is embedded in a plastic block\nwhich holds them in place and insulates them from each other, like this:     Depending on the size and arrangement of the clips, we get either a socket\nstrip or a bus strip. The socket strip is used for connecting components\ntogether. It has two rows of short (5 contact) clips arranged one above\nanother, like this:     The bus strip is used to distribute power and ground voltages through the\ncircuit. It has has six long (24 contact) clips arranged lengthwise, like this:     Note that the bus strip is not electrically connected in the center. If you\nwant a single, continuous bus, you will have to bridge that central gap\nyourself.  When we combine two socket strips, three bus strips, power connectors, power\ntie points, interface modules, and an interface connector on a large printed\ncircuit board, we get the complete breadboard:     (In this picture we have replaced the plastic covers, hiding the connection\nbetween the terminal points).  The breadboard lets us connect components together and by wiring the bus strips\nto the binding posts and the binding posts to the power supply, to connect the\npower supply to the circuit. Now what we need is a way to bring connections\nfrom the rest of the instruments into the breadboard.", 
            "title": "How it Works"
        }, 
        {
            "location": "/references/interface/", 
            "text": "Pin Connections and the Interface Module\n\n\nThe path from the instruments to the breadboard is provided by the\n\nInterface Module\n. This is a printed circuit board with a variety of\ndifferent connectors and two short, single-row socket strips.\n\n\n\n\n\n\n\n\nThese are like the socket strips on the breadboard (five points connected\ntogether) except that instead of being connected just to themselves, the pins\nare also connected to the other connectors on the board.\n\n\nHere's a closeup of the two halves of the socket strip (shown separately to fit\nthe page better):\n\n\n\n\n\n\n\n\nPin Connections\n\n\nHere's a table of what each breadboard pin is connected to:\n\n\n\n\n\n\n\n\n\n\nPin\n\n\nSignal\n\n\nFunction\n\n\nPin\n\n\nSignal\n\n\nFunction\n\n\n\n\n\n\n\n\n\n\n1\n\n\nbnc1\n\n\nJ1-1 BNC 1\n\n\n28\n\n\nnc\n\n\nNo connection\n\n\n\n\n\n\n2\n\n\nbnc2\n\n\nJ1-2 BNC 2\n\n\n29\n\n\nRx\n\n\nreceiver\n\n\n\n\n\n\n3\n\n\nbnc3\n\n\nJ1-3 BNC 3\n\n\n30\n\n\nnc\n\n\nNo connection\n\n\n\n\n\n\n4\n\n\nph1l\n\n\nJ1-4 Phone Plug 1 left\n\n\n31\n\n\nnc\n\n\nNo connection\n\n\n\n\n\n\n5\n\n\nph1r\n\n\nJ1-4 Phone Plug 1 right\n\n\n32\n\n\nnc\n\n\nNo connection\n\n\n\n\n\n\n6\n\n\nph2l\n\n\nJ1-5 Phone Plug 2 left\n\n\n33\n\n\nnc\n\n\nNo connection\n\n\n\n\n\n\n7\n\n\nph2r\n\n\nJ1-5 Phone Plug 2 right\n\n\n34\n\n\nnc\n\n\nNo connection\n\n\n\n\n\n\n8\n\n\nph3l\n\n\nJ1-6 Phone Plug 3 left\n\n\n35\n\n\nnc\n\n\nNo connection\n\n\n\n\n\n\n9\n\n\nph3r\n\n\nJ1-6 Phone Plug 3 right\n\n\n36\n\n\nnc\n\n\nNo connection\n\n\n\n\n\n\n10\n\n\near1\n\n\nJ1-7 Handset earpiece\n\n\n37\n\n\nnc\n\n\nNo connection\n\n\n\n\n\n\n11\n\n\near2\n\n\nJ1-7 Handset earpiece\n\n\n38\n\n\nnc\n\n\nNo connection\n\n\n\n\n\n\n12\n\n\nmic1\n\n\nJ1-7 Handset microphone\n\n\n39\n\n\nTx\n\n\ntransmitter\n\n\n\n\n\n\n13\n\n\nmic2\n\n\nJ1-7 Handset microphone\n\n\n40\n\n\nnc\n\n\nNo connection\n\n\n\n\n\n\n14\n\n\ngnd\n\n\nGround\n\n\n41\n\n\ngnd\n\n\nGround\n\n\n\n\n\n\n15\n\n\nsound_mic\n\n\nJ2-1  microphone\n\n\n42\n\n\nach0\n\n\ninput0\n\n\n\n\n\n\n16\n\n\nsound_spkrl\n\n\nJ2-1 speaker left\n\n\n43\n\n\nach1\n\n\ninput1\n\n\n\n\n\n\n17\n\n\nsound_spkrr\n\n\nJ2-1 speaker right\n\n\n44\n\n\nach2\n\n\ninput2\n\n\n\n\n\n\n18\n\n\nsound_lin_inl\n\n\nJ2-1 line in left\n\n\n45\n\n\nach3\n\n\ninput3\n\n\n\n\n\n\n19\n\n\nsound_lin_inr\n\n\nJ2-1 line in right\n\n\n46\n\n\nach4\n\n\ninput4\n\n\n\n\n\n\n20\n\n\nsound_lin_outl\n\n\nJ2-1 line out left\n\n\n47\n\n\nach5\n\n\ninput5\n\n\n\n\n\n\n21\n\n\nsound_lin_outr\n\n\nJ2-1 line out right\n\n\n48\n\n\nach6\n\n\ninput6\n\n\n\n\n\n\n22\n\n\ngnd\n\n\nGround\n\n\n49\n\n\nach7\n\n\ninput7\n\n\n\n\n\n\n23\n\n\nph4l\n\n\nJ2-2 Phone Plug 4 left\n\n\n50\n\n\nnc\n\n\nNo connection\n\n\n\n\n\n\n24\n\n\nph4r\n\n\nJ2-2 Phone Plug 4 right\n\n\n51\n\n\ndac0\n\n\noutput 0\n\n\n\n\n\n\n25\n\n\nbnc1\n\n\nJ2-3 BNC 4\n\n\n52\n\n\ndac1\n\n\noutput 1\n\n\n\n\n\n\n26\n\n\nbnc2\n\n\nJ2-4 BNC 5\n\n\n53\n\n\nnc\n\n\nNo connection\n\n\n\n\n\n\n27\n\n\nbnc3\n\n\nJ2-5 BNC 6\n\n\n54\n\n\nnc\n\n\nNo connection\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nPins 15-21 are reserved for the PC sound card connection.", 
            "title": "The Interface Modules"
        }, 
        {
            "location": "/references/interface/#pin-connections-and-the-interface-module", 
            "text": "The path from the instruments to the breadboard is provided by the Interface Module . This is a printed circuit board with a variety of\ndifferent connectors and two short, single-row socket strips.     These are like the socket strips on the breadboard (five points connected\ntogether) except that instead of being connected just to themselves, the pins\nare also connected to the other connectors on the board.  Here's a closeup of the two halves of the socket strip (shown separately to fit\nthe page better):", 
            "title": "Pin Connections and the Interface Module"
        }, 
        {
            "location": "/references/interface/#pin-connections", 
            "text": "Here's a table of what each breadboard pin is connected to:      Pin  Signal  Function  Pin  Signal  Function      1  bnc1  J1-1 BNC 1  28  nc  No connection    2  bnc2  J1-2 BNC 2  29  Rx  receiver    3  bnc3  J1-3 BNC 3  30  nc  No connection    4  ph1l  J1-4 Phone Plug 1 left  31  nc  No connection    5  ph1r  J1-4 Phone Plug 1 right  32  nc  No connection    6  ph2l  J1-5 Phone Plug 2 left  33  nc  No connection    7  ph2r  J1-5 Phone Plug 2 right  34  nc  No connection    8  ph3l  J1-6 Phone Plug 3 left  35  nc  No connection    9  ph3r  J1-6 Phone Plug 3 right  36  nc  No connection    10  ear1  J1-7 Handset earpiece  37  nc  No connection    11  ear2  J1-7 Handset earpiece  38  nc  No connection    12  mic1  J1-7 Handset microphone  39  Tx  transmitter    13  mic2  J1-7 Handset microphone  40  nc  No connection    14  gnd  Ground  41  gnd  Ground    15  sound_mic  J2-1  microphone  42  ach0  input0    16  sound_spkrl  J2-1 speaker left  43  ach1  input1    17  sound_spkrr  J2-1 speaker right  44  ach2  input2    18  sound_lin_inl  J2-1 line in left  45  ach3  input3    19  sound_lin_inr  J2-1 line in right  46  ach4  input4    20  sound_lin_outl  J2-1 line out left  47  ach5  input5    21  sound_lin_outr  J2-1 line out right  48  ach6  input6    22  gnd  Ground  49  ach7  input7    23  ph4l  J2-2 Phone Plug 4 left  50  nc  No connection    24  ph4r  J2-2 Phone Plug 4 right  51  dac0  output 0    25  bnc1  J2-3 BNC 4  52  dac1  output 1    26  bnc2  J2-4 BNC 5  53  nc  No connection    27  bnc3  J2-5 BNC 6  54  nc  No connection      Note  Pins 15-21 are reserved for the PC sound card connection.", 
            "title": "Pin Connections"
        }, 
        {
            "location": "/references/wiring/", 
            "text": "Wiring\n\n\nOrganizing Your Breadboard\n\n\nThe first few Labs are something of a \"warmup\" in terms of utilizing the\nbreadboard. We will use only one or two of the interface components at a time\nand will build circuits consisting of 2 or 3 components which are disassembled\nat the end of lab. As we get closer to the final project, we will be\nconstructing more complicated circuits having more external connections. Since\nsome of these will perform functions needed in subsequent Labs, we will want to\nleave them in place on the breadboard for future use. We will need a plan for\norganizing the layout and wiring on the breadboard and interface board.\n\n\nThere are several aspects to this organization ranging from small details to\nthe big picture.\n\n\nColor Coding\n\n\nYour wire kit contains an assortment of different colored wires. You could just\npick pieces of wire at random, or you could try to use the different colors to\ndesignate different signals. There aren't enough colors for each signal to have\nits own, but you can use different colors to denote different classes of\nsignals.\n\n\nOne set of signals you should color code are power and ground. In particular,\nyou should have a different color for \n\\(+15V\\)\n, \n\\(-15V\\)\n, and ground. You should\nnot use any of these colors for other signals. It would be nice to use\n\"standard\" colors for these, but unfortunately there are several competing\nstandards. One color that nearly everyone agrees on is that red should be the\npositive power supply voltage. Most automotive and electronic wiring uses black\nto denote ground. Electronic wiring which uses black for ground often uses blue\nfor the negative supply. However, our power supply and breadboard use green to\ndenote ground (the convention used in house wiring) and use black to denote the\nnegative supply.\n\n\nSo we have two possible \"standard\" color codes for power: \n\n\n\n\nred\u00a0=\u00a0+, green\u00a0=\u00a0gnd, black\u00a0=\u00a0-\n\n\nred\u00a0=\u00a0+, black\u00a0=\u00a0gnd, blue\u00a0=\u00a0- \n\n\n\n\nYou could use either of these, or make up your own.\n\n\nAnother useful thing to color code would be the wires or \"probes\" from the\ninterface board connector. That way you can tell which wire is \nCH1\n of the\nscope or which is the function generator output without having to trace from\none end of the wire to the other.\n\n\nPower Bussing\n\n\nThere are a few different ways to figure out the orientation of an Integrated\nChip (IC) such as an an \nop-amp\n.  The first step\nis to figure out where pin 1 is. The remaining pins are in chronological order\nand increment in a counter-clockwise direction.\n\n\nIf pin 1 is in the lower left corner, then the writing on the package reads\nleft to right. Alternately, some ICs will have a dot above pin 1.  A third\nindication is a semi-circle indentation on the top end of the chip - pin 1 will\nbe to the left of it.\n\n\nTo simplify power wiring, we should run the positive bus above each socket\nstrip and the negative bus below. Doing this and running ground on the\nremaining buses gives us the following layout for power:\n\n\n\n\nInterface Board Connector Assignments\n\n\nSome of the connectors on the Interface Board are dedicated to a single\nfunction (e.g. the telephone handset or the sound card). Others (e.g.\nthe BNC and phone jacks) are more flexible and may be connected to a\nvariety of signal sources or destinations. It will be helpful to\nestablish standard assignments for these connectors as well.\n\n\nIn the instructions and photographs, we will be using the following\nassignment:\n\n\n\n\n\n\n\n\n\n\nConnector\n\n\nSocket Pin\n\n\nSignal\n\n\n\n\n\n\n\n\n\n\nJ1-1\n\n\n1\n\n\nOscilloscope channel 1\n\n\n\n\n\n\nJ1-2\n\n\n2\n\n\nOscilloscope channel 2\n\n\n\n\n\n\nJ1-3\n\n\n3\n\n\nFunction generator output\n\n\n\n\n\n\n\n\n\n\nOverall Layout\n\n\nThis final project will be a fairly complex circuit. Good engineering practice\nis to break down a complex system into a number of simple subsystems, each of\nwhich performs a single, well-defined function.\n\n\nIn the unlikely event that your circuit does not work perfectly the first time\nyou turn it on, it will make it easier for you (and your labbie) to debug it if\neach of these subcircuits is laid out (neatly, of course) on its own little\npatch of breadboard and is connected to the other subcircuits in such a way\nthat it may be easilly disconnected from them for testing in isolation.\n\n\nOne additional advantage of a tidy layout with short wires is that it is more\nrugged. Remember that you will have to transport your circuit from your lab\nbench to the testing station without parts falling off or loops of wire getting\ncaught and mysteriously pulled loose.\n\n\nReal World Circuit Problems\n\n\nOn paper all our components are ideal and no components exist where we don't\ndraw them. In an actual circuit, things are not quite so tidy: wires have non\nzero resistance and inductance, sources have output resistance, parasitic\ncapacitances and mutual inductances exist between wires, and a host of other\ngremlins. In addition, although we are only applying input signals up to a few\n10s of kHz, the active devices (op amps and transistors) we use have gain at\nfrequencies up to a few MHz (op amps) or 100s of MHz (transistors). This means\nthat all of the \"little\" pieces of wire can become fairly effective antennas,\nradiating energy to (and receiving from) the rest of the world, and more\nsignificantly, to other parts of the circuit.\n\n\nWhat all this means is that a circuit which is wired correctly topologically\nmay fail to function as expected. Although we can't eliminate all of these\neffects, we can do some things to minimize them.  Here are a few.\n\n\nLayout\n\n\nTry to arrange your layout so that each function is grouped together in a\nsingle area of the board and so that stages that are connected together are\nclose to each other. This will allow connections to be made with shorter wires.\nAlso try to avoid having high level signals near low level stages.\n\n\nTwisted Pairs\n\n\nOne way to reduce unwanted coupling between different signals in your circuit\nis to use \ntwisted pairs\n, i.e. a pair of wires twisted together with one wire\nconnected to ground and the other carrying the signal.\n\n\nTo make a twisted pair, select two wires having an aesthetically pleasing\ncombination of colors and twist them together.\n\n\n\n\n\n\n\n\nYou could use twisted pair wires for connections between the interface board\nand your circuit, as well as any other long runs of wire.\n\n\n\n\n\n\n\n\nUse one wire for the signal and connect the other to ground, at both ends of\nthe run.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSome signals (e.g. the photodiode input) don't have a ground. In this case, you\ncan still use a twisted pair, but neither wire will be grounded.\n\n\nRouting\n\n\nTwisted pair or not, try to keep wires carrying high level signals (large\nvoltages or currents) (e.g. the LED or earphone) away from those carrying low\nlevel signals (e.g. the photodiode or dynamic microphone).  A corollary to this\nis to keep outputs away from inputs, especially in the same subcircuit. It's\nbetter for wires to cross at right angles than to run parallel to each other.\n\n\nBypass Capacitors\n\n\nAnother path for unwanted coupling between stages is via the power supply. To\nreduce this, use some of your electrolytic capacitors as \nbypass capacitors\n,\ni.e. connect them between the power supply voltages and ground (be sure to\nobserve correct polarity on the electrolytic capacitors - the shorter wire is\nusually negative polarity, and you will also see a neg sign above this wire).\nIdeally each op amp should be bypassed, but you may be able to get by with a\nsingle pair of capacitors for the entire circuit.\n\n\nWiring Technique\n\n\nThe basic idea of wiring on a solderless breadboard is simple: just stick the\nends of the component leads or wires into the holes. But like any seemingly\nsimple process, there are a few subtleties that can make the difference between\nsuccess and failure.\n\n\nFirst a note of caution. The material that the clips inside the breadboard are\nmade of (so called \"nickel silver\") is a compromise between good conductivity,\ncorrosion resistance, and springiness. In particular the elastic limit is\nconsiderably less than of a good steel spring and if spread too far, can be\npermanently distorted. To avoid deforming the connector clips:\n\n\n\n\nUse only the wire that is supplied to you (24 gauge, solid\n  telephone cable).\n\n\nUse only components with small diameter leads (1/4 watt resistors,\n  capacitors, ICs, etc.).\n\n\nDo not insert power resistor leads into the breadboard.  When using power\n\n\ntransistors in the breadboard, use your pliers to\n  twist each lead 90 degrees so that they are gripped by the broad face rather\n  than the narrow edge.\n\n\nNever insert more than one wire in a hole.\n\n\n\n\nWith the health of our breadboard assured, there are a few more things we can\ndo to make sure that our connections are good ones.\n\n\n\n\nStrip about 7\u00a0mm of insulation from each end of a piece of wire.\n  Less than that raises the risk that insulation will be forced between the\n  fingers of the clip. More leaves bare wire exposed that can short to adjacent\n  components. Don't try to jam the wires far down into the breadboard because\n  it can scratch the bottom and damage the connection. One exception: strip\n  about 15\u00a0mm from the end of a wire that will be clamped in one of the binding\n  posts. Make sure copper is showing on both sides of the post when it is\n  clamped down.\n\n\nWhen inserting a wire or component, use your needle nosed pliers\n  rather than your fingers to hold it. Grip the wire or lead about 10\u00a0mm from\n  the end and press straight down.\n\n\nIf the end of a wire becomes kinked, cut it off or use your pliers\n  to straighten it.", 
            "title": "Wiring"
        }, 
        {
            "location": "/references/wiring/#wiring", 
            "text": "", 
            "title": "Wiring"
        }, 
        {
            "location": "/references/wiring/#organizing-your-breadboard", 
            "text": "The first few Labs are something of a \"warmup\" in terms of utilizing the\nbreadboard. We will use only one or two of the interface components at a time\nand will build circuits consisting of 2 or 3 components which are disassembled\nat the end of lab. As we get closer to the final project, we will be\nconstructing more complicated circuits having more external connections. Since\nsome of these will perform functions needed in subsequent Labs, we will want to\nleave them in place on the breadboard for future use. We will need a plan for\norganizing the layout and wiring on the breadboard and interface board.  There are several aspects to this organization ranging from small details to\nthe big picture.", 
            "title": "Organizing Your Breadboard"
        }, 
        {
            "location": "/references/wiring/#color-coding", 
            "text": "Your wire kit contains an assortment of different colored wires. You could just\npick pieces of wire at random, or you could try to use the different colors to\ndesignate different signals. There aren't enough colors for each signal to have\nits own, but you can use different colors to denote different classes of\nsignals.  One set of signals you should color code are power and ground. In particular,\nyou should have a different color for  \\(+15V\\) ,  \\(-15V\\) , and ground. You should\nnot use any of these colors for other signals. It would be nice to use\n\"standard\" colors for these, but unfortunately there are several competing\nstandards. One color that nearly everyone agrees on is that red should be the\npositive power supply voltage. Most automotive and electronic wiring uses black\nto denote ground. Electronic wiring which uses black for ground often uses blue\nfor the negative supply. However, our power supply and breadboard use green to\ndenote ground (the convention used in house wiring) and use black to denote the\nnegative supply.  So we have two possible \"standard\" color codes for power:    red\u00a0=\u00a0+, green\u00a0=\u00a0gnd, black\u00a0=\u00a0-  red\u00a0=\u00a0+, black\u00a0=\u00a0gnd, blue\u00a0=\u00a0-    You could use either of these, or make up your own.  Another useful thing to color code would be the wires or \"probes\" from the\ninterface board connector. That way you can tell which wire is  CH1  of the\nscope or which is the function generator output without having to trace from\none end of the wire to the other.", 
            "title": "Color Coding"
        }, 
        {
            "location": "/references/wiring/#power-bussing", 
            "text": "There are a few different ways to figure out the orientation of an Integrated\nChip (IC) such as an an  op-amp .  The first step\nis to figure out where pin 1 is. The remaining pins are in chronological order\nand increment in a counter-clockwise direction.  If pin 1 is in the lower left corner, then the writing on the package reads\nleft to right. Alternately, some ICs will have a dot above pin 1.  A third\nindication is a semi-circle indentation on the top end of the chip - pin 1 will\nbe to the left of it.  To simplify power wiring, we should run the positive bus above each socket\nstrip and the negative bus below. Doing this and running ground on the\nremaining buses gives us the following layout for power:", 
            "title": "Power Bussing"
        }, 
        {
            "location": "/references/wiring/#interface-board-connector-assignments", 
            "text": "Some of the connectors on the Interface Board are dedicated to a single\nfunction (e.g. the telephone handset or the sound card). Others (e.g.\nthe BNC and phone jacks) are more flexible and may be connected to a\nvariety of signal sources or destinations. It will be helpful to\nestablish standard assignments for these connectors as well.  In the instructions and photographs, we will be using the following\nassignment:      Connector  Socket Pin  Signal      J1-1  1  Oscilloscope channel 1    J1-2  2  Oscilloscope channel 2    J1-3  3  Function generator output", 
            "title": "Interface Board Connector Assignments"
        }, 
        {
            "location": "/references/wiring/#overall-layout", 
            "text": "This final project will be a fairly complex circuit. Good engineering practice\nis to break down a complex system into a number of simple subsystems, each of\nwhich performs a single, well-defined function.  In the unlikely event that your circuit does not work perfectly the first time\nyou turn it on, it will make it easier for you (and your labbie) to debug it if\neach of these subcircuits is laid out (neatly, of course) on its own little\npatch of breadboard and is connected to the other subcircuits in such a way\nthat it may be easilly disconnected from them for testing in isolation.  One additional advantage of a tidy layout with short wires is that it is more\nrugged. Remember that you will have to transport your circuit from your lab\nbench to the testing station without parts falling off or loops of wire getting\ncaught and mysteriously pulled loose.", 
            "title": "Overall Layout"
        }, 
        {
            "location": "/references/wiring/#real-world-circuit-problems", 
            "text": "On paper all our components are ideal and no components exist where we don't\ndraw them. In an actual circuit, things are not quite so tidy: wires have non\nzero resistance and inductance, sources have output resistance, parasitic\ncapacitances and mutual inductances exist between wires, and a host of other\ngremlins. In addition, although we are only applying input signals up to a few\n10s of kHz, the active devices (op amps and transistors) we use have gain at\nfrequencies up to a few MHz (op amps) or 100s of MHz (transistors). This means\nthat all of the \"little\" pieces of wire can become fairly effective antennas,\nradiating energy to (and receiving from) the rest of the world, and more\nsignificantly, to other parts of the circuit.  What all this means is that a circuit which is wired correctly topologically\nmay fail to function as expected. Although we can't eliminate all of these\neffects, we can do some things to minimize them.  Here are a few.", 
            "title": "Real World Circuit Problems"
        }, 
        {
            "location": "/references/wiring/#layout", 
            "text": "Try to arrange your layout so that each function is grouped together in a\nsingle area of the board and so that stages that are connected together are\nclose to each other. This will allow connections to be made with shorter wires.\nAlso try to avoid having high level signals near low level stages.", 
            "title": "Layout"
        }, 
        {
            "location": "/references/wiring/#twisted-pairs", 
            "text": "One way to reduce unwanted coupling between different signals in your circuit\nis to use  twisted pairs , i.e. a pair of wires twisted together with one wire\nconnected to ground and the other carrying the signal.  To make a twisted pair, select two wires having an aesthetically pleasing\ncombination of colors and twist them together.     You could use twisted pair wires for connections between the interface board\nand your circuit, as well as any other long runs of wire.     Use one wire for the signal and connect the other to ground, at both ends of\nthe run.        Some signals (e.g. the photodiode input) don't have a ground. In this case, you\ncan still use a twisted pair, but neither wire will be grounded.", 
            "title": "Twisted Pairs"
        }, 
        {
            "location": "/references/wiring/#routing", 
            "text": "Twisted pair or not, try to keep wires carrying high level signals (large\nvoltages or currents) (e.g. the LED or earphone) away from those carrying low\nlevel signals (e.g. the photodiode or dynamic microphone).  A corollary to this\nis to keep outputs away from inputs, especially in the same subcircuit. It's\nbetter for wires to cross at right angles than to run parallel to each other.", 
            "title": "Routing"
        }, 
        {
            "location": "/references/wiring/#bypass-capacitors", 
            "text": "Another path for unwanted coupling between stages is via the power supply. To\nreduce this, use some of your electrolytic capacitors as  bypass capacitors ,\ni.e. connect them between the power supply voltages and ground (be sure to\nobserve correct polarity on the electrolytic capacitors - the shorter wire is\nusually negative polarity, and you will also see a neg sign above this wire).\nIdeally each op amp should be bypassed, but you may be able to get by with a\nsingle pair of capacitors for the entire circuit.", 
            "title": "Bypass Capacitors"
        }, 
        {
            "location": "/references/wiring/#wiring-technique", 
            "text": "The basic idea of wiring on a solderless breadboard is simple: just stick the\nends of the component leads or wires into the holes. But like any seemingly\nsimple process, there are a few subtleties that can make the difference between\nsuccess and failure.  First a note of caution. The material that the clips inside the breadboard are\nmade of (so called \"nickel silver\") is a compromise between good conductivity,\ncorrosion resistance, and springiness. In particular the elastic limit is\nconsiderably less than of a good steel spring and if spread too far, can be\npermanently distorted. To avoid deforming the connector clips:   Use only the wire that is supplied to you (24 gauge, solid\n  telephone cable).  Use only components with small diameter leads (1/4 watt resistors,\n  capacitors, ICs, etc.).  Do not insert power resistor leads into the breadboard.  When using power  transistors in the breadboard, use your pliers to\n  twist each lead 90 degrees so that they are gripped by the broad face rather\n  than the narrow edge.  Never insert more than one wire in a hole.   With the health of our breadboard assured, there are a few more things we can\ndo to make sure that our connections are good ones.   Strip about 7\u00a0mm of insulation from each end of a piece of wire.\n  Less than that raises the risk that insulation will be forced between the\n  fingers of the clip. More leaves bare wire exposed that can short to adjacent\n  components. Don't try to jam the wires far down into the breadboard because\n  it can scratch the bottom and damage the connection. One exception: strip\n  about 15\u00a0mm from the end of a wire that will be clamped in one of the binding\n  posts. Make sure copper is showing on both sides of the post when it is\n  clamped down.  When inserting a wire or component, use your needle nosed pliers\n  rather than your fingers to hold it. Grip the wire or lead about 10\u00a0mm from\n  the end and press straight down.  If the end of a wire becomes kinked, cut it off or use your pliers\n  to straighten it.", 
            "title": "Wiring Technique"
        }, 
        {
            "location": "/references/color_code/", 
            "text": "Resistor Color Codes\n\n\n\n\n\n\n\n\nResistor Color Code Calculators\n\n\n\n\nDigikey\n\n\nUPenn\n \n\n\nEEWeb\n \n\n\nHobby Hour", 
            "title": "Resistor Color Codes"
        }, 
        {
            "location": "/references/color_code/#resistor-color-codes", 
            "text": "", 
            "title": "Resistor Color Codes"
        }, 
        {
            "location": "/references/color_code/#resistor-color-code-calculators", 
            "text": "Digikey  UPenn    EEWeb    Hobby Hour", 
            "title": "Resistor Color Code Calculators"
        }, 
        {
            "location": "/references/lab-report/", 
            "text": "Your Lab Report\n\n\nA lab report serves several functions. In industry it serves as a legal\ndocument to establish priority of invention in patent disputes. While we\ndon't expect many patentable discoveries to come out of 243 Lab, you\nshould develop good lab report habits in case you should go to work for\na company that does have such expectations.\n\n\nIn scientific research, it provides a record that allows you to\nduplicate your work if you succeed at your endeavor (or if you achieve\nsome unexpected but significant result). It's also useful in identifying\nwhat might have gone wrong if you don't achieve your desired result.\n\n\nIn an educational environment, we have some additional goals. The lab\nreport provides a mechanism for evaluating your performance.\n\n\nThe Report Itself\n\n\nEach lab team will turn in a single report on Canvas on the day of their next\nlab session at noon. Lab reports may be written in Word or LaTeX. Both\ntemplates will be provided.\n\n\nHere are links to lab report templates and useful guidelines:\n\n\n\n\nWord Template\n\n\nGetting Started with LaTeX\n\n\nLaTeX Template\n\n\n\"Writing Lab Reports\" Presentation\n\n\nReport Guidelines Handout\n\n\nGrading Rubric", 
            "title": "Lab Report"
        }, 
        {
            "location": "/references/lab-report/#your-lab-report", 
            "text": "A lab report serves several functions. In industry it serves as a legal\ndocument to establish priority of invention in patent disputes. While we\ndon't expect many patentable discoveries to come out of 243 Lab, you\nshould develop good lab report habits in case you should go to work for\na company that does have such expectations.  In scientific research, it provides a record that allows you to\nduplicate your work if you succeed at your endeavor (or if you achieve\nsome unexpected but significant result). It's also useful in identifying\nwhat might have gone wrong if you don't achieve your desired result.  In an educational environment, we have some additional goals. The lab\nreport provides a mechanism for evaluating your performance.", 
            "title": "Your Lab Report"
        }, 
        {
            "location": "/references/lab-report/#the-report-itself", 
            "text": "Each lab team will turn in a single report on Canvas on the day of their next\nlab session at noon. Lab reports may be written in Word or LaTeX. Both\ntemplates will be provided.  Here are links to lab report templates and useful guidelines:   Word Template  Getting Started with LaTeX  LaTeX Template  \"Writing Lab Reports\" Presentation  Report Guidelines Handout  Grading Rubric", 
            "title": "The Report Itself"
        }, 
        {
            "location": "/references/manuals-and-data-sheets/", 
            "text": "Instruction Manuals and Data Sheets\n\n\nnote:\n none of the links currently work\n\n\nInstruction Manuals\n\n\n\n\nFluke 73 Multimeter\n\n\nInstek GFG-8020H Function Generator\n\n\nIwatsu SS-5702 Oscilloscope\n\n\nKepco MPS 620M Power Supply\n\n\nLeader LS 1020 Oscilloscope\n\n\nNational Instruments NI 6251 DAQ Card\n\n\nTeknronix 571 Curve Tracer: \npart 1\n\n    \npart 2\n \npart 3\n\n\n\n\nComponent Data Sheets\n\n\n\n\n2N3904 NPN Transistor\n\n\n2N3906 PNP Transistor\n\n\nINA126 Instrumentation Amplifier\n\n\nLF353 JFET-Input Dual Op Amp\n\n\nLF411 JFET-Input Op Amp\n\n\n\u00b5A741 Op Amp\n\n\nTCA0372 Dual Power Op Amp\n\n\nCdS Photocell\n\n\nERT Thermistor\n\n\nLDT Vibration Sensor\n\n\nMPX Pressure Sensor\n\n\nPIN Photodiode", 
            "title": "Instruction Manuals and Data Sheets"
        }, 
        {
            "location": "/references/manuals-and-data-sheets/#instruction-manuals-and-data-sheets", 
            "text": "note:  none of the links currently work", 
            "title": "Instruction Manuals and Data Sheets"
        }, 
        {
            "location": "/references/manuals-and-data-sheets/#instruction-manuals", 
            "text": "Fluke 73 Multimeter  Instek GFG-8020H Function Generator  Iwatsu SS-5702 Oscilloscope  Kepco MPS 620M Power Supply  Leader LS 1020 Oscilloscope  National Instruments NI 6251 DAQ Card  Teknronix 571 Curve Tracer:  part 1 \n     part 2   part 3", 
            "title": "Instruction Manuals"
        }, 
        {
            "location": "/references/manuals-and-data-sheets/#component-data-sheets", 
            "text": "2N3904 NPN Transistor  2N3906 PNP Transistor  INA126 Instrumentation Amplifier  LF353 JFET-Input Dual Op Amp  LF411 JFET-Input Op Amp  \u00b5A741 Op Amp  TCA0372 Dual Power Op Amp  CdS Photocell  ERT Thermistor  LDT Vibration Sensor  MPX Pressure Sensor  PIN Photodiode", 
            "title": "Component Data Sheets"
        }, 
        {
            "location": "/lab1/", 
            "text": "Lab 1: Basic Electrical Measurements\n\n\nCompared with our colleagues in other branches of engineering, we ECEs\nare at something of a disadvantage in that we can't \ndirectly\n see what\nwe're working with. So we require a variety of \nmeasuring instruments\n\nto make things visible.\n\n\nBefore You Begin\n\n\n\n\nSafety\n\n\nBackground\n\n\n\n\nExperiments\n\n\n\n\nExperiment 1.1: \nDC Measurements: the DMM\n\n\nInterlude: \nGrounds and Grounding\n\n\nExperiment 1.2: \nThe Oscilloscope and Function Generator\n\n\nPostlude: \nCleaning Up", 
            "title": "Home"
        }, 
        {
            "location": "/lab1/#lab-1-basic-electrical-measurements", 
            "text": "Compared with our colleagues in other branches of engineering, we ECEs\nare at something of a disadvantage in that we can't  directly  see what\nwe're working with. So we require a variety of  measuring instruments \nto make things visible.", 
            "title": "Lab 1: Basic Electrical Measurements"
        }, 
        {
            "location": "/lab1/#before-you-begin", 
            "text": "Safety  Background", 
            "title": "Before You Begin"
        }, 
        {
            "location": "/lab1/#experiments", 
            "text": "Experiment 1.1:  DC Measurements: the DMM  Interlude:  Grounds and Grounding  Experiment 1.2:  The Oscilloscope and Function Generator  Postlude:  Cleaning Up", 
            "title": "Experiments"
        }, 
        {
            "location": "/lab1/safety/", 
            "text": "Safety\n\n\nFirst the bad news:\n\n\nElectricity can kill you.\n\n\nHow? The two most common ways are:  \n\n\n\n\nby cooking you (the hard way)\n\n\nby disrupting your nervous system (the easy way)\n\n\n\n\nThe good news is that in ELEC 243 laboratory, you will not be exposed to\ndangerous voltage levels \nunless\n you mishandle the equipment. Before we get\nclose enough to the equipment to mishandle it, let's take a closer look at just\nhow you can get hurt if you do.\n\n\nWhat strength voltages and currents are harmful?\n\n\nElectricity is potentially the most dangerous commodity in general use by the\npublic today. In spite of this, less than 1 percent of the 100,000 accidental\ndeaths which occur annually in the United States are directly attributable to\nelectrocution. Considering the ever-increasing use of electricity in the home\nand industry, we should be alert to protect and better this excellent safety\nrecord. An understanding of the effects of electric shock, high-frequency\nheating, and other electrically produced physiological phenomena on the human\nbody should be part of basic knowledge. We present a brief survey of these\ntopics in the hope that you will become aware of the very real dangers inherent\nin the application of electrical phenomena. We shall consider these dangers in\neach frequency band of the electromagnetic spectrum - from the power\nfrequencies to cosmic rays.\n\n\nPower Frequencies\n\n\nElectric Shock.\n The ratio of fatalities to injuries for electric shock\naccidents is very high in comparison to the corresponding figure for all other\naccidents. \nDeath due to electric shock is fast and permanent.\n\n\nShock Sensitivity.\n Because of a person's highly developed nervous system,\nthey are sensitive to very small currents. For example, the tongue will give a\nsensation of taste at currents as low as 45 microamperes. The threshold of\nfeeling on the hand is found to be on the order of 5\u00a0mA DC and 1\u00a0mA at 60\u00a0Hz.\nThe shocks due to currents at this threshold are usually considered annoying\nrather than dangerous.  However, they are startling when not anticipated, and\nmay cause involuntary movement that sometimes results in serious injury. As the\nvalue of current increases above the threshold, one becomes aware of sensations\nof heat and contraction of the muscles. Sensations of pain develop and\nvoluntary control of the muscles in the path of the current becomes\nincreasingly difficult. Finally a value of current is reached where the victim\n\"freezes\" to the circuit. The value of current at which a victim can just\nrelease the electrode is referred to as \"let-go\" current. The average let-go\ncurrent for healthy people is about 16\u00a0mA rms (60\u00a0Hz). It is important to note\nthat let-go currents of as low as 5\u00a0mA have been measured. Experience has shown\nthat an individual can withstand, with no ill aftereffect except for possible\nsore muscles, repeated exposure to their let-go current for at least the time\nrequired for them to release the conductor.\n\n\nEffect of Frequency and Waveform.\n Gradually increasing direct current\nproduces sensations of internal heating. Sudden changes of current, however,\nproduce powerful muscular contractions, and interruption of the current causes\nvery severe shocks. Experiments at 10\u00a0kHz indicate that the let-go current is\napproximately 3 times the 60\u00a0Hz value. For non-sinusoidal waveforms, the peak\nvalue seems to be the critical factor in muscular stimulation.\n\n\nNature of Bodily Damage.\n As far as gross electrical effects are concerned,\nthe body can be represented by the equivalent circuit shown in the figure\nbelow.\n\n\n\n\n\n\n\n\nThe outer skin (epidermis) is roughly 0.1\u00a0mm thick and has a resistance of the\norder of \n\\(10^5 \\Omega cm^2\\)\n when dry. The inner skin (dermis)\nand the internal organs are of relatively low resistance because of their high\nsalinity. It is generally believed that the effects of electric shock are due\nto the current flowing through the body. Electrical burns are a result of\nheating the skin. The immediate formation of blisters at the point of contact\ncauses the skin to lose its protective resistance and more serious damage may\nthus occur. Burns of this nature penetrate quite deeply and, while they seldom\nbecome infected, heal very slowly. Electrical current is most dangerous when\nvital organs are in its path through the body. Current may cause stoppage of\nbreathing due to excessive contraction of the chest muscles.  Temporary\nparalysis of respiration may also occur if the current produces a block in the\nnervous system that prevents signals from reaching the lungs. In either case,\nit is imperative that an approved form of artificial respiration be applied\nimmediately and continued without interruption until competent medical\nexamination has been made.\n\n\nVentricular Fibrillation.\n Passage of electrical current through the heart\nis considered particularly dangerous. The heart exerts its pumping action as a\nresult of complex rhythmic motion controlled by periodic electrical impulses to\nthe muscle tissue. The regularity of this motion assures proper blood\ncirculation. Electric current passing through the heart completely upsets this\nrhythmic motion and results in random muscular contractions. The heart no\nlonger effectively pumps, but quivers like so much \"Jell-O\". This condition is\nknown as ventricular fibrillation and is nearly always fatal. Energy of the\nimpulse of current is responsible for this hazard and an estimate of the danger\nthreshold for fibrillation is 13.5\u00a0watt-seconds.\n\n\nRadio Frequencies\n\n\nAt frequencies above the power range, the primary bodily damage results from\ndielectric heating. Heating also occurs from both conduction current and\nradiation. The temperature of the human body is maintained remarkably constant\nby very complex temperature regulating mechanisms.  These mechanisms,\ncoordinated by the brain, control temperature by regulating the production and\nloss of heat. Circulation of bodily fluids contributes to the distribution of\nthe heat. The change in diameter of the blood vessels, for example, regulates\nthe volume and velocity of flow. However, not all areas are equally well\nregulated, and it is possible for local heating to occur. Such local heating is\napt to be dangerous, particularly if vital organs are involved. A differential\nof \n\\(5^\\circ\\text{C}\\)\n maintained for a sufficient time may be injurious or even\nlethal. Testes, for example, undergo degenerate changes with temperature rises\nas low as \n\\(1^\\circ\\text{C}\\)\n. The amount of bodily temperature rise depends on\nthe specific area exposed and its efficiency of heat elimination. Other factors\ncontributing to temperature rise are intensity and the duration of exposure. At\nfrequencies below the microwave region \n\\(f \n 1000MHz\\)\n, about 40 percent\nof the incident energy is absorbed. These frequencies cause deep (internal)\nheating and are very dangerous: such heating is not well indicated by sensory\nelements of the skin.  A tolerance figure of \n\\(0.001\\text{ watt cm}^2\\)\n for\nlong-term exposures has been considered adequate. Surface burns resulting from\nR.F. currents are similar to those encountered at lower frequencies.\n\n\nMicrowave Frequencies\n\n\nThe effects of the lower microwave frequencies are similar to those of radio\nfrequencies and a comparable tolerance figure for exposure should not be\nexceeded. As the frequency increases \n\\(f \n 3000MHz\\)\n, the incident energy\nis absorbed by the skin with an efficiency of 40 to 50 percent. The effects of\nsuch radiation are much the same as is encountered with infrared and sunlight.\nThe possibility of the formation of eye cataracts must be considered at\nmicrowave frequencies. These cataracts result in impairment of vision or even\nblindness as a result of the formation of a white cloud in the normally\ntransparent cornea of the eye. Cataracts are thought to occur in a manner\nanalogous to the formation of the \"white\" of an egg upon heating. Experiments\nwith rabbits have indicated that cataracts have formed in 3 to 9 days following\na single 15 minute exposure to a 100 watt source of 12\u00a0cm waves at a distance\nof 5\u00a0cm.  While the exposure indicated here is probably extreme, care should be\ntaken when working with high-powered radar sets.\n\n\nInfrared, Visible Light and Ultraviolet Frequencies\n\n\nThe immediate effects of this band of frequencies are popularly known as\nsunburn. The eye, however, is particularly susceptible to excess exposure at\nthese frequencies. Such exposure can easily occur when observing an electric\narc without protection. This may result in hemorrhages of the choriod (the\nouter lining of the retina) and actual destruction of portions of the retina\nitself. In addition, actual immediate pain may be encountered because of\nviolent contractions induced in the iris. Photophthalmia (temporary snow\nblindness) is due to ultraviolet radiation following undue exposure to\nsunlight, an electric arc, or a sun lamp.\n\n\nX-Rays and Nuclear Radiation\n\n\nThe effects of this portion of the electromagnetic spectrum of the human body\nare still being studied. It has been found that the amount of energy absorbed\nby the tissue during exposure is the most important consideration. Damage to\nthe reproductive organs has been found to be the most sensitive indication of\nexcessive exposure. Controlled experiments with mice exposed to fast neutron\nradiation from an atomic reactor indicate the type of damage sustained by\nliving animals. During the first 9 months of continuous exposure, no visible\ndifferences were noted. The mice then began to lose weight and gradually lose\nhair. Eye cataracts developed after a year and death followed. Limited exposure\nto nuclear radiation resulted in a shortened life span. We have yet to\ncompletely determine the consequences of the atomic bombs of World War II in\nterms of its biological effects. For this reason, plus the fact that the latent\nperiod between exposure and detection of damage may run into months and years,\nit behooves us to take all precautions against X-Ray and nuclear radiation.", 
            "title": "Safety"
        }, 
        {
            "location": "/lab1/safety/#safety", 
            "text": "First the bad news:", 
            "title": "Safety"
        }, 
        {
            "location": "/lab1/safety/#electricity-can-kill-you", 
            "text": "How? The two most common ways are:     by cooking you (the hard way)  by disrupting your nervous system (the easy way)   The good news is that in ELEC 243 laboratory, you will not be exposed to\ndangerous voltage levels  unless  you mishandle the equipment. Before we get\nclose enough to the equipment to mishandle it, let's take a closer look at just\nhow you can get hurt if you do.", 
            "title": "Electricity can kill you."
        }, 
        {
            "location": "/lab1/safety/#what-strength-voltages-and-currents-are-harmful", 
            "text": "Electricity is potentially the most dangerous commodity in general use by the\npublic today. In spite of this, less than 1 percent of the 100,000 accidental\ndeaths which occur annually in the United States are directly attributable to\nelectrocution. Considering the ever-increasing use of electricity in the home\nand industry, we should be alert to protect and better this excellent safety\nrecord. An understanding of the effects of electric shock, high-frequency\nheating, and other electrically produced physiological phenomena on the human\nbody should be part of basic knowledge. We present a brief survey of these\ntopics in the hope that you will become aware of the very real dangers inherent\nin the application of electrical phenomena. We shall consider these dangers in\neach frequency band of the electromagnetic spectrum - from the power\nfrequencies to cosmic rays.", 
            "title": "What strength voltages and currents are harmful?"
        }, 
        {
            "location": "/lab1/safety/#power-frequencies", 
            "text": "Electric Shock.  The ratio of fatalities to injuries for electric shock\naccidents is very high in comparison to the corresponding figure for all other\naccidents.  Death due to electric shock is fast and permanent.  Shock Sensitivity.  Because of a person's highly developed nervous system,\nthey are sensitive to very small currents. For example, the tongue will give a\nsensation of taste at currents as low as 45 microamperes. The threshold of\nfeeling on the hand is found to be on the order of 5\u00a0mA DC and 1\u00a0mA at 60\u00a0Hz.\nThe shocks due to currents at this threshold are usually considered annoying\nrather than dangerous.  However, they are startling when not anticipated, and\nmay cause involuntary movement that sometimes results in serious injury. As the\nvalue of current increases above the threshold, one becomes aware of sensations\nof heat and contraction of the muscles. Sensations of pain develop and\nvoluntary control of the muscles in the path of the current becomes\nincreasingly difficult. Finally a value of current is reached where the victim\n\"freezes\" to the circuit. The value of current at which a victim can just\nrelease the electrode is referred to as \"let-go\" current. The average let-go\ncurrent for healthy people is about 16\u00a0mA rms (60\u00a0Hz). It is important to note\nthat let-go currents of as low as 5\u00a0mA have been measured. Experience has shown\nthat an individual can withstand, with no ill aftereffect except for possible\nsore muscles, repeated exposure to their let-go current for at least the time\nrequired for them to release the conductor.  Effect of Frequency and Waveform.  Gradually increasing direct current\nproduces sensations of internal heating. Sudden changes of current, however,\nproduce powerful muscular contractions, and interruption of the current causes\nvery severe shocks. Experiments at 10\u00a0kHz indicate that the let-go current is\napproximately 3 times the 60\u00a0Hz value. For non-sinusoidal waveforms, the peak\nvalue seems to be the critical factor in muscular stimulation.  Nature of Bodily Damage.  As far as gross electrical effects are concerned,\nthe body can be represented by the equivalent circuit shown in the figure\nbelow.     The outer skin (epidermis) is roughly 0.1\u00a0mm thick and has a resistance of the\norder of  \\(10^5 \\Omega cm^2\\)  when dry. The inner skin (dermis)\nand the internal organs are of relatively low resistance because of their high\nsalinity. It is generally believed that the effects of electric shock are due\nto the current flowing through the body. Electrical burns are a result of\nheating the skin. The immediate formation of blisters at the point of contact\ncauses the skin to lose its protective resistance and more serious damage may\nthus occur. Burns of this nature penetrate quite deeply and, while they seldom\nbecome infected, heal very slowly. Electrical current is most dangerous when\nvital organs are in its path through the body. Current may cause stoppage of\nbreathing due to excessive contraction of the chest muscles.  Temporary\nparalysis of respiration may also occur if the current produces a block in the\nnervous system that prevents signals from reaching the lungs. In either case,\nit is imperative that an approved form of artificial respiration be applied\nimmediately and continued without interruption until competent medical\nexamination has been made.  Ventricular Fibrillation.  Passage of electrical current through the heart\nis considered particularly dangerous. The heart exerts its pumping action as a\nresult of complex rhythmic motion controlled by periodic electrical impulses to\nthe muscle tissue. The regularity of this motion assures proper blood\ncirculation. Electric current passing through the heart completely upsets this\nrhythmic motion and results in random muscular contractions. The heart no\nlonger effectively pumps, but quivers like so much \"Jell-O\". This condition is\nknown as ventricular fibrillation and is nearly always fatal. Energy of the\nimpulse of current is responsible for this hazard and an estimate of the danger\nthreshold for fibrillation is 13.5\u00a0watt-seconds.", 
            "title": "Power Frequencies"
        }, 
        {
            "location": "/lab1/safety/#radio-frequencies", 
            "text": "At frequencies above the power range, the primary bodily damage results from\ndielectric heating. Heating also occurs from both conduction current and\nradiation. The temperature of the human body is maintained remarkably constant\nby very complex temperature regulating mechanisms.  These mechanisms,\ncoordinated by the brain, control temperature by regulating the production and\nloss of heat. Circulation of bodily fluids contributes to the distribution of\nthe heat. The change in diameter of the blood vessels, for example, regulates\nthe volume and velocity of flow. However, not all areas are equally well\nregulated, and it is possible for local heating to occur. Such local heating is\napt to be dangerous, particularly if vital organs are involved. A differential\nof  \\(5^\\circ\\text{C}\\)  maintained for a sufficient time may be injurious or even\nlethal. Testes, for example, undergo degenerate changes with temperature rises\nas low as  \\(1^\\circ\\text{C}\\) . The amount of bodily temperature rise depends on\nthe specific area exposed and its efficiency of heat elimination. Other factors\ncontributing to temperature rise are intensity and the duration of exposure. At\nfrequencies below the microwave region  \\(f   1000MHz\\) , about 40 percent\nof the incident energy is absorbed. These frequencies cause deep (internal)\nheating and are very dangerous: such heating is not well indicated by sensory\nelements of the skin.  A tolerance figure of  \\(0.001\\text{ watt cm}^2\\)  for\nlong-term exposures has been considered adequate. Surface burns resulting from\nR.F. currents are similar to those encountered at lower frequencies.", 
            "title": "Radio Frequencies"
        }, 
        {
            "location": "/lab1/safety/#microwave-frequencies", 
            "text": "The effects of the lower microwave frequencies are similar to those of radio\nfrequencies and a comparable tolerance figure for exposure should not be\nexceeded. As the frequency increases  \\(f   3000MHz\\) , the incident energy\nis absorbed by the skin with an efficiency of 40 to 50 percent. The effects of\nsuch radiation are much the same as is encountered with infrared and sunlight.\nThe possibility of the formation of eye cataracts must be considered at\nmicrowave frequencies. These cataracts result in impairment of vision or even\nblindness as a result of the formation of a white cloud in the normally\ntransparent cornea of the eye. Cataracts are thought to occur in a manner\nanalogous to the formation of the \"white\" of an egg upon heating. Experiments\nwith rabbits have indicated that cataracts have formed in 3 to 9 days following\na single 15 minute exposure to a 100 watt source of 12\u00a0cm waves at a distance\nof 5\u00a0cm.  While the exposure indicated here is probably extreme, care should be\ntaken when working with high-powered radar sets.", 
            "title": "Microwave Frequencies"
        }, 
        {
            "location": "/lab1/safety/#infrared-visible-light-and-ultraviolet-frequencies", 
            "text": "The immediate effects of this band of frequencies are popularly known as\nsunburn. The eye, however, is particularly susceptible to excess exposure at\nthese frequencies. Such exposure can easily occur when observing an electric\narc without protection. This may result in hemorrhages of the choriod (the\nouter lining of the retina) and actual destruction of portions of the retina\nitself. In addition, actual immediate pain may be encountered because of\nviolent contractions induced in the iris. Photophthalmia (temporary snow\nblindness) is due to ultraviolet radiation following undue exposure to\nsunlight, an electric arc, or a sun lamp.", 
            "title": "Infrared, Visible Light and Ultraviolet Frequencies"
        }, 
        {
            "location": "/lab1/safety/#x-rays-and-nuclear-radiation", 
            "text": "The effects of this portion of the electromagnetic spectrum of the human body\nare still being studied. It has been found that the amount of energy absorbed\nby the tissue during exposure is the most important consideration. Damage to\nthe reproductive organs has been found to be the most sensitive indication of\nexcessive exposure. Controlled experiments with mice exposed to fast neutron\nradiation from an atomic reactor indicate the type of damage sustained by\nliving animals. During the first 9 months of continuous exposure, no visible\ndifferences were noted. The mice then began to lose weight and gradually lose\nhair. Eye cataracts developed after a year and death followed. Limited exposure\nto nuclear radiation resulted in a shortened life span. We have yet to\ncompletely determine the consequences of the atomic bombs of World War II in\nterms of its biological effects. For this reason, plus the fact that the latent\nperiod between exposure and detection of damage may run into months and years,\nit behooves us to take all precautions against X-Ray and nuclear radiation.", 
            "title": "X-Rays and Nuclear Radiation"
        }, 
        {
            "location": "/lab1/background/", 
            "text": "ELEC 243 Lab\n\n\n\n\nAccuracy, Precision, and Resolution of Measurement Instruments\n\n\nAccuracy\n\n\nThere is no such thing as an absolutely accurate or a perfect measurement. A\nmeasurement's \naccuracy\n represents how closely it represents the actual\nvalue.  Instruments themselves obey physical laws and usually interact with the\nphenomenon being measured, limiting measurement accuracy. Using a Digital\nMultimeter (DMM) as an example, accuracy is often stated as some percentage of\nthe actual measurement, or as a percentage of the full scale measurement. For\nexample, the Hewlett-Packard DMM has a specified accuracy of \n\\({\\pm}0.3\\%\\)\n\nfor DC voltage measurements, \n\\(1%\\)\n for DC current, \n\\(2%\\)\n for AC voltage and\ncurrent, and \n\\(0.7%\\)\n for resistance.  Tables of these accuracies are usually\npublished in operating manuals.\n\n\nResolution\n\n\nThe smallest measurable change that can be detected\nis resolution. The DMM has a resolution of one least significant digit.\nThe resolution of the scope and function generator depends on how good\nyour eyesight is. Something on the order of \n\\(0.5%\\)\n would be typical.\n\n\nPrecision\n\n\nPrecision specifies an instrument's ability to repeat\na given measurement. If you measure a resistance using the ohmmeter mode\non the DMM and then come back a few minutes later, you should record the\nsame value for the resistance. However, instruments can drift and the\nstability of the measured phenomenon may be in question.", 
            "title": "Background"
        }, 
        {
            "location": "/lab1/background/#accuracy-precision-and-resolution-of-measurement-instruments", 
            "text": "", 
            "title": "Accuracy, Precision, and Resolution of Measurement Instruments"
        }, 
        {
            "location": "/lab1/background/#accuracy", 
            "text": "There is no such thing as an absolutely accurate or a perfect measurement. A\nmeasurement's  accuracy  represents how closely it represents the actual\nvalue.  Instruments themselves obey physical laws and usually interact with the\nphenomenon being measured, limiting measurement accuracy. Using a Digital\nMultimeter (DMM) as an example, accuracy is often stated as some percentage of\nthe actual measurement, or as a percentage of the full scale measurement. For\nexample, the Hewlett-Packard DMM has a specified accuracy of  \\({\\pm}0.3\\%\\) \nfor DC voltage measurements,  \\(1%\\)  for DC current,  \\(2%\\)  for AC voltage and\ncurrent, and  \\(0.7%\\)  for resistance.  Tables of these accuracies are usually\npublished in operating manuals.", 
            "title": "Accuracy"
        }, 
        {
            "location": "/lab1/background/#resolution", 
            "text": "The smallest measurable change that can be detected\nis resolution. The DMM has a resolution of one least significant digit.\nThe resolution of the scope and function generator depends on how good\nyour eyesight is. Something on the order of  \\(0.5%\\)  would be typical.", 
            "title": "Resolution"
        }, 
        {
            "location": "/lab1/background/#precision", 
            "text": "Precision specifies an instrument's ability to repeat\na given measurement. If you measure a resistance using the ohmmeter mode\non the DMM and then come back a few minutes later, you should record the\nsame value for the resistance. However, instruments can drift and the\nstability of the measured phenomenon may be in question.", 
            "title": "Precision"
        }, 
        {
            "location": "/lab1/experiment_1-1/", 
            "text": "ELEC 243 Lab\n\n\n\n\nExperiment 1.1\n\n\nDC Measurements: the DMM\n\n\nEquipment\n\n\n\n\nBattery Pack and Batteries\n\n\nLightbulb Socket Board\n\n\nDigital Multimeter\n\n\nBanana Plug Patch Cords\n\n\n\n\nPart A: Measuring Voltage with the DMM\n\n\n\n\n\n\nTurn on the digital multimeter (DMM) to the setting for DC volts\n   measurement:\n\n\n\n\n\n\n\n\nMake sure the negative (black) lead is plugged into the COM terminal and the\n   positive (red) lead is plugged into the V terminal, as shown in the picture.\n   COM stands for common, or in other words, the termin al that is the point of\n   reference for other terminals.\n\n\n\n\n\n\nMeasure the voltage of each battery\n by holding the positive probe\n   against the top of the battery and the negative probe against the bottom.\n\n\n\n\nNote\n\n\nIn measuring voltage, we are always measuring the \ndifference in potential\n\nbetween two nodes. So the meter is always connected across two points.\n\n\n\n\n\n\n\n\nPlace the two batteries into the holder in the orientation indicated.\n   \nMeasure the voltage of the battery pack. It should be equal to the sum of\n   the two batteries. Is it?\n\n\n\n\nWarning\n\n\nBe careful not to short the two leads of the battery pack together once the\nbatteries are installed. To be safe, remove at least one of the batteries when\nthe pack is not in use.\n\n\n\n\n\n\n\n\nWire the circuit below by screwing the leads from the battery pack to L and\n   R terminals of the lamp board. The bulb should light (though rather dimly).\n   \nMeasure the battery voltage again. Is it the same as before?\n\n\n\n\n\n\n\n    \n\n   \n\n\nPart B: Measuring Current with the DMM\n\n\nTo measure current, we must connect the meter \nin series\n with the\ncircuit we are measuring, as in the figure below. This is because\ncurrent flows \nthrough\n a conductor, whereas voltage appears \nacross\n\ntwo conductors.\n\n\nThis is because current flows \nthrough\n a conductor, whereas voltage\nappears \nacross\n pairs of conductors.\n\n\n\n\n\n\n\n\n\n\n\n\nWith the meter disconnected from the circuit, set the function switch to DC\n   current (\"A\" with straight solid and dashed lines above it). Move the red\n   meter lead to the 300 mA terminal.\n\n\n\n\nWarning\n\n\nAn ammeter must always be connected in series. Connecting an ammeter in\nparallel with a circuit element can pass very large currents through the\nammeter, blowing its internal fuse or damaging it. A good practice is to always\nreset the DMM to voltage measurement settings after making a current\nmeasurement.\n\n\n\n\n\n\n\n\nUse the NC ('not connected') terminal as a node to connect the positive\n   battery terminal to the positive lead of the DMM.\n\n\n\n\n\n\nNote the current value displayed on the DMM.\n\n\n\n\n\n\nPart C: Measuring Resistance with the DMM\n\n\n\n\n\n\nSet the DMM to Ohms (W) and return the positive meter lead to Volts/Ohms\n   terminal. Touch the two probes together. The meter should read zero\n   resistance. If it reads more than a few tenths of an ohm, check for poor\n   connections or have your meter serviced.\n\n\n\n\n\n\nSelect several resistors at random from your parts kit. For each resistor,\n   determine its nominal value from the \ncolor code\n,\n   then measure its resistance by touching one probe to each lead of the\n   resistor. \nDo the nominal and measured values agree?\n\n\n\n\nNote\n\n\nTo read a 4-band resistor color code, view it with the gold/silver band\nto the right. The first two band colors correspond to the first two\ndigits of the resistor value and the third band color is the\nmultiplier.  The fourth band is the percent tolerance. Tolerance means\nthat the actual resistance value is guaranteed to be within the marked\nvalue specified percent.\n\n\n\n\n\n\nNote\n\n\nTo measure resistance, lay the resistor on the bench and test as shown\nbelow.\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n\nWhat's wrong with holding the leads and probes between your fingers?\n \n\n\n\n\n\n\n\n\n\n\n\n\nThe actual resistance \n\\(R\\)\n of a resistor having nominal values \n\\(R_0\\)\n and\n   tolerance \n\\(d\\)\n lies in the range \n\\(R_0(1+d)\\)\n. \nWhat is the tolerance of a series\n   connection of two such resistors? Of a parallel connection?\n\n\n\n\n\n\nObtain ten resistors with the same marked value. Measure the resistance of\n   each resistor. \nDoes your batch have the stated accuracy?\n\n\n\n\n\n\nHolding one DMM lead in each hand, measure your own resistance. The reading\n   may be unstable, therefore the resolution is limited to the digit that\n   changes least often. \nWhat is the value and resolution of your\n   resistance?\n\n\n\n\n\n\nDoes your resistance change when you wet your fingers? If so, speculate\n   why. What voltage would be necessary to produce a 5mA current through you?\n\n   (Why 5mA? Read \nSafety\n).\n\n\n\n\n\n\nUsing the DMM, \nmeasure the resistance of the light bulb. Does this\n   correspond to the value you would expect from Ohm's Law given the values of\n   voltage and current you measured in Parts A and B?\n\n\n\n\nWarning\n\n\nThe DMM can only measure the resistance of an element when it is\ndisconnected from the circuit. Remember to turn off the power source or\nthe value measured will be inaccurate.\n\n\n\n\n\n\n\n\nPart D: Measuring the I-V Characteristics of the Light Bulb\n\n\nAn ideal resistor obeys Ohm's law: \n\\(I=V/R\\)\n, i.e. the current through the\nelement is proportional to the voltage across it. But for most real materials,\nthe resistance changes as the temperature changes, and clearly, the temperature\nof the light bulb's filament increases as more current flows through it. Let's\nfind out how the current and voltage of our light bulb are related.\n\n\nFor this measurement, we will need to vary the voltage applied to the bulb, so\nwe will need a variable voltage source. This is provided by the DC Power Supply\non the VirtualBench. The DC power supply actually contains two variable voltage\nsources, but we will be using only one of them, the \n\\(0-6V\\)\n supply.\n\n\n\n\n\n\nMake sure the DC power dongle is attached to your VirtualBench (VB).\n\n\n\n\n\n\n\n\n\n\n\n\nSet the DMM to DC Volts. Connect the black (-) probe to the black \n\\(0-6V\\)\n\n   output terminal and the red (+) probe to the red terminal.\n\n\n\n\n\n\nPress the power button on the power supply interface below the oscilloscope\n   screen. Gradually increase the output voltage by raising the voltage in the\n   \n\\(+6V\\)\n setting. Both the power supply and the DMM should show increasing\n   voltage values. For several different values, note both the power supply \n\\(+6V\\)\n\n   setting and the DMM reading. \nHow do the two compare?\n Return the voltage\n   output to zero.\n\n\n\n\nNote\n\n\nFor the rest of this part, you will need to use VirtualBench as your\nsecond DMM. To use the DMM feature of VirtualBench, plug in the leads\nto the digital multimeter feature of VirtualBench. Note that\nVirtualBench contains two pairs of sockets for the leads: the left\nsocket pair can be used for measuring voltage and resistance, while the\nright socket pair can be used for measuring current.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWire the circuit below. You will need \nbanana plug patch\n   cords\n for this.\n\n\n\n\n\n\n\n\n\n\n\n\nMeasure the current for voltages between \n\\(0V\\)\n and \n\\(1V\\)\n, in steps of about \n\\(0.2\n   V\\)\n. and between \n\\(1V\\)\n and \n\\(5V\\)\n in steps of about \n\\(0.5 V\\)\n. It is not necessary to\n   have \n\\(V\\)\n exactly equal to \n\\(1.000, 1.500,\\)\n etc. Just get it close and write down\n   the numbers accurately.\n\n\n\n\n\n\nPlot \n\\(I\\)\n as a function of \n\\(V\\)\n. \nHow?\n\n\n\n\n\n\nTo what point on this curve does the value of resistance you measured with\n   the ohmmeter correspond?\n\n\n\n\n\n\nNow generate a \n\\(I\\)\n vs. \n\\(V\\)\n curve for a \n\\(1000\\)\n-ohm resistor\n   (brown-black-red). You can use the NC and L binding posts to hold the\n   resistor for this measurement. \nIs our assumption that \n\\(I=V/R\\)\n for all \n\\(V\\)\n\n   a valid one?\n\n\n\n\n\n\nWhen finished, turn off the DMM.", 
            "title": "DC Measurements: the DMM"
        }, 
        {
            "location": "/lab1/experiment_1-1/#experiment-11", 
            "text": "", 
            "title": "Experiment 1.1"
        }, 
        {
            "location": "/lab1/experiment_1-1/#dc-measurements-the-dmm", 
            "text": "", 
            "title": "DC Measurements: the DMM"
        }, 
        {
            "location": "/lab1/experiment_1-1/#equipment", 
            "text": "Battery Pack and Batteries  Lightbulb Socket Board  Digital Multimeter  Banana Plug Patch Cords", 
            "title": "Equipment"
        }, 
        {
            "location": "/lab1/experiment_1-1/#part-a-measuring-voltage-with-the-dmm", 
            "text": "Turn on the digital multimeter (DMM) to the setting for DC volts\n   measurement:     Make sure the negative (black) lead is plugged into the COM terminal and the\n   positive (red) lead is plugged into the V terminal, as shown in the picture.\n   COM stands for common, or in other words, the termin al that is the point of\n   reference for other terminals.    Measure the voltage of each battery  by holding the positive probe\n   against the top of the battery and the negative probe against the bottom.   Note  In measuring voltage, we are always measuring the  difference in potential \nbetween two nodes. So the meter is always connected across two points.     Place the two batteries into the holder in the orientation indicated.\n    Measure the voltage of the battery pack. It should be equal to the sum of\n   the two batteries. Is it?   Warning  Be careful not to short the two leads of the battery pack together once the\nbatteries are installed. To be safe, remove at least one of the batteries when\nthe pack is not in use.     Wire the circuit below by screwing the leads from the battery pack to L and\n   R terminals of the lamp board. The bulb should light (though rather dimly).\n    Measure the battery voltage again. Is it the same as before?", 
            "title": "Part A: Measuring Voltage with the DMM"
        }, 
        {
            "location": "/lab1/experiment_1-1/#part-b-measuring-current-with-the-dmm", 
            "text": "To measure current, we must connect the meter  in series  with the\ncircuit we are measuring, as in the figure below. This is because\ncurrent flows  through  a conductor, whereas voltage appears  across \ntwo conductors.  This is because current flows  through  a conductor, whereas voltage\nappears  across  pairs of conductors.       With the meter disconnected from the circuit, set the function switch to DC\n   current (\"A\" with straight solid and dashed lines above it). Move the red\n   meter lead to the 300 mA terminal.   Warning  An ammeter must always be connected in series. Connecting an ammeter in\nparallel with a circuit element can pass very large currents through the\nammeter, blowing its internal fuse or damaging it. A good practice is to always\nreset the DMM to voltage measurement settings after making a current\nmeasurement.     Use the NC ('not connected') terminal as a node to connect the positive\n   battery terminal to the positive lead of the DMM.    Note the current value displayed on the DMM.", 
            "title": "Part B: Measuring Current with the DMM"
        }, 
        {
            "location": "/lab1/experiment_1-1/#part-c-measuring-resistance-with-the-dmm", 
            "text": "Set the DMM to Ohms (W) and return the positive meter lead to Volts/Ohms\n   terminal. Touch the two probes together. The meter should read zero\n   resistance. If it reads more than a few tenths of an ohm, check for poor\n   connections or have your meter serviced.    Select several resistors at random from your parts kit. For each resistor,\n   determine its nominal value from the  color code ,\n   then measure its resistance by touching one probe to each lead of the\n   resistor.  Do the nominal and measured values agree?   Note  To read a 4-band resistor color code, view it with the gold/silver band\nto the right. The first two band colors correspond to the first two\ndigits of the resistor value and the third band color is the\nmultiplier.  The fourth band is the percent tolerance. Tolerance means\nthat the actual resistance value is guaranteed to be within the marked\nvalue specified percent.    Note  To measure resistance, lay the resistor on the bench and test as shown\nbelow.           What's wrong with holding the leads and probes between your fingers?         The actual resistance  \\(R\\)  of a resistor having nominal values  \\(R_0\\)  and\n   tolerance  \\(d\\)  lies in the range  \\(R_0(1+d)\\) .  What is the tolerance of a series\n   connection of two such resistors? Of a parallel connection?    Obtain ten resistors with the same marked value. Measure the resistance of\n   each resistor.  Does your batch have the stated accuracy?    Holding one DMM lead in each hand, measure your own resistance. The reading\n   may be unstable, therefore the resolution is limited to the digit that\n   changes least often.  What is the value and resolution of your\n   resistance?    Does your resistance change when you wet your fingers? If so, speculate\n   why. What voltage would be necessary to produce a 5mA current through you? \n   (Why 5mA? Read  Safety ).    Using the DMM,  measure the resistance of the light bulb. Does this\n   correspond to the value you would expect from Ohm's Law given the values of\n   voltage and current you measured in Parts A and B?   Warning  The DMM can only measure the resistance of an element when it is\ndisconnected from the circuit. Remember to turn off the power source or\nthe value measured will be inaccurate.", 
            "title": "Part C: Measuring Resistance with the DMM"
        }, 
        {
            "location": "/lab1/experiment_1-1/#part-d-measuring-the-i-v-characteristics-of-the-light-bulb", 
            "text": "An ideal resistor obeys Ohm's law:  \\(I=V/R\\) , i.e. the current through the\nelement is proportional to the voltage across it. But for most real materials,\nthe resistance changes as the temperature changes, and clearly, the temperature\nof the light bulb's filament increases as more current flows through it. Let's\nfind out how the current and voltage of our light bulb are related.  For this measurement, we will need to vary the voltage applied to the bulb, so\nwe will need a variable voltage source. This is provided by the DC Power Supply\non the VirtualBench. The DC power supply actually contains two variable voltage\nsources, but we will be using only one of them, the  \\(0-6V\\)  supply.    Make sure the DC power dongle is attached to your VirtualBench (VB).       Set the DMM to DC Volts. Connect the black (-) probe to the black  \\(0-6V\\) \n   output terminal and the red (+) probe to the red terminal.    Press the power button on the power supply interface below the oscilloscope\n   screen. Gradually increase the output voltage by raising the voltage in the\n    \\(+6V\\)  setting. Both the power supply and the DMM should show increasing\n   voltage values. For several different values, note both the power supply  \\(+6V\\) \n   setting and the DMM reading.  How do the two compare?  Return the voltage\n   output to zero.   Note  For the rest of this part, you will need to use VirtualBench as your\nsecond DMM. To use the DMM feature of VirtualBench, plug in the leads\nto the digital multimeter feature of VirtualBench. Note that\nVirtualBench contains two pairs of sockets for the leads: the left\nsocket pair can be used for measuring voltage and resistance, while the\nright socket pair can be used for measuring current.        Wire the circuit below. You will need  banana plug patch\n   cords  for this.       Measure the current for voltages between  \\(0V\\)  and  \\(1V\\) , in steps of about  \\(0.2\n   V\\) . and between  \\(1V\\)  and  \\(5V\\)  in steps of about  \\(0.5 V\\) . It is not necessary to\n   have  \\(V\\)  exactly equal to  \\(1.000, 1.500,\\)  etc. Just get it close and write down\n   the numbers accurately.    Plot  \\(I\\)  as a function of  \\(V\\) .  How?    To what point on this curve does the value of resistance you measured with\n   the ohmmeter correspond?    Now generate a  \\(I\\)  vs.  \\(V\\)  curve for a  \\(1000\\) -ohm resistor\n   (brown-black-red). You can use the NC and L binding posts to hold the\n   resistor for this measurement.  Is our assumption that  \\(I=V/R\\)  for all  \\(V\\) \n   a valid one?    When finished, turn off the DMM.", 
            "title": "Part D: Measuring the I-V Characteristics of the Light Bulb"
        }, 
        {
            "location": "/lab1/plotting-help/", 
            "text": "ELEC 243 Lab\n\n\nPlotting X vs. Y\n\n\nOne way to plot one variable versus another is with the \nPlot()\n function of\nMatlab. Begin by opening up Matlab on the desktop, and entering the data in as\nvectors. Note that Matlab plots in the order that the points are given, so be\ncareful that each value in the \n\\(x\\)\n and \n\\(y\\)\n vector corresponds with the next\npoint. \n\n\nx=[1 2 3 4 5]; \ny=[1 4 9 16 25];\nplot(x,y);\n\n\n\n\nOf course, it would be useful to title the plots. This can be\ndone in Matlab with the following lines:  \n\n\ntitle('Y AXIS VS X AXIS')\nxlabel('X AXIS LABEL') \nylabel('Y AXIS LABEL')\n\n\n\n\nNote that you can do \n\\(\\LaTeX\\)\n Style subscripts using underscores in Plot\nTitles.  Once you're done naming the plots, save them by clicking \"file\" and\nthen \"save as\". Make sure to save as a JPG. Example plot:", 
            "title": "Plotting Data in Matlab"
        }, 
        {
            "location": "/lab1/plotting-help/#elec-243-lab", 
            "text": "", 
            "title": "ELEC 243 Lab"
        }, 
        {
            "location": "/lab1/plotting-help/#plotting-x-vs-y", 
            "text": "One way to plot one variable versus another is with the  Plot()  function of\nMatlab. Begin by opening up Matlab on the desktop, and entering the data in as\nvectors. Note that Matlab plots in the order that the points are given, so be\ncareful that each value in the  \\(x\\)  and  \\(y\\)  vector corresponds with the next\npoint.   x=[1 2 3 4 5]; \ny=[1 4 9 16 25];\nplot(x,y);  Of course, it would be useful to title the plots. This can be\ndone in Matlab with the following lines:    title('Y AXIS VS X AXIS')\nxlabel('X AXIS LABEL') \nylabel('Y AXIS LABEL')  Note that you can do  \\(\\LaTeX\\)  Style subscripts using underscores in Plot\nTitles.  Once you're done naming the plots, save them by clicking \"file\" and\nthen \"save as\". Make sure to save as a JPG. Example plot:", 
            "title": "Plotting X vs. Y"
        }, 
        {
            "location": "/lab1/interlude/", 
            "text": "ELEC 243 Lab\n\n\n\n\nInterlude\n\n\nGrounds and Grounding\n\n\nSince a voltage is actually a \ndifference\n in potential, it is always measured\n\nbetween\n two points in the circuit. In most circuits there is a single point\n(actually many physical points tied together by low resistance conductors into\na single electrical point) with respect to which all other voltages are\nexpressed. This point is called the \"common\", \"reference\", or \"ground\" node.\nThe term \"ground\" arises from the fact that in the early days of telegraphy,\none leg of the circuit was formed by the earth itself by driving a conductive\nrod into the ground at each of the two stations so that only a single wire was\nrequired between them.\n\n\nIn our circuits, we will actually use a wire, rather than dirt, to form the\nground connection, but we must bear in mind that all of our ground terminals\nare connected together (sometimes without our doing so explicitly). This\nconcept of a common ground terminal becomes important when we look at our next\ntwo instruments, the Function Generator and the Oscilloscope.\n\n\nSo far most of the the instruments and components we've used have had\ntheir terminals connected to banana jacks. For example:\n\n\n\n\n\n\n\n\ninstrument\n\n\nimage\n\n\n\n\n\n\n\n\n\n\npower supply\n\n\n\n\n\n\n\n\nDMM\n\n\n\n\n\n\n\n\nlamp breadboard\n\n\n\n\n\n\n\n\n\n\nThe function generator and 'scope don't have banana jacks. Instead they have\nwhat are called \"BNC\" connectors. These are a type of \ncoaxial\n connector where\nthe outer (ground) conductor surrounds the inner (signal) conductor. So instead\nof:\n\n\n\n\n\n\n\n\nwe have:\n\n\n\n\n\n\n\n\nThis type of connection has a number of advantages. The shielding by the outer\nconductor reduces interference \nto\n low level signals and \nby\n high level ones.\nThe single connector allows both terminals to be connected simultaneously.\n\n\nThe (sometime) disadvantage is that the outer (shield or ground) conductors of\n\nall\n the BNC connectors on \nall\n our instruments are connected together.\nWithin one instrument they are connected together by the metal chassis. Since\nthe chassis is connected to the third (ground) terminal of the power cord, the\nchassis (and hence the grounds) of all the instruments are connected together.\nLater we'll see how this can be a disadvantage. For now, let's avail ourselves\nof some of the advantages.", 
            "title": "Grounds and Grounding"
        }, 
        {
            "location": "/lab1/interlude/#interlude", 
            "text": "", 
            "title": "Interlude"
        }, 
        {
            "location": "/lab1/interlude/#grounds-and-grounding", 
            "text": "Since a voltage is actually a  difference  in potential, it is always measured between  two points in the circuit. In most circuits there is a single point\n(actually many physical points tied together by low resistance conductors into\na single electrical point) with respect to which all other voltages are\nexpressed. This point is called the \"common\", \"reference\", or \"ground\" node.\nThe term \"ground\" arises from the fact that in the early days of telegraphy,\none leg of the circuit was formed by the earth itself by driving a conductive\nrod into the ground at each of the two stations so that only a single wire was\nrequired between them.  In our circuits, we will actually use a wire, rather than dirt, to form the\nground connection, but we must bear in mind that all of our ground terminals\nare connected together (sometimes without our doing so explicitly). This\nconcept of a common ground terminal becomes important when we look at our next\ntwo instruments, the Function Generator and the Oscilloscope.  So far most of the the instruments and components we've used have had\ntheir terminals connected to banana jacks. For example:     instrument  image      power supply     DMM     lamp breadboard      The function generator and 'scope don't have banana jacks. Instead they have\nwhat are called \"BNC\" connectors. These are a type of  coaxial  connector where\nthe outer (ground) conductor surrounds the inner (signal) conductor. So instead\nof:     we have:     This type of connection has a number of advantages. The shielding by the outer\nconductor reduces interference  to  low level signals and  by  high level ones.\nThe single connector allows both terminals to be connected simultaneously.  The (sometime) disadvantage is that the outer (shield or ground) conductors of all  the BNC connectors on  all  our instruments are connected together.\nWithin one instrument they are connected together by the metal chassis. Since\nthe chassis is connected to the third (ground) terminal of the power cord, the\nchassis (and hence the grounds) of all the instruments are connected together.\nLater we'll see how this can be a disadvantage. For now, let's avail ourselves\nof some of the advantages.", 
            "title": "Grounds and Grounding"
        }, 
        {
            "location": "/lab1/experiment_1-2/", 
            "text": "ELEC 243 Lab\n\n\n\n\nExperiment 1.2\n\n\nThe Oscilloscope and Function Generator\n\n\nEquipment\n\n\n\n\nBNC Patch Cords\n\n\n\n\nSo far we've measured only constant (or nearly constant) voltages and currents.\nA much more interesting class of signals are \ntime varying\n voltages and\ncurrents. For a slowly time varying signal, we could just write down the values\nas they change (as we did in plotting the light bulb I-V curve), but for most\ntime varying signals we need something a bit faster. On the VirtualBench, that\nwould be the \noscilloscope\n.\n\n\nIn order to measure time varying signals, we need a source of time varying\nsignals. The DC power supply on the VirtualBench is our source of constant\nvoltages, and the \nfunction generator\n is our source for that class of time\nvarying signals known as \nperiodic signals\n.\n\n\nPart A: Viewing Signals with the Oscilloscope\n\n\nFirst get acquainted with the settings of the oscilloscope, even though\nyou will continue using many of them in their default setting. Make sure\nyou are being consistent in using either \nCH 1\n or \n2\n.\n\n\n\n\nNote\n\n\nMake sure the oscilloscope controls are as follows:\n\n\n\n\nTime/Div: 1ms\n\n\nMode: Auto\n\n\nDisplay: CH 1\n\n\nVolts/Div: 2V\n\n\nAC-DC: DC\n\n\nTrigger: Edge; CH 1; Rising\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nIf everything is in order, you should see a red horizontal line through the\nmiddle of the screen.\n\n\n\n\n\n\n\n\nSet up the function generator to produce a 1kHz sine wave (found to the\n   right of the oscilloscope display). Turn on the power button for the\n   function generator. Set it as follows:\n\n\n\n\nFrequency: 1.0 kHz\n\n\nAmplitude 3 Vpp (Volts, peak-to-peak)\n\n\nDC Offset: 0 V\n\n\nDuty Cycle (only used for square wave setting)\n\n\nFunction: Sine wave\n\n\n\n\n\n\n\n\nConnect the function generator's \nOUTPUT\n to the oscilloscope's \nCH 1\n input.\n   The easiest way to do this is to connect one end of a BNC patch cord to the\n   function generator \nFGEN\n and the other to the oscilloscope \nCH\n\n\n\n\n\n\nThis connects the generator's ground and signal terminals to the scope's\n   ground and terminals. If all has gone well, you should see 6 full cycles of\n   a sine wave in red.\n\n\n\n\n\n\nNow examine the effect of each control:\n\n\n\n\n\n\nMove the display with the positioning controls - click and drag the\n  toolbar at the top.\n\n\n\n\n\n\nChange the Time/Div and Volts/Div settings to see what effects are\n  produced.\n\n\n\n\n\n\nClick on the ruler in the bottom left of the screen and change the\n  settings of the function generator to observe how the oscilloscope\n  automatically measures signal features such as frequency, period, and\n  amplitude.\n\n\n\n\n\n\nWhy do you think these numbers are slightly different from the function\n  generator settings?\n\n\n\n\n\n\n\n\n\n\nExamine the various waveforms produced by the function generator.  Examine\n   the effects of the \nDUTY CYCLE\n and \nDC OFFSET\n controls. Before going on, be\n   certain that you are comfortable with the oscilloscope and function\n   generator. If you are having problems, ask your labbie for help.\n\n\n\n\n\n\nPart B: Quantitative Measurements with the Oscilloscope\n\n\nIn addition to allowing us to view the \"shape\" of a signal, the oscilloscope\ncan also measure voltage, amplitude, time intervals, and frequency.\n\n\n\n\n\n\nConnect the oscilloscope \nCH 2\n input to the \n\\(0-6V\\)\n output of the DC power\n   supply. For this you can use a BNC patch cord and your \nBNC to banana\n   plug adapter\n. \n\n\n\n\n\n\n\n\n\n\n\n\nSwitch to \nCH 2\n and under Channel Settings, set the vertical offset to 0.\n   This effectively sets the reference to \n\\(0\\)\n, known as \"zeroing\" the signal.\n\n\n\n\n\n\nIncrease the voltage to \n\\(2V\\)\n. Continue to increase the voltage and see how\n   well the scope readings and power supply settings agree.\n\n\n\n\n\n\nWhy would we want to use the oscilloscope to measure a \"DC\" voltage?\n\n\n\n\n\n\nSwitch to \nCH 1\n and \"zero\" Channel 1 as above. Set the function generator\n   to produce a 2kHz sine wave. Set the \nTIME/DIV\n setting to \n\\(100 \\mu s\\)\n.\n   Measure the distance between two successive zero crossings of the same slope\n   and multiply by the Time / Div factor to get the \nperiod\n of the waveform.\n   Using the formula \n\\(f=1/T\\)\n, determine the measured frequency of the signal.\n   \nHow does this compare with the nominal frequency?\n\n\n\n\nNote\n\n\nThere are several ways we can express the amplitude of a signal. For the\nsine wave \n\\(y(t)=Asin(2\u03c0ft)\\)\n the amplitude A is equal to the distance from the\npositive (or negative) peaks of the waveform to the t-axis.  This peak\namplitude measurement is equally useful for any waveform which has equal\npositive and negative peaks.\n\n\nArbitrary waveforms may not have this property, so a more general\nmeasurement is the peak-to-peak amplitude, the distance between the\npositive and negative peaks of the signal.\n\n\nOther measures of a signal's magnitude include average and rms, which we'll\ntalk about later. Since in general these different measures have different\nvalues, it is a good idea always to specify which amplitude measurement you\nare using.\n\n\n\n\n\n\n\n\nWe can also use the oscilloscope to measure the \namplitude\n of a signal.\n   Disconnect your oscilloscope from the function generator and use a BNC clip\n   lead to connect \nCH 1\n to the square wave and ground outputs of the scope,\n   located to the right of the \nCH 2\n input socket.\n\n\n\n\n\n\nSketch this signal's waveform.\n What is its period? What is its\n   frequency? Adjust the CH 1 Volts/Div switch so that the waveform nearly\n   fills the screen vertically. Measure the peak-to-peak amplitude by counting\n   the number of divisions between the upper and lower peaks and multiplying by\n   the Volts/Div factor. Does your measurement of the waveform's amplitude\n   correspond to the VB's measurement? (Click on the ruler button to look at\n   the signal's measurements.)\n\n\n\n\n\n\nTake a screenshot of the waveform\n by going to File \n\\(\\rightarrow\\)\n Export Screenshot", 
            "title": "The Oscilloscope and Function Generator"
        }, 
        {
            "location": "/lab1/experiment_1-2/#experiment-12", 
            "text": "", 
            "title": "Experiment 1.2"
        }, 
        {
            "location": "/lab1/experiment_1-2/#the-oscilloscope-and-function-generator", 
            "text": "", 
            "title": "The Oscilloscope and Function Generator"
        }, 
        {
            "location": "/lab1/experiment_1-2/#equipment", 
            "text": "BNC Patch Cords   So far we've measured only constant (or nearly constant) voltages and currents.\nA much more interesting class of signals are  time varying  voltages and\ncurrents. For a slowly time varying signal, we could just write down the values\nas they change (as we did in plotting the light bulb I-V curve), but for most\ntime varying signals we need something a bit faster. On the VirtualBench, that\nwould be the  oscilloscope .  In order to measure time varying signals, we need a source of time varying\nsignals. The DC power supply on the VirtualBench is our source of constant\nvoltages, and the  function generator  is our source for that class of time\nvarying signals known as  periodic signals .", 
            "title": "Equipment"
        }, 
        {
            "location": "/lab1/experiment_1-2/#part-a-viewing-signals-with-the-oscilloscope", 
            "text": "First get acquainted with the settings of the oscilloscope, even though\nyou will continue using many of them in their default setting. Make sure\nyou are being consistent in using either  CH 1  or  2 .   Note  Make sure the oscilloscope controls are as follows:   Time/Div: 1ms  Mode: Auto  Display: CH 1  Volts/Div: 2V  AC-DC: DC  Trigger: Edge; CH 1; Rising        Note  If everything is in order, you should see a red horizontal line through the\nmiddle of the screen.     Set up the function generator to produce a 1kHz sine wave (found to the\n   right of the oscilloscope display). Turn on the power button for the\n   function generator. Set it as follows:   Frequency: 1.0 kHz  Amplitude 3 Vpp (Volts, peak-to-peak)  DC Offset: 0 V  Duty Cycle (only used for square wave setting)  Function: Sine wave     Connect the function generator's  OUTPUT  to the oscilloscope's  CH 1  input.\n   The easiest way to do this is to connect one end of a BNC patch cord to the\n   function generator  FGEN  and the other to the oscilloscope  CH    This connects the generator's ground and signal terminals to the scope's\n   ground and terminals. If all has gone well, you should see 6 full cycles of\n   a sine wave in red.    Now examine the effect of each control:    Move the display with the positioning controls - click and drag the\n  toolbar at the top.    Change the Time/Div and Volts/Div settings to see what effects are\n  produced.    Click on the ruler in the bottom left of the screen and change the\n  settings of the function generator to observe how the oscilloscope\n  automatically measures signal features such as frequency, period, and\n  amplitude.    Why do you think these numbers are slightly different from the function\n  generator settings?      Examine the various waveforms produced by the function generator.  Examine\n   the effects of the  DUTY CYCLE  and  DC OFFSET  controls. Before going on, be\n   certain that you are comfortable with the oscilloscope and function\n   generator. If you are having problems, ask your labbie for help.", 
            "title": "Part A: Viewing Signals with the Oscilloscope"
        }, 
        {
            "location": "/lab1/experiment_1-2/#part-b-quantitative-measurements-with-the-oscilloscope", 
            "text": "In addition to allowing us to view the \"shape\" of a signal, the oscilloscope\ncan also measure voltage, amplitude, time intervals, and frequency.    Connect the oscilloscope  CH 2  input to the  \\(0-6V\\)  output of the DC power\n   supply. For this you can use a BNC patch cord and your  BNC to banana\n   plug adapter .        Switch to  CH 2  and under Channel Settings, set the vertical offset to 0.\n   This effectively sets the reference to  \\(0\\) , known as \"zeroing\" the signal.    Increase the voltage to  \\(2V\\) . Continue to increase the voltage and see how\n   well the scope readings and power supply settings agree.    Why would we want to use the oscilloscope to measure a \"DC\" voltage?    Switch to  CH 1  and \"zero\" Channel 1 as above. Set the function generator\n   to produce a 2kHz sine wave. Set the  TIME/DIV  setting to  \\(100 \\mu s\\) .\n   Measure the distance between two successive zero crossings of the same slope\n   and multiply by the Time / Div factor to get the  period  of the waveform.\n   Using the formula  \\(f=1/T\\) , determine the measured frequency of the signal.\n    How does this compare with the nominal frequency?   Note  There are several ways we can express the amplitude of a signal. For the\nsine wave  \\(y(t)=Asin(2\u03c0ft)\\)  the amplitude A is equal to the distance from the\npositive (or negative) peaks of the waveform to the t-axis.  This peak\namplitude measurement is equally useful for any waveform which has equal\npositive and negative peaks.  Arbitrary waveforms may not have this property, so a more general\nmeasurement is the peak-to-peak amplitude, the distance between the\npositive and negative peaks of the signal.  Other measures of a signal's magnitude include average and rms, which we'll\ntalk about later. Since in general these different measures have different\nvalues, it is a good idea always to specify which amplitude measurement you\nare using.     We can also use the oscilloscope to measure the  amplitude  of a signal.\n   Disconnect your oscilloscope from the function generator and use a BNC clip\n   lead to connect  CH 1  to the square wave and ground outputs of the scope,\n   located to the right of the  CH 2  input socket.    Sketch this signal's waveform.  What is its period? What is its\n   frequency? Adjust the CH 1 Volts/Div switch so that the waveform nearly\n   fills the screen vertically. Measure the peak-to-peak amplitude by counting\n   the number of divisions between the upper and lower peaks and multiplying by\n   the Volts/Div factor. Does your measurement of the waveform's amplitude\n   correspond to the VB's measurement? (Click on the ruler button to look at\n   the signal's measurements.)    Take a screenshot of the waveform  by going to File  \\(\\rightarrow\\)  Export Screenshot", 
            "title": "Part B: Quantitative Measurements with the Oscilloscope"
        }, 
        {
            "location": "/lab1/postlude/", 
            "text": "ELEC 243 Lab\n\n\n\n\nPostlude\n\n\nCleaning Up\n\n\nThe final phase of \nany\n experiment is cleaning up. \nPrior to disassembling\nyour experiment, turn off the power on each instrument, including the\nVirtualBench.\n  \n\n\nIf the apparatus did not work during the experiment, let a labbie/instructor\nknow and find an equipment repair label and attach it to the instrument. Return\nall patch cords, clip leads, and your DMM to their proper locations in the\nequipment room.  Turn off bench lights, and dispose of any stripped wire bits.\nThe goal of cleaning up is to leave the lab and the equipment room more\norganized than you found it.  \n\n\nMake sure to put away all equipment, especially in later labs when equipment is\nin high demand. \nDO NOT\n store public lab equipment such as microphones,\nspeakers, and phones in your lockers. (The labbies can take off points for\nthis.)", 
            "title": "Cleaning Up"
        }, 
        {
            "location": "/lab1/postlude/#postlude", 
            "text": "", 
            "title": "Postlude"
        }, 
        {
            "location": "/lab1/postlude/#cleaning-up", 
            "text": "The final phase of  any  experiment is cleaning up.  Prior to disassembling\nyour experiment, turn off the power on each instrument, including the\nVirtualBench.     If the apparatus did not work during the experiment, let a labbie/instructor\nknow and find an equipment repair label and attach it to the instrument. Return\nall patch cords, clip leads, and your DMM to their proper locations in the\nequipment room.  Turn off bench lights, and dispose of any stripped wire bits.\nThe goal of cleaning up is to leave the lab and the equipment room more\norganized than you found it.    Make sure to put away all equipment, especially in later labs when equipment is\nin high demand.  DO NOT  store public lab equipment such as microphones,\nspeakers, and phones in your lockers. (The labbies can take off points for\nthis.)", 
            "title": "Cleaning Up"
        }, 
        {
            "location": "/lab2/", 
            "text": "Lab 2: AC Signals and Measurements\n\n\nIntroduction\n\n\nBefore Lab\n\n\nExperiments\n\n\n\n\nExperiment 2.1: \nMeasuring Heat and Light\n\n\nInterlude: \nThe Breadboard\n\n\nExperiment 2.2: \nElectroacoustic Transducers\n\n\nExperiment 2.3: \nOptoelectronic Transducers", 
            "title": "Home"
        }, 
        {
            "location": "/lab2/#lab-2-ac-signals-and-measurements", 
            "text": "", 
            "title": "Lab 2: AC Signals and Measurements"
        }, 
        {
            "location": "/lab2/#introduction", 
            "text": "", 
            "title": "Introduction"
        }, 
        {
            "location": "/lab2/#before-lab", 
            "text": "", 
            "title": "Before Lab"
        }, 
        {
            "location": "/lab2/#experiments", 
            "text": "Experiment 2.1:  Measuring Heat and Light  Interlude:  The Breadboard  Experiment 2.2:  Electroacoustic Transducers  Experiment 2.3:  Optoelectronic Transducers", 
            "title": "Experiments"
        }, 
        {
            "location": "/lab2/introduction/", 
            "text": "Introduction\n\n\nThe terms DC (short for Direct Current) and AC (Alternating Current)\noriginated in the early days of electric power to differentiate the\nsystem developed by Thomas Edison from that invented by Nicola Tesla and\nsupported by George Westinghouse. In Edison's system the current flowed\ncontinuously in one direction, while the direction of Tesla's current\nalternated at a frequency of 60\u00a0Hz. Today the terms are used somewhat\nmore loosely, with DC referring to signals which are constant or only\nslowly time varying, while AC can mean any rapidly changing signal.\n\n\nStrictly speaking an AC signal should be \nbipolar,\n i.e. having a sign\nwhich alternates with time. While it's certainly possible to have a\ntime-varying signal whose sign never changes, it's not possible to have\none which is strictly monotonic. I.e. what goes up must come down, even\nif it never hits the ground. In this case we sometimes refer to the DC\nand AC \ncomponents\n of a signal, more precisely defined as the average\nvalue and the variations about that average.\n\n\nAn important class of time-varying signals are \nperiodic\n signals for which\n\n\\(f(t) = f(t + nT)\\)\n where \n\\(T\\)\n is the \nperiod\n of the signal, and n is an\ninteger. We can completely characterize a periodic signal by describing its\n\nwaveshape\n (e.g. a sinusoid), its \namplitude\n, and its \nfrequency\n.\n\n\nThe signals we measured last week were DC signals and could be described\nby a single number. This week we will look at a variety of AC signals\nwhich, in addition to being more interesting, can contain a greater\namount of information.", 
            "title": "Introduction"
        }, 
        {
            "location": "/lab2/introduction/#introduction", 
            "text": "The terms DC (short for Direct Current) and AC (Alternating Current)\noriginated in the early days of electric power to differentiate the\nsystem developed by Thomas Edison from that invented by Nicola Tesla and\nsupported by George Westinghouse. In Edison's system the current flowed\ncontinuously in one direction, while the direction of Tesla's current\nalternated at a frequency of 60\u00a0Hz. Today the terms are used somewhat\nmore loosely, with DC referring to signals which are constant or only\nslowly time varying, while AC can mean any rapidly changing signal.  Strictly speaking an AC signal should be  bipolar,  i.e. having a sign\nwhich alternates with time. While it's certainly possible to have a\ntime-varying signal whose sign never changes, it's not possible to have\none which is strictly monotonic. I.e. what goes up must come down, even\nif it never hits the ground. In this case we sometimes refer to the DC\nand AC  components  of a signal, more precisely defined as the average\nvalue and the variations about that average.  An important class of time-varying signals are  periodic  signals for which \\(f(t) = f(t + nT)\\)  where  \\(T\\)  is the  period  of the signal, and n is an\ninteger. We can completely characterize a periodic signal by describing its waveshape  (e.g. a sinusoid), its  amplitude , and its  frequency .  The signals we measured last week were DC signals and could be described\nby a single number. This week we will look at a variety of AC signals\nwhich, in addition to being more interesting, can contain a greater\namount of information.", 
            "title": "Introduction"
        }, 
        {
            "location": "/lab2/before-lab/", 
            "text": "Before Lab\n\n\nLast week we were able to use banana patch cords to make the connections we\nrequired. The components we will be using this week don't have banana\nconnectors. Instead we will be using \nBNC\ncables\n and the \nbreadboard\n and \ninterface\nmodules\n to make connections.\n\n\nYou will need to refer to the breadboard and interface modules (in the\n\nLab Station Handbook\n) for this lab.", 
            "title": "Before Lab"
        }, 
        {
            "location": "/lab2/before-lab/#before-lab", 
            "text": "Last week we were able to use banana patch cords to make the connections we\nrequired. The components we will be using this week don't have banana\nconnectors. Instead we will be using  BNC\ncables  and the  breadboard  and  interface\nmodules  to make connections.  You will need to refer to the breadboard and interface modules (in the Lab Station Handbook ) for this lab.", 
            "title": "Before Lab"
        }, 
        {
            "location": "/lab2/experiment_2-1/", 
            "text": "Experiment 2.1\n\n\nMeasuring Heat and Light\n\n\nEquipment\n\n\n\n\nBNC clip leads\n\n\nBNC-banana adapter\n\n\n\n\nComponents\n\n\n\n\n\\(10K\\)\n Thermistor\n\n\nCdS Photocell\n\n\nPhotodiode\n\n\n\n\nPart A: Thermistor\n\n\nIn Part\u00a04 of Experiment\u00a01.1 we found that the resistance of the light bulb\nfilament increased with increasing temperature. Materials (such as metals)\nwhich exhibit this behavior are said to have a \npositive temperature\ncoefficient\n. Materials (such as semiconductors) whose resistance decreases\nwith temperature have a \nnegative temperature coefficient\n (NTC). The\nthermistor is a piece of NTC material whose resistance is described by the\nequation \n\\(R=R_0 e^{B(\\frac{1}{T}-\\frac{1}{T_0})}\\)\n, where \n\\(R\\)\n is the resistance\nat the measured temperature \n\\(T\\)\n and \n\\(R_0\\)\n is the resistance at the reference\ntemperature \n\\(T_0\\)\n. Note that the temperatures must be absolute temperatures (in\nK).\n\n\n\n\n\n\nIn this experiment we will need to make resistance measurements in\n   situations where using the DMM probes or banana plug patch cords will not be\n   satisfactory.  Fortunately, there is a very convenient way to  do this. Get\n   a BNC clip lead cable from the equipment room and attach it to the\n   BNC-banana adapter from your tool kit, thereby creating a \nbanana plug clip\n   lead cable\n. Plug  the banana plug end of this assembly into the \nV\n and\n   \nCOM\n terminals of your DMM and set the selector switch to \n\\(\\Omega\\)\n.\n\n\n\n\n\n\nConnect the clip leads to the terminals of the thermistor. \n\n\n\n\n\n\nWait until the resistance reading on the DMM has stabilized, and record this\n   value \n\\(R_0\\)\n. This is the ambient room temperature, \n\\(T_0\\)\n.\n\n\n\n\n\n\nPlace the thermistor in contact with your body. \nWhen the resistance\n   reading has stabilized, record the value \n\\(R\\)\n.\n\n\n\n\n\n\nEstimate the ambient temperature in the room. Using your measurements and B\n   value (see \nthermistor\n   datasheet\n),\n   what is your body temperature?\n\n\n\n\n\n\nPart B: CdS Photocell\n\n\nAlso known as a photoconductive cell or photoresistor, this device changes its\nresistance as a function of incident illumination. One useful characteristic of\ncadmium sulphide is that its spectral response closely matches that of the\nhuman eye. That means that a CdS photocell can be used in some photographic and\nphotometric applications without additional filtering.\n\n\n\n\n\n\nRemove the thermistor from the clip leads and replace it with the CdS\n   photocell. \n\n\n\n\n\n\nNote the change of resistance as the illumination of the photocell changes.\n   \nRecord a few interesting values (e.g. ambient, illuminated by work bench\n   overhead light, covered with hand, etc.).\n\n\n\n\n\n\nBased on the nominal characteristics of the photocell, what is the ambient\n   illumination level in the lab? What is the illumination level at a distance\n   of one foot from the work bench overhead light?\n\n\n\n\n\n\nMeasure the resistance of the photocell in darkness. How long does it take\n   for the measured value to stabilize?\n\n\n\n\n\n\nPart C: The Photodiode\n\n\nThe thermistor and photocell are passive transducers: in order to convert the\nchanges in resistance into an electrical signal an external source of\nelectrical power is required. There is another class of sensors, called\nself-generating, which convert the applied input directly to an electrical\nsignal. One such transducer is the photodiode which converts incident optical\npower into electrical power. \n\n\n\n\n\n\nRemove the CdS photocell from the clip leads and replace it with the\n   photodiode. \n\n\n\n\n\n\nSet the DMM to DC Volts. \n\n\n\n\n\n\nObserve the changes in voltage produced by the photodiode as the amount of\n   light reaching it is changed. \nRecord the voltages for the same light\n   conditions you did for the CdS photocell in Part B.\n\n\n\n\n\n\nExamination of the data sheet for the photodiode shows that it is the\n   \ncurrent\n rather than the \nvoltage\n which is proportional to the incident\n   illumination. Set the DMM to DC Current and connect the clip leads to the\n   \nCOM\n and \n300 mA\n terminals. (Since the spacing between these two terminals\n   is not the same as the spacing between the plugs on the banana plug adapter,\n   you will have to insert one plug into one of the terminals and use a banana\n   plug patch cord to connect the other.)\n\n\n\n\n\n\nObserve the changes in the current produced by the photodiode as the amount\n   of light reaching it is changed. \nRecord the current values for the same\n   light conditions you did previously in Part B.\n\n\n\n\n\n\nBased on the nominal characteristics of the photodiode, what is the\n   ambient illumination level in the lab? What is the illumination level at a\n   distance of one foot from the incandescant lamp? How do these values compare\n   with those measured with the CdS photocell?", 
            "title": "Measuring Heat and Light"
        }, 
        {
            "location": "/lab2/experiment_2-1/#experiment-21", 
            "text": "", 
            "title": "Experiment 2.1"
        }, 
        {
            "location": "/lab2/experiment_2-1/#measuring-heat-and-light", 
            "text": "", 
            "title": "Measuring Heat and Light"
        }, 
        {
            "location": "/lab2/experiment_2-1/#equipment", 
            "text": "BNC clip leads  BNC-banana adapter", 
            "title": "Equipment"
        }, 
        {
            "location": "/lab2/experiment_2-1/#components", 
            "text": "\\(10K\\)  Thermistor  CdS Photocell  Photodiode", 
            "title": "Components"
        }, 
        {
            "location": "/lab2/experiment_2-1/#part-a-thermistor", 
            "text": "In Part\u00a04 of Experiment\u00a01.1 we found that the resistance of the light bulb\nfilament increased with increasing temperature. Materials (such as metals)\nwhich exhibit this behavior are said to have a  positive temperature\ncoefficient . Materials (such as semiconductors) whose resistance decreases\nwith temperature have a  negative temperature coefficient  (NTC). The\nthermistor is a piece of NTC material whose resistance is described by the\nequation  \\(R=R_0 e^{B(\\frac{1}{T}-\\frac{1}{T_0})}\\) , where  \\(R\\)  is the resistance\nat the measured temperature  \\(T\\)  and  \\(R_0\\)  is the resistance at the reference\ntemperature  \\(T_0\\) . Note that the temperatures must be absolute temperatures (in\nK).    In this experiment we will need to make resistance measurements in\n   situations where using the DMM probes or banana plug patch cords will not be\n   satisfactory.  Fortunately, there is a very convenient way to  do this. Get\n   a BNC clip lead cable from the equipment room and attach it to the\n   BNC-banana adapter from your tool kit, thereby creating a  banana plug clip\n   lead cable . Plug  the banana plug end of this assembly into the  V  and\n    COM  terminals of your DMM and set the selector switch to  \\(\\Omega\\) .    Connect the clip leads to the terminals of the thermistor.     Wait until the resistance reading on the DMM has stabilized, and record this\n   value  \\(R_0\\) . This is the ambient room temperature,  \\(T_0\\) .    Place the thermistor in contact with your body.  When the resistance\n   reading has stabilized, record the value  \\(R\\) .    Estimate the ambient temperature in the room. Using your measurements and B\n   value (see  thermistor\n   datasheet ),\n   what is your body temperature?", 
            "title": "Part A: Thermistor"
        }, 
        {
            "location": "/lab2/experiment_2-1/#part-b-cds-photocell", 
            "text": "Also known as a photoconductive cell or photoresistor, this device changes its\nresistance as a function of incident illumination. One useful characteristic of\ncadmium sulphide is that its spectral response closely matches that of the\nhuman eye. That means that a CdS photocell can be used in some photographic and\nphotometric applications without additional filtering.    Remove the thermistor from the clip leads and replace it with the CdS\n   photocell.     Note the change of resistance as the illumination of the photocell changes.\n    Record a few interesting values (e.g. ambient, illuminated by work bench\n   overhead light, covered with hand, etc.).    Based on the nominal characteristics of the photocell, what is the ambient\n   illumination level in the lab? What is the illumination level at a distance\n   of one foot from the work bench overhead light?    Measure the resistance of the photocell in darkness. How long does it take\n   for the measured value to stabilize?", 
            "title": "Part B: CdS Photocell"
        }, 
        {
            "location": "/lab2/experiment_2-1/#part-c-the-photodiode", 
            "text": "The thermistor and photocell are passive transducers: in order to convert the\nchanges in resistance into an electrical signal an external source of\nelectrical power is required. There is another class of sensors, called\nself-generating, which convert the applied input directly to an electrical\nsignal. One such transducer is the photodiode which converts incident optical\npower into electrical power.     Remove the CdS photocell from the clip leads and replace it with the\n   photodiode.     Set the DMM to DC Volts.     Observe the changes in voltage produced by the photodiode as the amount of\n   light reaching it is changed.  Record the voltages for the same light\n   conditions you did for the CdS photocell in Part B.    Examination of the data sheet for the photodiode shows that it is the\n    current  rather than the  voltage  which is proportional to the incident\n   illumination. Set the DMM to DC Current and connect the clip leads to the\n    COM  and  300 mA  terminals. (Since the spacing between these two terminals\n   is not the same as the spacing between the plugs on the banana plug adapter,\n   you will have to insert one plug into one of the terminals and use a banana\n   plug patch cord to connect the other.)    Observe the changes in the current produced by the photodiode as the amount\n   of light reaching it is changed.  Record the current values for the same\n   light conditions you did previously in Part B.    Based on the nominal characteristics of the photodiode, what is the\n   ambient illumination level in the lab? What is the illumination level at a\n   distance of one foot from the incandescant lamp? How do these values compare\n   with those measured with the CdS photocell?", 
            "title": "Part C: The Photodiode"
        }, 
        {
            "location": "/lab2/breadboard/", 
            "text": "Interlude\n\n\nThe Breadboard\n\n\nMost instruments have banana plugs or BNC connectors, so we can interconnect\nthem with patch cords. But as we begin to build our own circuits, we find that\nmany components have different kinds of connectors and most just have pieces of\nwire coming out of them.\n\n\nTo connect a single component (or maybe two) to an instrument we can use the\nBNC clip leads or alligator clips on the banana plug patch cords, But for\nanything more complex, we need a scheme designed for connecting things with\npieces of wire. The system we will use goes by a number of names: solderless\nbreadboard, AP strip (after the original manufacturer), or proto-board. We will\nsimply call them \"breadboards\".\n\n\nOur breadboards actually consist of two parts: the lower portion which is the\nbreadboard proper, and the upper part which contains the \ninterface modules\n.\n\n\nThese are discussed in detail in the \nBreadboard\nsection\n of the Lab Station Handbook.\n\n\nIn either case, we make connections between one component and another by\npushing the ends of pieces of wire (possibly attached to a component) into the\nholes in the breadboard. Although this is simple in concept, there is a bit of\nart required to do it properly. See the \nWiring section\n\nof the Lab Station Handbook for information on the art of wiring.\n\n\nThe Interface Modules\n\n\nThe purpose of the Interface Modules is to bring signals from other parts of\nthe Lab Station to the breadboard for convenient wiring. To do this we must\nconnect those components to the Interface Modules via the appropriate cables.\nHere is a drawing of the interface module with the names of the various\nconnectors.\n\n\n\n\n\n\n\n\nThere is a table of connector pin assignments in the \nInterface\nsection\n of the Lab Station Handbook.\n\n\nIn the next experiment we will use the interface module to access the\noscilloscope and the function generator. To connect the oscilloscope, use a BNC\npatch cord to connect \nCH\u00a01\n of the scope to J1-1 of the Interface module.\nSimilarly, connect \nCH\u00a02\n to J1-2.", 
            "title": "The Breadboard"
        }, 
        {
            "location": "/lab2/breadboard/#interlude", 
            "text": "", 
            "title": "Interlude"
        }, 
        {
            "location": "/lab2/breadboard/#the-breadboard", 
            "text": "Most instruments have banana plugs or BNC connectors, so we can interconnect\nthem with patch cords. But as we begin to build our own circuits, we find that\nmany components have different kinds of connectors and most just have pieces of\nwire coming out of them.  To connect a single component (or maybe two) to an instrument we can use the\nBNC clip leads or alligator clips on the banana plug patch cords, But for\nanything more complex, we need a scheme designed for connecting things with\npieces of wire. The system we will use goes by a number of names: solderless\nbreadboard, AP strip (after the original manufacturer), or proto-board. We will\nsimply call them \"breadboards\".  Our breadboards actually consist of two parts: the lower portion which is the\nbreadboard proper, and the upper part which contains the  interface modules .  These are discussed in detail in the  Breadboard\nsection  of the Lab Station Handbook.  In either case, we make connections between one component and another by\npushing the ends of pieces of wire (possibly attached to a component) into the\nholes in the breadboard. Although this is simple in concept, there is a bit of\nart required to do it properly. See the  Wiring section \nof the Lab Station Handbook for information on the art of wiring.", 
            "title": "The Breadboard"
        }, 
        {
            "location": "/lab2/breadboard/#the-interface-modules", 
            "text": "The purpose of the Interface Modules is to bring signals from other parts of\nthe Lab Station to the breadboard for convenient wiring. To do this we must\nconnect those components to the Interface Modules via the appropriate cables.\nHere is a drawing of the interface module with the names of the various\nconnectors.     There is a table of connector pin assignments in the  Interface\nsection  of the Lab Station Handbook.  In the next experiment we will use the interface module to access the\noscilloscope and the function generator. To connect the oscilloscope, use a BNC\npatch cord to connect  CH\u00a01  of the scope to J1-1 of the Interface module.\nSimilarly, connect  CH\u00a02  to J1-2.", 
            "title": "The Interface Modules"
        }, 
        {
            "location": "/lab2/experiment_2-2/", 
            "text": "Experiment 2.2\n\n\nElectroacoustic Transducers\n\n\nComponents\n\n\n\n\nLoudspeaker\n\n\nMicrophone\n\n\n\n\nPart A: Listening to a Signal\n\n\n\n\n\n\nSet up the function generator to produce a 1kHz sine wave with a peak to\n   peak (p-p) amplitude of 5 volts.\n\n\n\n\n\n\nUsing the \nBNC clip leads\n, connect the output\n   of the function generator to the speaker. \nWhat do you hear?\n\n\n\n\n\n\nWith the speaker still connected to the FGEN, measure the peak-to-peak\n   voltage across the speaker. This time, connect an oscilloscope probe to one\n   of the speaker leads. (The ground lead can remain disconnected because it is\n   already internally connected to the FGEN ground). \nWhat is the peak-to-peak\n   measurement now? Why did it change?\n\n\n\n\n\n\nUsing FGEN controls, vary the amplitude, frequency, and shape of the\n   signal(i.e. sine, triangle, or square). \nHow does the nature of the sound\n   change as these signal parameters change?\n\n\n\n\n\n\nDisconnect the speaker.\n\n\n\n\n\n\nSource Loading\n\n\nIf we consider the following circuit:\n\n\n\n\n\n\n\n\nwe can see what caused the reduction in signal amplitude (attenuation):\n\n\\(R_{out}\\)\n of the function generator and \n\\(R_L\\)\n of the speaker form a voltage\ndivider. An ideal voltage source would have \n\\(R_{out}=0\\)\n and there would be no\nproblem. However, any real source will have non-zero \n\\(R_{out}\\)\n. To reduce the\nattenuation caused by loading, we can either reduce \n\\(R_{out}\\)\n or increase\n\n\\(R_L\\)\n. But, since \n\\(R_{out}\\)\n and \n\\(R_L\\)\n] are actually parts of the source and\nload respectively, that means we would have to replace either the source or the\nload with a \"better\" one. If this is not feasible, we can isolate the source\nfrom the load by placing an \namplifier\n between them.\n\n\nPart B: Viewing an Acoustic Signal\n\n\nThe physical phenomenon behind the operation of the loudspeaker works in both\ndirections: in addition to converting an electrical signal into an acoustical\nsignal it can also convert sound to electricity. In techspeak we say that the\nloudspeaker is a \nbilateral\n transducer.\n\n\n\n\n\n\nUsing the BNC clip leads, connect the speaker to \nCH1\n of the oscilloscope.\n\n\n\n\n\n\nSet the \nVOLTS/DIV\n switch to \n20 mV\n and the \nTIME/DIV\n switch to \n2 mSEC\n.\n\n\n\n\n\n\nSpeak into the loudspeaker and observe the waveform on the oscilloscope. If\n   necessary, adjust the oscilloscope to produce a satisfactory trace. \nNote\n   the amplitude of the signal.\n\n\n\n\n\n\nPart C: Microphone\n\n\nSo far we have used an acoustic output device, the speaker, to convert\nelectrical signals to sound. Now we need an input device to convert acoustic\nsignals to electric ones.\n\n\n\n\n\n\nGet a microphone from the supply room. It has two connectors: we will use\n   the larger one.\n\n\n\n\n\n\n\n\n\n\n\n\nUse a BNC patch cord to connect \nCH1\n of the scope to J1-1 of the test board\n   (refer to the test board pin assignments).\n\n\n\n\n\n\nPlug the microphone into J1-4 of the test board.\n\n\n\n\n\n\nTake a piece of wire about 4\u00a0cm long and strip 6 to 7\u00a0mm of insulation from\n   each end. The end of the wire should look like this:\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nThe stripped length of a wire is very important. If it is too short\n(less than 6\u00a0mm), insulation will be forced between the contact fingers\nof the socket strip, resulting in an intermittent connection (or none\nat all). This is the second most common cause of problems in the lab.\nIf it is too long, the bare portion of the wire above the socket strip\ncan short to other wires.\n\n\n\n\n\n\n\n\nPlug one end of the wire to pin1 and the other end to pin 4. This will\n   connect the microphone to the scope (CH1). The grounds are automatically\n   connected by the test board.\n\n\n\n\n\n\n\n\n\n\n\n\nSet the oscilloscope \nV\u00a0MODE\n switch to \nCH1\n, the \nCH\u00a01 VOLTS/DIV\n switch\n   to \n5\u00a0mV\n, and the \nTIME/DIV\n switch to \n1\u00a0mSEC\n. - Set the other controls\n   as required.\n\n\n\n\n\n\nSpeak, sing, or whistle into the microphone and observe the signal on the\n   scope. If the amplitude is too small, you can use the \nmagnifier\n to get a\n   little more gain.\n\n\n\n\n\n\nProduce a sustained vowel (a, e, i, o, u) sound. Sketch one or two of the\n   more interesting waveshapes.\n\n\n\n\n\n\nContinue producing a sustained vowel sound (inhaling as necessary) and\n   measure its frequency (by measuring the period).\n\n\n\n\n\n\n(optional) If you are musically inclined, sing (or whistle or hum) the note\n    \"A\" and measure its frequency. How does your measured frequency compare\n    with the \"official\" value for the frequency of A? Which do you trust to be\n    more accurate, your sense of pitch or the oscilloscope?\n\n\n\n\n\n\nWhistle into the microphone. (For this step, pitch is not important, so any\n    note will do.) Observe the waveform on the oscilloscope. Is it sinusoidal?", 
            "title": "Electroacoustic Transducers II"
        }, 
        {
            "location": "/lab2/experiment_2-2/#experiment-22", 
            "text": "", 
            "title": "Experiment 2.2"
        }, 
        {
            "location": "/lab2/experiment_2-2/#electroacoustic-transducers", 
            "text": "", 
            "title": "Electroacoustic Transducers"
        }, 
        {
            "location": "/lab2/experiment_2-2/#components", 
            "text": "Loudspeaker  Microphone", 
            "title": "Components"
        }, 
        {
            "location": "/lab2/experiment_2-2/#part-a-listening-to-a-signal", 
            "text": "Set up the function generator to produce a 1kHz sine wave with a peak to\n   peak (p-p) amplitude of 5 volts.    Using the  BNC clip leads , connect the output\n   of the function generator to the speaker.  What do you hear?    With the speaker still connected to the FGEN, measure the peak-to-peak\n   voltage across the speaker. This time, connect an oscilloscope probe to one\n   of the speaker leads. (The ground lead can remain disconnected because it is\n   already internally connected to the FGEN ground).  What is the peak-to-peak\n   measurement now? Why did it change?    Using FGEN controls, vary the amplitude, frequency, and shape of the\n   signal(i.e. sine, triangle, or square).  How does the nature of the sound\n   change as these signal parameters change?    Disconnect the speaker.", 
            "title": "Part A: Listening to a Signal"
        }, 
        {
            "location": "/lab2/experiment_2-2/#source-loading", 
            "text": "If we consider the following circuit:     we can see what caused the reduction in signal amplitude (attenuation): \\(R_{out}\\)  of the function generator and  \\(R_L\\)  of the speaker form a voltage\ndivider. An ideal voltage source would have  \\(R_{out}=0\\)  and there would be no\nproblem. However, any real source will have non-zero  \\(R_{out}\\) . To reduce the\nattenuation caused by loading, we can either reduce  \\(R_{out}\\)  or increase \\(R_L\\) . But, since  \\(R_{out}\\)  and  \\(R_L\\) ] are actually parts of the source and\nload respectively, that means we would have to replace either the source or the\nload with a \"better\" one. If this is not feasible, we can isolate the source\nfrom the load by placing an  amplifier  between them.", 
            "title": "Source Loading"
        }, 
        {
            "location": "/lab2/experiment_2-2/#part-b-viewing-an-acoustic-signal", 
            "text": "The physical phenomenon behind the operation of the loudspeaker works in both\ndirections: in addition to converting an electrical signal into an acoustical\nsignal it can also convert sound to electricity. In techspeak we say that the\nloudspeaker is a  bilateral  transducer.    Using the BNC clip leads, connect the speaker to  CH1  of the oscilloscope.    Set the  VOLTS/DIV  switch to  20 mV  and the  TIME/DIV  switch to  2 mSEC .    Speak into the loudspeaker and observe the waveform on the oscilloscope. If\n   necessary, adjust the oscilloscope to produce a satisfactory trace.  Note\n   the amplitude of the signal.", 
            "title": "Part B: Viewing an Acoustic Signal"
        }, 
        {
            "location": "/lab2/experiment_2-2/#part-c-microphone", 
            "text": "So far we have used an acoustic output device, the speaker, to convert\nelectrical signals to sound. Now we need an input device to convert acoustic\nsignals to electric ones.    Get a microphone from the supply room. It has two connectors: we will use\n   the larger one.       Use a BNC patch cord to connect  CH1  of the scope to J1-1 of the test board\n   (refer to the test board pin assignments).    Plug the microphone into J1-4 of the test board.    Take a piece of wire about 4\u00a0cm long and strip 6 to 7\u00a0mm of insulation from\n   each end. The end of the wire should look like this:      Note  The stripped length of a wire is very important. If it is too short\n(less than 6\u00a0mm), insulation will be forced between the contact fingers\nof the socket strip, resulting in an intermittent connection (or none\nat all). This is the second most common cause of problems in the lab.\nIf it is too long, the bare portion of the wire above the socket strip\ncan short to other wires.     Plug one end of the wire to pin1 and the other end to pin 4. This will\n   connect the microphone to the scope (CH1). The grounds are automatically\n   connected by the test board.       Set the oscilloscope  V\u00a0MODE  switch to  CH1 , the  CH\u00a01 VOLTS/DIV  switch\n   to  5\u00a0mV , and the  TIME/DIV  switch to  1\u00a0mSEC . - Set the other controls\n   as required.    Speak, sing, or whistle into the microphone and observe the signal on the\n   scope. If the amplitude is too small, you can use the  magnifier  to get a\n   little more gain.    Produce a sustained vowel (a, e, i, o, u) sound. Sketch one or two of the\n   more interesting waveshapes.    Continue producing a sustained vowel sound (inhaling as necessary) and\n   measure its frequency (by measuring the period).    (optional) If you are musically inclined, sing (or whistle or hum) the note\n    \"A\" and measure its frequency. How does your measured frequency compare\n    with the \"official\" value for the frequency of A? Which do you trust to be\n    more accurate, your sense of pitch or the oscilloscope?    Whistle into the microphone. (For this step, pitch is not important, so any\n    note will do.) Observe the waveform on the oscilloscope. Is it sinusoidal?", 
            "title": "Part C: Microphone"
        }, 
        {
            "location": "/lab2/experiment_2-3/", 
            "text": "Experiment 2.3\n\n\nOptoelectrical Signal Sources and Sinks\n\n\nSince we will be building an optical communication system, we will need\nsome devices for converting electrical signals to and from light, as\nwell as to and from sound. We will look at two: the photodiode, which\nconverts light into an electrical signal, and the light emitting diode\n(LED) which converts electric current to light.\n\n\nEquipment\n\n\n\n\nPhotodiode\n\n\nRed LED\n\n\n\n\nPart A: The Photodiode\n\n\n\n\n\n\nConnect the short lead (cathode) of the\n   \nphotodiode\n to ground and the long lead\n   (anode) to CH1 of the scope. You can use the BNC clip leads for this, but\n   the better way (which leaves your hands free) is to the plug it into the\n   breadboard and wire it to the appropriate interface pins (pin 1 to anode,\n   pin 14 to cathode).\n\n\n\n\n\n\n\n\n\n\n\n\nView the DC signal on the scope. \nNote the voltage produced by photodiode.\n   How does it change when you cover the photodiode with your hand?\n\n\n\n\n\n\nSet \nCH1\n to AC. What are the amplitude and frequency of the signal?\n\n\n\n\nTip\n\n\nClick on the ruler by the bottom left corner of the oscilloscope view\nfor helpful measurement tools.\n\n\n\n\n\n\n\n\nExplain the waveform you observed in the previous step. Switch back to DC.\n\n\n\n\n\n\nPart B: Light Emitting Diode\n\n\n\n\n\n\nUsing a 220-ohm (red-red-brown) resistor and your \nred\n   LED\n, wire the following circuit:\n\n\n\n\n\n\n\n\n\n\n\n\nFirst wire the resistor and LED on the breadboard. There are two ways to\n   connect the power supply to the circuit (use one or the other not both):\n\n\n\n\nThe first way: Plug your \nBNC-banana\nadapter\n into the \n\\(6V\\)\n power supply\nterminals.  Note: There is a bump on one side of the adapter to denote\nwhich prong is connected to ground. Be sure to plug this prong into the\nblack terminal of the power supply.\n\n\n\n\n\n\n\n\n\n\nThen use the clip leads to connect to the LED and resistor.\n\n\n\n\n\n\n\n\n\n\nThe other way: Use the BNC adapter as above, but use a BNC patch cord\nto connect the power supply to \nJ1-3\n. Use two pieces of wire to connect\nground (pin 14) to the LED and \nJ1-3\n (pin 3) to the resistor.\n\n\n\n\n\n\n\n\nTurn on the power supply. Slowly increase the voltage until you see the LED\n   just begin to glow. Measure the voltage across the LED. If the LED doesn't\n   light by the time the meter on the power supply reads 3 V, check your\n   circuit to make sure the diode is wired in the correct orientation. Unlike a\n   resistor or light bulb, the LED is \npolarized.\n The anode must be positive\n   for it to glow. Reverse the LED and verify that this is the case.\n\n\n\n\n\n\nSet the supply voltage to \n\\(3, 4\\)\n, and \n\\(5\\)\n volts. At each step note the\n   brightness of the LED and the voltage across it.\n\n\n\n\n\n\nNext power the LED with the \nFGEN\n instead of the power supply. Set it to\n   produce a \n\\(100\\)\n Hz square wave with minimum amplitude.\n\n\n\n\n\n\nIncrease the amplitude until it begins to glow. Is the glow steady?\n\n\n\n\n\n\nSlowly reduce the frequency of the \nFGEN\n. \nAt what frequency does noticeable\n   flicker begin?\n\n\n\n\n\n\nHow does the number you measured in the previous step relate to the frame\n   rate of television and motion pictures?\n\n\n\n\n\n\nPart C: Optical Communication\n\n\n\n\n\n\nNow connect the photodiode to \nCH1\n of the scope using a BNC-to clip leads\n   cord.\n\n\n\n\n\n\n\n\n\n\n\n\nWith the LED still connected to the \nFGEN\n as in the previous part, set the\n   frequency to \n\\(100\\)\n Hz.\n\n\n\n\n\n\nHold the photodiode (pointing down) above the LED (pointing up).  Adjust\n   their relative positions to maximize the signal displayed on the scope.\n\n\n\n\nTip\n\n\nIt may help to shield the components from ambient light with your hand.\n\n\n\n\n\n\n\n\nDescribe the waveform. Is it what you would expect?\n\n\n\n\n\n\nSet the \nFGEN\n to produce a triangle wave. Take a screenshot of the waveform.\n   \nIs it what you expected?\n\n\n\n\n\n\nReset the \nFGEN\n to produce a square wave. \nWhat is the maximum distance\n   over which you can transmit a recognizable signal?\n\n\n\n\nTip\n\n\nSwitch to AC signal with higher gain.\n\n\n\n\n\n\n\n\nWe have several of the components needed for building an optical\n   communication system. \nWhat components are missing? What problems remain to\n   be solved?", 
            "title": "Optoelectronic Signal Sources and Sinks"
        }, 
        {
            "location": "/lab2/experiment_2-3/#experiment-23", 
            "text": "", 
            "title": "Experiment 2.3"
        }, 
        {
            "location": "/lab2/experiment_2-3/#optoelectrical-signal-sources-and-sinks", 
            "text": "Since we will be building an optical communication system, we will need\nsome devices for converting electrical signals to and from light, as\nwell as to and from sound. We will look at two: the photodiode, which\nconverts light into an electrical signal, and the light emitting diode\n(LED) which converts electric current to light.", 
            "title": "Optoelectrical Signal Sources and Sinks"
        }, 
        {
            "location": "/lab2/experiment_2-3/#equipment", 
            "text": "Photodiode  Red LED", 
            "title": "Equipment"
        }, 
        {
            "location": "/lab2/experiment_2-3/#part-a-the-photodiode", 
            "text": "Connect the short lead (cathode) of the\n    photodiode  to ground and the long lead\n   (anode) to CH1 of the scope. You can use the BNC clip leads for this, but\n   the better way (which leaves your hands free) is to the plug it into the\n   breadboard and wire it to the appropriate interface pins (pin 1 to anode,\n   pin 14 to cathode).       View the DC signal on the scope.  Note the voltage produced by photodiode.\n   How does it change when you cover the photodiode with your hand?    Set  CH1  to AC. What are the amplitude and frequency of the signal?   Tip  Click on the ruler by the bottom left corner of the oscilloscope view\nfor helpful measurement tools.     Explain the waveform you observed in the previous step. Switch back to DC.", 
            "title": "Part A: The Photodiode"
        }, 
        {
            "location": "/lab2/experiment_2-3/#part-b-light-emitting-diode", 
            "text": "Using a 220-ohm (red-red-brown) resistor and your  red\n   LED , wire the following circuit:       First wire the resistor and LED on the breadboard. There are two ways to\n   connect the power supply to the circuit (use one or the other not both):   The first way: Plug your  BNC-banana\nadapter  into the  \\(6V\\)  power supply\nterminals.  Note: There is a bump on one side of the adapter to denote\nwhich prong is connected to ground. Be sure to plug this prong into the\nblack terminal of the power supply.      Then use the clip leads to connect to the LED and resistor.      The other way: Use the BNC adapter as above, but use a BNC patch cord\nto connect the power supply to  J1-3 . Use two pieces of wire to connect\nground (pin 14) to the LED and  J1-3  (pin 3) to the resistor.     Turn on the power supply. Slowly increase the voltage until you see the LED\n   just begin to glow. Measure the voltage across the LED. If the LED doesn't\n   light by the time the meter on the power supply reads 3 V, check your\n   circuit to make sure the diode is wired in the correct orientation. Unlike a\n   resistor or light bulb, the LED is  polarized.  The anode must be positive\n   for it to glow. Reverse the LED and verify that this is the case.    Set the supply voltage to  \\(3, 4\\) , and  \\(5\\)  volts. At each step note the\n   brightness of the LED and the voltage across it.    Next power the LED with the  FGEN  instead of the power supply. Set it to\n   produce a  \\(100\\)  Hz square wave with minimum amplitude.    Increase the amplitude until it begins to glow. Is the glow steady?    Slowly reduce the frequency of the  FGEN .  At what frequency does noticeable\n   flicker begin?    How does the number you measured in the previous step relate to the frame\n   rate of television and motion pictures?", 
            "title": "Part B: Light Emitting Diode"
        }, 
        {
            "location": "/lab2/experiment_2-3/#part-c-optical-communication", 
            "text": "Now connect the photodiode to  CH1  of the scope using a BNC-to clip leads\n   cord.       With the LED still connected to the  FGEN  as in the previous part, set the\n   frequency to  \\(100\\)  Hz.    Hold the photodiode (pointing down) above the LED (pointing up).  Adjust\n   their relative positions to maximize the signal displayed on the scope.   Tip  It may help to shield the components from ambient light with your hand.     Describe the waveform. Is it what you would expect?    Set the  FGEN  to produce a triangle wave. Take a screenshot of the waveform.\n    Is it what you expected?    Reset the  FGEN  to produce a square wave.  What is the maximum distance\n   over which you can transmit a recognizable signal?   Tip  Switch to AC signal with higher gain.     We have several of the components needed for building an optical\n   communication system.  What components are missing? What problems remain to\n   be solved?", 
            "title": "Part C: Optical Communication"
        }, 
        {
            "location": "/lab3/", 
            "text": "Lab 3: Computer Aided Measurements I\n\n\n Introduction \n\n\n Background \n\n\nExperiments\n\n\n\n\nExperiment 3.1: \nVoltage and Waveform Measurements\n\n\nExperiment 3.2: \nWriting a Labview Program", 
            "title": "Home"
        }, 
        {
            "location": "/lab3/#lab-3-computer-aided-measurements-i", 
            "text": "", 
            "title": "Lab 3: Computer Aided Measurements I"
        }, 
        {
            "location": "/lab3/#introduction", 
            "text": "", 
            "title": "Introduction"
        }, 
        {
            "location": "/lab3/#background", 
            "text": "", 
            "title": "Background"
        }, 
        {
            "location": "/lab3/#experiments", 
            "text": "Experiment 3.1:  Voltage and Waveform Measurements  Experiment 3.2:  Writing a Labview Program", 
            "title": "Experiments"
        }, 
        {
            "location": "/lab3/introduction/", 
            "text": "Introduction\n\n\nThe instruments we have used so far (DMM, oscilloscope, function generator) are\nvery good at what they do (measure voltages and currents, produce and display\nwaveforms) but can seldom be made to do anything beyond what they were designed\nto do. This week we will begin to use the programmability of the Lab PC, along\nwith its data acquisition capability, to create flexible new instruments to\nperform tasks that our conventional ones cannot.", 
            "title": "Introduction"
        }, 
        {
            "location": "/lab3/introduction/#introduction", 
            "text": "The instruments we have used so far (DMM, oscilloscope, function generator) are\nvery good at what they do (measure voltages and currents, produce and display\nwaveforms) but can seldom be made to do anything beyond what they were designed\nto do. This week we will begin to use the programmability of the Lab PC, along\nwith its data acquisition capability, to create flexible new instruments to\nperform tasks that our conventional ones cannot.", 
            "title": "Introduction"
        }, 
        {
            "location": "/lab3/background/", 
            "text": "Background\n\n\nData Acquisition\n\n\nThe process of converting analog signals (e.g. voltages) to values in a\ncomputer program is one of the core components of modern instrumentation and\ncommunication systems. The other component is of course the computer itself,\nwhere the data is processed and displayed or otherwise acted on.  This process\ncan also work in the opposite direction. The computer can calculate a desired\nstimulus which can then be converted to an analog signal and applied (perhaps\nvia a transducer) to the system being analyzed.\n\n\nThe process of converting an analog signal to a digital value in a computer\nprogram variable is called Analog to Digital (A/D) Conversion.  Similarly\nconverting a digital variable to an analog value is called Digital to Analog\n(D/A) Conversion. A general term for reading and writing external analog values\nis \nData Acquisition\n.\n\n\nEach A/D conversion results in a single digital value. To represent a constant\nvoltage, one value is all we need, but to represent a continuous, time-varying\nvoltage signal would require an infinite number of values. If the signal is\nsufficiently smooth, we can approximate it with a finite set of \nsamples\n and\nuse interpolation to fill in the intermediate values. We usually acquire these\nsamples at regularly spaced time intervals.\n\n\nThe density of samples or \nsampling rate\n required to represent a signal\ndepends both on how smooth the signal is and on how accurate our representation\nmust be. As an example, consider digital audio signals.  CD's use a sampling\nrate of 44.2\u00a0kHz to provide high quality sound while cell phones make do with\nrates of around 8\u00a0kHz.\n\n\nThe DAQ Card and Labview\n\n\nThere are two sets of A/D and D/A converters in the Lab PC. One is the audio\ninterface (or sound card), the other is called a \nData Acquisition Card\n (or\nDAQ card for short). Specifications for the DAQ card can be found on the \n6251\nDAQ Card\n data sheet.\n\n\nWe also have a program called \nLabview\n which provides access to the A/D\nconversion hardware, as well as programmable signal processing and display\nhardware. We will use Labview for most of our laboratory automation and digital\nsignal processing examples. Labview allows us to take a signal, convert it to a\nsequence of samples perform mathematical operations on them, and display the\nresults on the PC screen. We can also generate samples of a function by\ncomputing their values and convert them to voltages to form an output signal.\n\n\nThis is just what our lab instruments do, only with continuous functions rather\nthan samples. If we can represent the information in our signal by a set of\nsamples, then we can use Labview and the DAQ card to make and display\nautomatically the same measurements we made manually using conventional\ninstruments. We can also have Labview perform the calculations necessary to\nconvert the raw measurements into the desired information, rather than having\nto do them by hand or in Matlab.\n\n\nThe DAQ Interface Module\n\n\nSince there are a total of 10 DAQ signals that we are interested in (8 A/D\nchannels and 2 D/A channels), the DAQ card has an entire interface module to\nitself. This module is located in rightmost interface slot on the breadboard\nand is labeled \"MOD03 - NI 6251 Interface Module.\"\n\n\nThe two Digital-to-Analog converter outputs are connected directly to pins on\nthe interface strip. However, there are a couple of reasons not to connect\ndirectly to the Analog-to-Digital inputs:\n\n\n\n\n\n\nThe maximum full-scale input voltage for the DAQ card is 10\u00a0V. Since the\n    power supply can produce voltages up to 20\u00a0V, we need a larger input range\n    on at least some of the inputs.\n\n\n\n\n\n\nThe input impedance of the DAQ card is extremely high. This means that\n    leakage currents can charge the input capacitance faster than they can be\n    drained off, resulting in saturation unless the input is terminated.\n\n\n\n\n\n\nTo address these problems there is a voltage divider between each pin on the\ninterface strip and the corresponding DAQ card input. For inputs 0-3 the\ndivider ratio is 10:1, and for inputs 4-7 it is 1:1 (i.e. no attenuation). For\nall inputs the sum of the resistor values is 1\u00a0M\u03a9.\n\n\nThe figure below is an abbreviated circuit diagram of the DAQ Interface Module.\n\n\n\n\n\n\n\n\nThe circuitry for channels ach1 through ach6 (indicated by the ellipsis) is the\nsame as channels ach0 and ach7. The signals ach0-7 are the A/D input terminals\non the interface connector socket strip and dac0 and dac1 are the D/A output\nterminals. 1/a0-7 are the A/D inputs to the DAQ card and 1/ao0 and 1/ao1 are\nthe D/A outputs.", 
            "title": "Background"
        }, 
        {
            "location": "/lab3/background/#background", 
            "text": "", 
            "title": "Background"
        }, 
        {
            "location": "/lab3/background/#data-acquisition", 
            "text": "The process of converting analog signals (e.g. voltages) to values in a\ncomputer program is one of the core components of modern instrumentation and\ncommunication systems. The other component is of course the computer itself,\nwhere the data is processed and displayed or otherwise acted on.  This process\ncan also work in the opposite direction. The computer can calculate a desired\nstimulus which can then be converted to an analog signal and applied (perhaps\nvia a transducer) to the system being analyzed.  The process of converting an analog signal to a digital value in a computer\nprogram variable is called Analog to Digital (A/D) Conversion.  Similarly\nconverting a digital variable to an analog value is called Digital to Analog\n(D/A) Conversion. A general term for reading and writing external analog values\nis  Data Acquisition .  Each A/D conversion results in a single digital value. To represent a constant\nvoltage, one value is all we need, but to represent a continuous, time-varying\nvoltage signal would require an infinite number of values. If the signal is\nsufficiently smooth, we can approximate it with a finite set of  samples  and\nuse interpolation to fill in the intermediate values. We usually acquire these\nsamples at regularly spaced time intervals.  The density of samples or  sampling rate  required to represent a signal\ndepends both on how smooth the signal is and on how accurate our representation\nmust be. As an example, consider digital audio signals.  CD's use a sampling\nrate of 44.2\u00a0kHz to provide high quality sound while cell phones make do with\nrates of around 8\u00a0kHz.", 
            "title": "Data Acquisition"
        }, 
        {
            "location": "/lab3/background/#the-daq-card-and-labview", 
            "text": "There are two sets of A/D and D/A converters in the Lab PC. One is the audio\ninterface (or sound card), the other is called a  Data Acquisition Card  (or\nDAQ card for short). Specifications for the DAQ card can be found on the  6251\nDAQ Card  data sheet.  We also have a program called  Labview  which provides access to the A/D\nconversion hardware, as well as programmable signal processing and display\nhardware. We will use Labview for most of our laboratory automation and digital\nsignal processing examples. Labview allows us to take a signal, convert it to a\nsequence of samples perform mathematical operations on them, and display the\nresults on the PC screen. We can also generate samples of a function by\ncomputing their values and convert them to voltages to form an output signal.  This is just what our lab instruments do, only with continuous functions rather\nthan samples. If we can represent the information in our signal by a set of\nsamples, then we can use Labview and the DAQ card to make and display\nautomatically the same measurements we made manually using conventional\ninstruments. We can also have Labview perform the calculations necessary to\nconvert the raw measurements into the desired information, rather than having\nto do them by hand or in Matlab.", 
            "title": "The DAQ Card and Labview"
        }, 
        {
            "location": "/lab3/background/#the-daq-interface-module", 
            "text": "Since there are a total of 10 DAQ signals that we are interested in (8 A/D\nchannels and 2 D/A channels), the DAQ card has an entire interface module to\nitself. This module is located in rightmost interface slot on the breadboard\nand is labeled \"MOD03 - NI 6251 Interface Module.\"  The two Digital-to-Analog converter outputs are connected directly to pins on\nthe interface strip. However, there are a couple of reasons not to connect\ndirectly to the Analog-to-Digital inputs:    The maximum full-scale input voltage for the DAQ card is 10\u00a0V. Since the\n    power supply can produce voltages up to 20\u00a0V, we need a larger input range\n    on at least some of the inputs.    The input impedance of the DAQ card is extremely high. This means that\n    leakage currents can charge the input capacitance faster than they can be\n    drained off, resulting in saturation unless the input is terminated.    To address these problems there is a voltage divider between each pin on the\ninterface strip and the corresponding DAQ card input. For inputs 0-3 the\ndivider ratio is 10:1, and for inputs 4-7 it is 1:1 (i.e. no attenuation). For\nall inputs the sum of the resistor values is 1\u00a0M\u03a9.  The figure below is an abbreviated circuit diagram of the DAQ Interface Module.     The circuitry for channels ach1 through ach6 (indicated by the ellipsis) is the\nsame as channels ach0 and ach7. The signals ach0-7 are the A/D input terminals\non the interface connector socket strip and dac0 and dac1 are the D/A output\nterminals. 1/a0-7 are the A/D inputs to the DAQ card and 1/ao0 and 1/ao1 are\nthe D/A outputs.", 
            "title": "The DAQ Interface Module"
        }, 
        {
            "location": "/lab3/experiment_3-1/", 
            "text": "Experiment 3.1\n\n\nVoltage and Waveform Measurements\n\n\nEquipment\n\n\n\n\nMicrophone\n\n\n\n\nPart A: Basic A/D Conversion\n\n\n\n\n\n\nConnect the \ncable\n from the DAQ card to J3-1 on\n   the rightmost interface module.\n\n\n\n\n\n\nPlug your \nBNC-banana adapter\n into the 6V\n   supply terminals. There is a bump on one side of the adapter to denote which\n   prong is connected to ground. Be sure to plug this prong into the black\n   terminal of the power supply.\n\n\n\n\n\n\nUsing a BNC patch cable terminated with a BNC-to-banana adapter, connect the\n   6\u00a0V supply output to J1-3.\n\n\n\n\n\n\nConnect J1-3 (pin 3) to A/D channel 4 (pin 46). (The pin numbers correspond\n   to the upper rows of the breadboard where the interface connections are).\n   The circuit you have just created looks like this:\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nWith the function generator and oscilloscope, the ground connection to\nthe DAQ card is made automatically. We will not show the DAQ card\nground in subsequent drawings. \n\n\n\n\n\n\n\n\nDownload\n    \nBasic_ADC.vi\n\n    and open in Labview. It should look like this:\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nLabview programs are called \nVirtual Instruments\n (or \nVIs\n for short).\n\n\n\n\n\n\n\n\nStart the instrument by selecting \nRun\n from the \nOperate\n menu, or by\n   pressing the run button (the small arrow just below the menu bar), or by\n   pressing CTRL-R on the keyboard with the cursor over the panel.\n\n\n\n\n\n\nVary the power supply voltage and verify that the displayed value changes.\n   Measure the voltage with your DMM and see how the values compare.\n\n\n\n\n\n\nMove the BNC patch cable from the 6\u00a0V supply to the FGEN output. With a\n   second BNC patch cable, connect \nCH 1\n of the oscilloscope to J1-1.  Connect\n   the function generator output (pin 3) to the oscilloscope input (pin 1).\n\n\nVerify that you have the following circuit:\n\n\n\n\n\n\n\n\n\n\n\n\nAdjust the function generator to produce a \n\\(5\u00a0V_{pp}\\)\n, 0.5\u00a0Hz sine wave.\n   Observe the signal on the Basic ADC display and compare with the\n   oscilloscope output. Make sure clock rate and sample rate are set to 10.\n   \nTake a Labview screenshot for your lab report.\n\n\n\n\n\n\nIncrease the frequency to 1\u00a0Hz. Note that due to the reduced number of\n    samples per cycle, the sinusoidal shape of the waveform is less smoothly\n    defined. \nTake a Labview screenshot for your lab report.\n\n\n\n\n\n\nIncrease the freqency to 10.00\u00a0Hz. Observe the resulting display.\n\n\n\n\n\n\nExplain why a 10\u00a0Hz sine wave, when sampled 10 times per second, appears as\n    a constant (DC) value on the A/D display. \nTake a Labview screenshot for\n    your lab report. What does an 11\u00a0Hz sine wave look like under the same\n    conditions?\n\n\n\n\n\n\nIncrease the sample and clock rate to 100. Observe the resulting display.\n    \nTake a Labview screenshot for your lab report. Comment on how the Labview\n    waveform changes with increasing sampling and clock rate.\n\n\n\n\n\n\nStop the Basic ADC program by pressing the red \nSTOP\n button.", 
            "title": "Voltage and Waveform Measurements"
        }, 
        {
            "location": "/lab3/experiment_3-1/#experiment-31", 
            "text": "", 
            "title": "Experiment 3.1"
        }, 
        {
            "location": "/lab3/experiment_3-1/#voltage-and-waveform-measurements", 
            "text": "", 
            "title": "Voltage and Waveform Measurements"
        }, 
        {
            "location": "/lab3/experiment_3-1/#equipment", 
            "text": "Microphone", 
            "title": "Equipment"
        }, 
        {
            "location": "/lab3/experiment_3-1/#part-a-basic-ad-conversion", 
            "text": "Connect the  cable  from the DAQ card to J3-1 on\n   the rightmost interface module.    Plug your  BNC-banana adapter  into the 6V\n   supply terminals. There is a bump on one side of the adapter to denote which\n   prong is connected to ground. Be sure to plug this prong into the black\n   terminal of the power supply.    Using a BNC patch cable terminated with a BNC-to-banana adapter, connect the\n   6\u00a0V supply output to J1-3.    Connect J1-3 (pin 3) to A/D channel 4 (pin 46). (The pin numbers correspond\n   to the upper rows of the breadboard where the interface connections are).\n   The circuit you have just created looks like this:      Note  With the function generator and oscilloscope, the ground connection to\nthe DAQ card is made automatically. We will not show the DAQ card\nground in subsequent drawings.      Download\n     Basic_ADC.vi \n    and open in Labview. It should look like this:      Note  Labview programs are called  Virtual Instruments  (or  VIs  for short).     Start the instrument by selecting  Run  from the  Operate  menu, or by\n   pressing the run button (the small arrow just below the menu bar), or by\n   pressing CTRL-R on the keyboard with the cursor over the panel.    Vary the power supply voltage and verify that the displayed value changes.\n   Measure the voltage with your DMM and see how the values compare.    Move the BNC patch cable from the 6\u00a0V supply to the FGEN output. With a\n   second BNC patch cable, connect  CH 1  of the oscilloscope to J1-1.  Connect\n   the function generator output (pin 3) to the oscilloscope input (pin 1).  Verify that you have the following circuit:       Adjust the function generator to produce a  \\(5\u00a0V_{pp}\\) , 0.5\u00a0Hz sine wave.\n   Observe the signal on the Basic ADC display and compare with the\n   oscilloscope output. Make sure clock rate and sample rate are set to 10.\n    Take a Labview screenshot for your lab report.    Increase the frequency to 1\u00a0Hz. Note that due to the reduced number of\n    samples per cycle, the sinusoidal shape of the waveform is less smoothly\n    defined.  Take a Labview screenshot for your lab report.    Increase the freqency to 10.00\u00a0Hz. Observe the resulting display.    Explain why a 10\u00a0Hz sine wave, when sampled 10 times per second, appears as\n    a constant (DC) value on the A/D display.  Take a Labview screenshot for\n    your lab report. What does an 11\u00a0Hz sine wave look like under the same\n    conditions?    Increase the sample and clock rate to 100. Observe the resulting display.\n     Take a Labview screenshot for your lab report. Comment on how the Labview\n    waveform changes with increasing sampling and clock rate.    Stop the Basic ADC program by pressing the red  STOP  button.", 
            "title": "Part A: Basic A/D Conversion"
        }, 
        {
            "location": "/lab3/experiment_3-2/", 
            "text": "Experiment 3.2\n\n\nWriting a Labview Program\n\n\nIf all we could with Labview was to make computer based copies of our\nconventional instruments, it would be of limited use. What makes Labview so\nvaluable is that it is \nprogrammable\n. By changing the program a single box\n(the Lab PC) can perform the functions of a large collection of instruments,\nboth conventional and unconventional.\n\n\nPerhaps the greatest advantage of Labview however, is that it is \nuser\n\nprogrammable: if no instrument is available which meets your requirements, you\ncan modify an existing one or create an entirely new one.\n\n\nOur goal for this Experiment will be to measure the resistance of the\nthermistor and display the result directly as a temperature reading.  Since the\nDAQ card can only measure voltage, our first step is to convert the resistance\nto a measurable voltage. As an example of how this could be done, consider the\ncircuit below:\n\n\n\n\n\n\n\n\nBy measuring the voltage drop (\n\\(V_{res}\\)\n) across the \n\\(10\\Omega\\)\n resistor we can\ncompute the current \n\\(I\\)\n. Since the same current flows in both the resistor and\nthe bulb, we can compute the resistance of the bulb as \n\\(R_{bulb}=V_{bulb}/I\\)\n.\nIf \n\\(V_{bat}\\)\n is known, we can determine \n\\(V_{res}\\)\n indirectly using KVL:\n\n\\(V_{res} = V_{bat} - V_{bulb}\\)\n.\n\n\nFor our application, we need to replace the light bulb with the thermistor.\nSince the thermistor has a much higher resistance, we should also replace the\n\n\\(10\\Omega\\)\n resistor with one closer to the nominal resistance of the\nthermistor, in this case \n\\(10k\\Omega\\)\n. In addition, since our goal is to measure\ntemperature we will need to convert the measured resistance into a displayed\ntemperature reading.\n\n\nPart A: A Very Simple VI\n\n\nTo get started with Laview programming, we will start with the\nmeasurement of a single voltage.\n\n\n\n\n\n\nUse a BNC-Banana adapter and a BNC patch cable to connect the 0-6\u00a0V power\n   supply to J1.\n\n\n\n\n\n\nWire the following circuit\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\\(R_T\\)\n is the thermistor.  Because the thermistor leads are very thin,\nyou will probably need to use your needle nose pliers to hold them very\nnear the ends in order to insert them into the breadboard without\nbending.\n\n\n\n\n\n\n\n\nUsing your DMM, set the \n\\(0-6\u00a0V\\)\n supply output (\n\\(V_S\\)\n) to \n\\(5.00\u00a0V\\)\n. Measure\n   \n\\(V_T\\)\n with your DMM. Since the nominal value of \n\\(R_T\\)\n is \n\\(10\u00a0k\\Omega\\)\n, it\n   should be approximately \n\\(2.5\u00a0V\\)\n. If not, adjust \n\\(R_S\\)\n so that the voltage is\n   around \n\\(2.5\u00a0V\\)\n.\n\n\n\n\n\n\nSince we are going to build a VI from scratch, we will start with a new,\n   blank VI. Select \"New VI\" from the \"File\" menu. A pair of windows should\n   appear. The one on top will be a blank Front Panel window and the one on the\n   bottom is a blank Block Diagram window.\n\n\n\n\n\n\nWe will first measure \n\\(V_T\\)\n and display its value.\n\n\n\n\n\n\nRight click on the Front Panel window. You will get the Controls popup:\n\n\n\n\n\n\n\n\n\n\nTip\n\n\nPlace the cursor over the Numeric button and select Numeric Indicator.\nPlace this box and left click. The fact that the word \"Numeric\" is\nhighlighted means that it is selected and can be edited. Change the\nname to \"VT\" by double-clicking.\n\n\n\n\n\n\n\n\nNow we need something for the indicator to display. Click on the Block\n   Diagram window to bring it to the top. Note that placing the indicator on\n   the front panel has also placed a block on the block diagram.\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nThis block is the \nicon\n associated with the indicator. We can provide\nvalues for it to display by connecting it to a signal source. The\nsource we will use will be one of the A/D converter inputs.\n\n\n\n\n\n\n\n\nRight-click on the Block Diagram window to bring up the Functions palette.\n\n\n\n\n\n\n\n\n\n\n\n\nFrom the Functions popup, select Express \n\\(\\rightarrow\\)\n Input \n\\(\\rightarrow\\)\n\n   DAQ Assist.\n\n\n\n\n\n\n\n\n\n\n\n\nPosition this somewhere to the left of the Graph indicator block and left\n    click.\n\n\n\n\n\n\nAfter a second or two the \"Create New ..\" wizard will appear.\n\n\n\n\n\n\n\n\n\n\n\n\nClick on \"Acquire Signals\" in the righthand column, then click on \"Analog\n    Input\" then on \"Voltage\" in the list that appears.\n\n\n\n\n\n\n\n\n\n\n\n\nFrom the list of Supported Physical Channels that appears, select \"ai5\",\n    then click the \"Finish\" button at the bottom of the frame.\n\n\n\n\n\n\n\n\n\n\n\n\nAfter another brief wait, the \"DAQ Assistant\" dialog appears. In the \"Input\n    Range\" block set \"Max\" to 10\u00a0Volts and \"Min\" to -10\u00a0Volts. Set the\n    \"Acquisition Mode\" to \"1 Sample (On Demand)\". The panel should look like\n    this when you are done.  Click the \"OK\" button when you're done.\n\n\n\n\n\n\n\n\n\n\n\n\nThings will click and whir for several seconds. When it's all over, the\n    \"DAQ Assistant\" box will have expanded, and should have a white band with\n    the word \"data\" in it.\n\n\n\n\n\n\n\n\n\n\n\n\nWe're almost done. All that remains is to connect the source (A/D converter\n    block) to the destination (numeric indicator block).\n\n\n\n\n\n\nPlace the cursor over the small black triangle in the \"data\" field of the\n    DAQ Assistant block. It should change into an icon representing a small\n    spool of wire. Left click once and move the cursor to the small white\n    triangle in the center of the left edge of the numeric indicator icon and\n    left click once more. That completes our first Labview program.  It should\n    look something like this:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nData Types\n\n\nNotice that the color of the icon for the waveform graph changed from orange to\nblue. This is an indication that the type of data which it is displaying has\nchanged. Like many programming languages (e.g. C) Labview maintains the notion\nof \ndata types\n. Labview's data types include familiar ones such as integer,\nfloating point, boolean, and string, as well as a number of unfamiliar ones\n(which we will try to avoid for the time being). Labview denotes data type by\nthe color of the wire which carries it: integer wires are blue, floating point\nwires are orange, boolean wires are green, and strings are pink. Labview also\nsupports collection types, such as arrays and structures. Scalars are denoted\nby thin solid lines, arrays by thick solid lines, and other collections by\nvarious patterned lines. The wide dark blue lines with internal dashes are a\ncomposite data type called \ndynamic data\n.\n\n\nDynamic data contains a lot of information in addition to the value of the\nsample, for example, the time at which the sample was taken, whether any errors\nwere made in previous handling of the sample, etc. This means that when we\nconnect our signal to the waveform display, it can automatically display the\ncorrect time scale on the x-axis, rather than just the sample number.\n\n\n\n\n\n\nClick on the Front Panel window to bring it to the top. Run the VI by\n   clicking on the Run arrow or by typing Ctrl-R. The \nVT\n nemeric indicator\n   should display the voltage across \n\\(R_T\\)\n, which should still be about \n\\(2.5\u00a0V\\)\n\n\n\n\n\n\nSelect \nSave As...\n from the \nFile\n menu. Set the \nSave in:\n field to an\n   appropriate directory (i.e., your user directory).\n\n\n\n\nNote\n\n\nAlways set the destination directory when saving a VI. Never try to\nsave a VI in the default directory.\n\n\n\n\n\n\n\n\nPart B: Converting Voltage to Resistance\n\n\nSo far we're no better off than we would have been using the DMM. In fact we're\nworse off since all we have is a voltage. The DMM at least can read resistance\ndirectly. But given \n\\(V_S\\)\n, \n\\(V_T\\)\n, and Ohm's Law we can calculate resistance,\nand computers are very good at calculating things.\n\n\nThere are two ways we could formulate this calculation. We could do it in two\nsteps, first computing \n\\(I_T=I_S=(V_S-V_T)/R_S\\)\n, then using Ohm's Law to get\n\n\\(R_T=V_T/I_T\\)\n. Alternately, we could treat the circuit as a voltage divider,\nwhich gives\n\n\n\\[\nR_T=\\frac{V_T}{V_S-V_T}R_S\n\\]\nBecause we will be interested in \n\\(I_T\\)\n in a subsequent Experiment, we will use\nthe first approach.\n\n\n\n\n\n\nOn the front panel, create a new numeric indicator and label it \nIT\n.\n\n\n\n\n\n\nIn order to compute the current we will have to do some arithmetic on the\n   \n\\(V_T\\)\n signal. Go to the block diagram window and right-click to get the\n   \nFunctions\n palette.  Select Programming \n\\(\\rightarrow\\)\n Numeric:\n\n\n\n\n\n\n\n\n\n\n\n\nThis has everything we need: subtraction, division, and constants (for \n\\(V_S\\)\n\n   and \n\\(R_S\\)\n ).\n\n\n\n\n\n\nLet's start with the subtraction. Move the cursor over the symbol labeled\n   \nSubtract\n and left click. Position the icon below the existing components\n   on the diagram and left click to put it down. Note that while the cursor is\n   over the symbol there are three small circles near the vertices of the\n   triangle.\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nThese indicate the connection points and will disappear when the cursor\nmoves away.\n\n\n\n\n\n\n\n\nRepeat the above process, but select the \nDivide\n symbol. Place it slightly\n   to the right and a little lower than the subtract icon.\n\n\n\n\n\n\nNow let's do the constants, starting with \n\\(V_S\\)\n. Select Numeric Constant\n   from the Numeric palette and place the resulting block above and to the left\n   of the subtract icon. The highlighted text indicates that you can enter a\n   new value. Type \n5\n and press \nEnter\n or click the check box at the upper\n   left of the window. Repeat this process, placing the icon for \n\\(R_S\\)\n below\n   and to the right of the divide icon. Enter a value of 10000. Here's what you\n   should have at this point:\n\n\n\n\n\n\n\n\n\n\n\n\nAll that remains is to make the connections. Wire the blocks together\n   appropriately. A couple of things to note:\n\n\n\n\nNote\n\n\n\n\nThe position of the terminals on the arithmetic blocks corresponds to\nthe conventions of grade school arithmetic. For subtract the minuend is\non top and the subtrahend is on the bottom.For divide the dividend is\non top and the divisor on the bottom.\n\n\nTo connect to an existing wire (in this case the one between the A/D\nconverter block and the \nVT\n display block), move the cursor \nnear\n,\nbut not directly on, the wire. If you place the cursor on the wire it\nwill turn into an arrow, indicating that you can select the wire.\n\n\n\n\n\n\n\n\n\n\nWhen you're done it should look something like this:\n\n\n\n\n\n\n\n\n\n\n\n\nLet's test what we have so far. Go to the front panel and click on the \nRun\n\n   button. If all is well, \n\\(V_T\\)\n should still be about 2.5\u00a0V and \n\\(I_T\\)\n should\n   be about 0.00025\u00a0A.\n\n\n\n\n\n\nNow that we have found the current in the thermistor, finding the\n    resistance is easy: just divide \n\\(V_T\\)\n (which we measured directly) by \n\\(I_T\\)\n\n    (which we just computed).  To do this we need to add another numeric\n    indicator to the front panel and a divide block to the block diagram. Let's\n    put the indicator to the right of the two existing ones (and label it \nRT\n.\n\n\n\n\n\n\n\n\n\n\n\n\nOn the block diagram, place another divide block to the left of the \nRT\n\n    indicator block. Wire it up so that \n\\(R_T=V_T/I_T\\)\n and here's what we have:\n\n\n\n\n\n\n\n\n\n\n\n\nTest the VI by clicking \nRun\n from the front panel. The \nRT\n indicator\n    should display a value close to 10000.\n\n\n\n\n\n\nPart C: Converting R to T\n\n\nGiven this value of the resistance and the information on the \nthermistor data\nsheet\n,\nwe can calculate the temperature.\n\n\n\n\n\n\nBased on the information in the thermistor data sheet, derive a formula\n   which gives the temperature (your choice of \n\\(K, ^\\circ C,\\)\n or \n\\(^\\circ F\\)\n) in terms of the\n   resistance of the thermistor.\n\n\n\n\n\n\nWe could perform this computation the same way we did for resistance, by\n   using a numeric operation block for each addition, division, etc. in the\n   formula, but for a formula like this there is a more efficient and compact\n   approach, the \nformula node\n.\n\n\n\n\n\n\nIn the Block Diagram window, right click to bring up the \nFunctions\n\n   palette. Move the cursor to Programming \n\\(\\rightarrow\\)\n Structures. Click on\n   the \nFormula Node\n button.\n\n\n\n\n\n\nThe formula node is a variable sized block, so it is instantiated by\n   clicking on the desired location of the upper right corner and dragging to\n   create the desired size. Move the cursor to a convenient spot on the block\n   diagram, preferably near the \nRT\n indicator icon, then click, drag, and\n   release to create the formula node. It should look like this:\n\n\n\n\n\n\n\n\n\n\nTip\n\n\nIf you want to find out more about the components in the\nblock diagram, you can turn on the \nContext Help\n feature: select\n\nShow Context Help\n from the \nHelp\n menu. When context help is turned\non, a window (labeled \nContext Help\n) appears in the upper right corner\nof the screen. When the cursor is moved over any component in the block\ndiagram, a brief description and a link to additional information\nappears.\n\n\n\n\n\n\n\n\nLet's start with the formula. As an example, we'll use\n   \n\\(T=300\\frac{10000}{RT}\\)\n. (If you got this formula, you should check your\n   derivation, as it is not correct.) Since we can't type subscripts in\n   labview, we will use \n\\(RT\\)\n in place of \n\\(R_T\\)\n. To enter this into the formula\n   node, simply place the cursor inside the block, right click, and start\n   typing. The formula node uses the C language syntax, and each statement must\n   end with a semicolon; When you have finished, click on the check box (or\n   anywhere outside the formula node box).\n\n\n\n\n\n\nAt this point you may have noticed a change in the appearance of the\n   toolbar: the run button has changed from a white arrow to a gray broken\n   arrow ( \n ). This means that there is an error\n   in the block diagram and the VI won't run. To find out what the error is,\n   click on the broken arrow button.\n\n\nIf you do this you should find that the problem is an undefined variable.\nActually, there are two: \n\\(T\\)\n and \n\\(RT\\)\n . We will define these in the next step\nwhen we create the input and output terminals.  \n\n\n\n\n\n\nPlace the cursor somewhere on the left-hand border of the formula node and\n   right-click. Select \nAdd Input\n from the popup menu. This should create a\n   small rectangular box in the border. The highlighted (black) interior of the\n   box is a selected text field. Type \nRT\n and click the check box. Repeat this\n   process on the right-hand border, but select \nAdd Output\n and type \nT\n into\n   the box.\n\n\n\n\n\n\nThe arrow is still broken, but now the error message complains of an\n   \"unwired input.\" Let's try to fix that: connect the input (RT) to the wire\n   between the division block and the numeric indicator which displays the\n   value of \n\\(R_T\\)\n.\n\n\nUnfortunately, this seems to have made things worse. Not only is the arrow\nstill broken, but we also have a broken wire. (Broken wires are indicated\nby dashed lines with a red X in the middle.) The error list tells us: \"You\nhave connected two terminals of different types.\"\n\n\nDynamic data contains a lot of information in addition to the value of the\nsample, for example, the time at which the sample was taken, whether any\nerrors were made in previous handling of the sample, etc. Dynamic data\nusually makes life easer for us by bundling ancillary information along\nwith a signal so we don't have to be concerend about carrying it around\nseparately, but at the moment it's causing problems. While most blocks\n(e.g. subtract, divide, numeric indicator) can accept any appropriate data\ntype, including dynamic, others are more picky about what they will take.\nFor example, the formula node expects ordinary, pure numeric data and\ndoesn't know what to do with the additional stuff contained in dynamic\ndata. We can fix this by converting the dynamic data to scalar data.\n\n\n\n\n\n\nRemove the offending broken wire. To do this, place the cursor directly over\n   the wire, so that it turns into an arrow, and double click. Press the\n   \nDelete\n key.\n\n\n\n\n\n\nRight click to bring up the \nFunctions\n palette. Select Express\n    \n\\(\\rightarrow\\)\n Sig Manip button to bring up the Signal Manipulation palette.\n\n\n\n\n\n\n\n\n\n\n\n\nFrom this select the \nFrom DDT\n block. Place this just to the left of the\n    \nRT\n terminal of the formula node.\n\n\n\n\n\n\nWhen you place the \nFrom DDT\n block, a dialog box labeled \"Configure\n    Convert from Dynamic Data\" will appear. In the \nResulting data type\n field,\n    select \nSingle Scalar\n, then click \nOK\n.\n\n\n\n\n\n\nWire the output of the \nFrom DDT\n block to the \nRT\n terminal of the formula\n    node. Connect the input of the \nFrom DDT\n block to the wire between the\n    division block and the \nRT\n numeric indicator. The arrow should now be\n    unbroken.\n\n\n\n\n\n\nNow display the value of temperature by placing another numeric indicator\n    on the front panel and labeling it \nT\n. Return to the block diagram, and\n    wire the new indicator icon to the \nT\n terminal of the formula node. Here's\n    what you should have:\n\n\n\n\n\n\n\n\n\n\n\n\nReturn to the front panel and press the run button. The \nT\n indicator will\n    display the current temperature.\n\n\n\n\n\n\nPart D: Continuous Display\n\n\nAlthough we have technically achieved our goal of measuring and displaying\ntemperature, we can only do so on demand. It would be much more useful if we\nhad a system which could continuously display the current temperature.\nFortunately, this is a simple enhancement to make.  Like more conventional\nprogramming languages, Labview has looping and branching constructs. What we\nneed here is the \nwhile loop\n which repeats its contents until an exit\ncondition is met.\n\n\n\n\n\n\nRight click in the block diagram to bring up the \nFunctions\n palette.\n   Select Structures. Click on the \nWhile Loop\n button.\n\n\n\n\n\n\n\n\n\n\n\n\nThis is a variable sized block, like the formula node, and we want it to\n   enclose everything we currently have in our VI. Click on the panel, and\n   enclose your entire block diagram with the while loop.\n\n\n\n\nNote\n\n\nNote the green-bordered block labeled \nstop\n in the lower right corner\nof the while loop. This is a free accessory that allows us to stop the\nloop, which would otherwise run forever. This block is an example of a\n\ncontrol\n. A control is the dual of an indicator, i.e. it provides\ninput from the front panel to the block diagram. Go to the front panel\nand notice that there is a new object, a button labeled \nSTOP\n.\nPressing this button causes the associated icon to output a True value\n(when the button is not pressed, the output is False).\n\n\n\n\n\n\n\n\nFrom the front panel, press the \nRun\n button. The indicators should now\n   display continuously updated values. To convince yourself that these aren't\n   random, grab the body of the thermistor between your thumb and forefinger,\n   being careful not to touch the leads. The displayed temperature should\n   increase. Press the \nSTOP\n button when done.\n\n\n\n\n\n\nThe updating of the display, while certainly continuous, might be too fast\n   to read. This is because new samples are being taken and displayed as fast\n   as the A/D converter is able to take them (1,250,000 samples/second), which\n   is much faster than any phenomenon we might bring into the lab is capable of\n   changing its temperature. The net result is wasted processor power and a\n   blurry display which is difficult to read.\n\n\nThere are a number of ways in which we can set the sampling rate to a more\nreasonable value. We will utilize one which requires minimal change to what\nwe have already constructed.\n\n\n\n\n\n\nReturn to the block diagram and go to Functions \n\\(\\rightarrow\\)\n Programming\n   \n\\(\\rightarrow\\)\n Timing.  Select the \nTime Delay\n block\n\n\n\n\n\n\n\n\nand place it in a convenient location inside the while loop. Accept the\ndefault delay of 1\u00a0second by clicking \nOK\n in the \nConfigure Time Delay\n\ndialog box. (If the block automatically wires itself to something, remove\nthe resulting wire.)\n\n\n\n\n\n\nReturn to the front panel and click \nRun\n. The display should now update at\n   a more leisurely rate.\n\n\n\n\n\n\nBe sure to include a screenshot of your block diagram in your lab writeup.\n\n\n\n\n\n\nSave your work as we will make further enhancements to this program next\n   week.", 
            "title": "Writing a Labview Program"
        }, 
        {
            "location": "/lab3/experiment_3-2/#experiment-32", 
            "text": "", 
            "title": "Experiment 3.2"
        }, 
        {
            "location": "/lab3/experiment_3-2/#writing-a-labview-program", 
            "text": "If all we could with Labview was to make computer based copies of our\nconventional instruments, it would be of limited use. What makes Labview so\nvaluable is that it is  programmable . By changing the program a single box\n(the Lab PC) can perform the functions of a large collection of instruments,\nboth conventional and unconventional.  Perhaps the greatest advantage of Labview however, is that it is  user \nprogrammable: if no instrument is available which meets your requirements, you\ncan modify an existing one or create an entirely new one.  Our goal for this Experiment will be to measure the resistance of the\nthermistor and display the result directly as a temperature reading.  Since the\nDAQ card can only measure voltage, our first step is to convert the resistance\nto a measurable voltage. As an example of how this could be done, consider the\ncircuit below:     By measuring the voltage drop ( \\(V_{res}\\) ) across the  \\(10\\Omega\\)  resistor we can\ncompute the current  \\(I\\) . Since the same current flows in both the resistor and\nthe bulb, we can compute the resistance of the bulb as  \\(R_{bulb}=V_{bulb}/I\\) .\nIf  \\(V_{bat}\\)  is known, we can determine  \\(V_{res}\\)  indirectly using KVL: \\(V_{res} = V_{bat} - V_{bulb}\\) .  For our application, we need to replace the light bulb with the thermistor.\nSince the thermistor has a much higher resistance, we should also replace the \\(10\\Omega\\)  resistor with one closer to the nominal resistance of the\nthermistor, in this case  \\(10k\\Omega\\) . In addition, since our goal is to measure\ntemperature we will need to convert the measured resistance into a displayed\ntemperature reading.", 
            "title": "Writing a Labview Program"
        }, 
        {
            "location": "/lab3/experiment_3-2/#part-a-a-very-simple-vi", 
            "text": "To get started with Laview programming, we will start with the\nmeasurement of a single voltage.    Use a BNC-Banana adapter and a BNC patch cable to connect the 0-6\u00a0V power\n   supply to J1.    Wire the following circuit      Note  \\(R_T\\)  is the thermistor.  Because the thermistor leads are very thin,\nyou will probably need to use your needle nose pliers to hold them very\nnear the ends in order to insert them into the breadboard without\nbending.     Using your DMM, set the  \\(0-6\u00a0V\\)  supply output ( \\(V_S\\) ) to  \\(5.00\u00a0V\\) . Measure\n    \\(V_T\\)  with your DMM. Since the nominal value of  \\(R_T\\)  is  \\(10\u00a0k\\Omega\\) , it\n   should be approximately  \\(2.5\u00a0V\\) . If not, adjust  \\(R_S\\)  so that the voltage is\n   around  \\(2.5\u00a0V\\) .    Since we are going to build a VI from scratch, we will start with a new,\n   blank VI. Select \"New VI\" from the \"File\" menu. A pair of windows should\n   appear. The one on top will be a blank Front Panel window and the one on the\n   bottom is a blank Block Diagram window.    We will first measure  \\(V_T\\)  and display its value.    Right click on the Front Panel window. You will get the Controls popup:      Tip  Place the cursor over the Numeric button and select Numeric Indicator.\nPlace this box and left click. The fact that the word \"Numeric\" is\nhighlighted means that it is selected and can be edited. Change the\nname to \"VT\" by double-clicking.     Now we need something for the indicator to display. Click on the Block\n   Diagram window to bring it to the top. Note that placing the indicator on\n   the front panel has also placed a block on the block diagram.      Note  This block is the  icon  associated with the indicator. We can provide\nvalues for it to display by connecting it to a signal source. The\nsource we will use will be one of the A/D converter inputs.     Right-click on the Block Diagram window to bring up the Functions palette.       From the Functions popup, select Express  \\(\\rightarrow\\)  Input  \\(\\rightarrow\\) \n   DAQ Assist.       Position this somewhere to the left of the Graph indicator block and left\n    click.    After a second or two the \"Create New ..\" wizard will appear.       Click on \"Acquire Signals\" in the righthand column, then click on \"Analog\n    Input\" then on \"Voltage\" in the list that appears.       From the list of Supported Physical Channels that appears, select \"ai5\",\n    then click the \"Finish\" button at the bottom of the frame.       After another brief wait, the \"DAQ Assistant\" dialog appears. In the \"Input\n    Range\" block set \"Max\" to 10\u00a0Volts and \"Min\" to -10\u00a0Volts. Set the\n    \"Acquisition Mode\" to \"1 Sample (On Demand)\". The panel should look like\n    this when you are done.  Click the \"OK\" button when you're done.       Things will click and whir for several seconds. When it's all over, the\n    \"DAQ Assistant\" box will have expanded, and should have a white band with\n    the word \"data\" in it.       We're almost done. All that remains is to connect the source (A/D converter\n    block) to the destination (numeric indicator block).    Place the cursor over the small black triangle in the \"data\" field of the\n    DAQ Assistant block. It should change into an icon representing a small\n    spool of wire. Left click once and move the cursor to the small white\n    triangle in the center of the left edge of the numeric indicator icon and\n    left click once more. That completes our first Labview program.  It should\n    look something like this:", 
            "title": "Part A: A Very Simple VI"
        }, 
        {
            "location": "/lab3/experiment_3-2/#data-types", 
            "text": "Notice that the color of the icon for the waveform graph changed from orange to\nblue. This is an indication that the type of data which it is displaying has\nchanged. Like many programming languages (e.g. C) Labview maintains the notion\nof  data types . Labview's data types include familiar ones such as integer,\nfloating point, boolean, and string, as well as a number of unfamiliar ones\n(which we will try to avoid for the time being). Labview denotes data type by\nthe color of the wire which carries it: integer wires are blue, floating point\nwires are orange, boolean wires are green, and strings are pink. Labview also\nsupports collection types, such as arrays and structures. Scalars are denoted\nby thin solid lines, arrays by thick solid lines, and other collections by\nvarious patterned lines. The wide dark blue lines with internal dashes are a\ncomposite data type called  dynamic data .  Dynamic data contains a lot of information in addition to the value of the\nsample, for example, the time at which the sample was taken, whether any errors\nwere made in previous handling of the sample, etc. This means that when we\nconnect our signal to the waveform display, it can automatically display the\ncorrect time scale on the x-axis, rather than just the sample number.    Click on the Front Panel window to bring it to the top. Run the VI by\n   clicking on the Run arrow or by typing Ctrl-R. The  VT  nemeric indicator\n   should display the voltage across  \\(R_T\\) , which should still be about  \\(2.5\u00a0V\\)    Select  Save As...  from the  File  menu. Set the  Save in:  field to an\n   appropriate directory (i.e., your user directory).   Note  Always set the destination directory when saving a VI. Never try to\nsave a VI in the default directory.", 
            "title": "Data Types"
        }, 
        {
            "location": "/lab3/experiment_3-2/#part-b-converting-voltage-to-resistance", 
            "text": "So far we're no better off than we would have been using the DMM. In fact we're\nworse off since all we have is a voltage. The DMM at least can read resistance\ndirectly. But given  \\(V_S\\) ,  \\(V_T\\) , and Ohm's Law we can calculate resistance,\nand computers are very good at calculating things.  There are two ways we could formulate this calculation. We could do it in two\nsteps, first computing  \\(I_T=I_S=(V_S-V_T)/R_S\\) , then using Ohm's Law to get \\(R_T=V_T/I_T\\) . Alternately, we could treat the circuit as a voltage divider,\nwhich gives  \\[\nR_T=\\frac{V_T}{V_S-V_T}R_S\n\\] Because we will be interested in  \\(I_T\\)  in a subsequent Experiment, we will use\nthe first approach.    On the front panel, create a new numeric indicator and label it  IT .    In order to compute the current we will have to do some arithmetic on the\n    \\(V_T\\)  signal. Go to the block diagram window and right-click to get the\n    Functions  palette.  Select Programming  \\(\\rightarrow\\)  Numeric:       This has everything we need: subtraction, division, and constants (for  \\(V_S\\) \n   and  \\(R_S\\)  ).    Let's start with the subtraction. Move the cursor over the symbol labeled\n    Subtract  and left click. Position the icon below the existing components\n   on the diagram and left click to put it down. Note that while the cursor is\n   over the symbol there are three small circles near the vertices of the\n   triangle.      Note  These indicate the connection points and will disappear when the cursor\nmoves away.     Repeat the above process, but select the  Divide  symbol. Place it slightly\n   to the right and a little lower than the subtract icon.    Now let's do the constants, starting with  \\(V_S\\) . Select Numeric Constant\n   from the Numeric palette and place the resulting block above and to the left\n   of the subtract icon. The highlighted text indicates that you can enter a\n   new value. Type  5  and press  Enter  or click the check box at the upper\n   left of the window. Repeat this process, placing the icon for  \\(R_S\\)  below\n   and to the right of the divide icon. Enter a value of 10000. Here's what you\n   should have at this point:       All that remains is to make the connections. Wire the blocks together\n   appropriately. A couple of things to note:   Note   The position of the terminals on the arithmetic blocks corresponds to\nthe conventions of grade school arithmetic. For subtract the minuend is\non top and the subtrahend is on the bottom.For divide the dividend is\non top and the divisor on the bottom.  To connect to an existing wire (in this case the one between the A/D\nconverter block and the  VT  display block), move the cursor  near ,\nbut not directly on, the wire. If you place the cursor on the wire it\nwill turn into an arrow, indicating that you can select the wire.      When you're done it should look something like this:       Let's test what we have so far. Go to the front panel and click on the  Run \n   button. If all is well,  \\(V_T\\)  should still be about 2.5\u00a0V and  \\(I_T\\)  should\n   be about 0.00025\u00a0A.    Now that we have found the current in the thermistor, finding the\n    resistance is easy: just divide  \\(V_T\\)  (which we measured directly) by  \\(I_T\\) \n    (which we just computed).  To do this we need to add another numeric\n    indicator to the front panel and a divide block to the block diagram. Let's\n    put the indicator to the right of the two existing ones (and label it  RT .       On the block diagram, place another divide block to the left of the  RT \n    indicator block. Wire it up so that  \\(R_T=V_T/I_T\\)  and here's what we have:       Test the VI by clicking  Run  from the front panel. The  RT  indicator\n    should display a value close to 10000.", 
            "title": "Part B: Converting Voltage to Resistance"
        }, 
        {
            "location": "/lab3/experiment_3-2/#part-c-converting-r-to-t", 
            "text": "Given this value of the resistance and the information on the  thermistor data\nsheet ,\nwe can calculate the temperature.    Based on the information in the thermistor data sheet, derive a formula\n   which gives the temperature (your choice of  \\(K, ^\\circ C,\\)  or  \\(^\\circ F\\) ) in terms of the\n   resistance of the thermistor.    We could perform this computation the same way we did for resistance, by\n   using a numeric operation block for each addition, division, etc. in the\n   formula, but for a formula like this there is a more efficient and compact\n   approach, the  formula node .    In the Block Diagram window, right click to bring up the  Functions \n   palette. Move the cursor to Programming  \\(\\rightarrow\\)  Structures. Click on\n   the  Formula Node  button.    The formula node is a variable sized block, so it is instantiated by\n   clicking on the desired location of the upper right corner and dragging to\n   create the desired size. Move the cursor to a convenient spot on the block\n   diagram, preferably near the  RT  indicator icon, then click, drag, and\n   release to create the formula node. It should look like this:      Tip  If you want to find out more about the components in the\nblock diagram, you can turn on the  Context Help  feature: select Show Context Help  from the  Help  menu. When context help is turned\non, a window (labeled  Context Help ) appears in the upper right corner\nof the screen. When the cursor is moved over any component in the block\ndiagram, a brief description and a link to additional information\nappears.     Let's start with the formula. As an example, we'll use\n    \\(T=300\\frac{10000}{RT}\\) . (If you got this formula, you should check your\n   derivation, as it is not correct.) Since we can't type subscripts in\n   labview, we will use  \\(RT\\)  in place of  \\(R_T\\) . To enter this into the formula\n   node, simply place the cursor inside the block, right click, and start\n   typing. The formula node uses the C language syntax, and each statement must\n   end with a semicolon; When you have finished, click on the check box (or\n   anywhere outside the formula node box).    At this point you may have noticed a change in the appearance of the\n   toolbar: the run button has changed from a white arrow to a gray broken\n   arrow (   ). This means that there is an error\n   in the block diagram and the VI won't run. To find out what the error is,\n   click on the broken arrow button.  If you do this you should find that the problem is an undefined variable.\nActually, there are two:  \\(T\\)  and  \\(RT\\)  . We will define these in the next step\nwhen we create the input and output terminals.      Place the cursor somewhere on the left-hand border of the formula node and\n   right-click. Select  Add Input  from the popup menu. This should create a\n   small rectangular box in the border. The highlighted (black) interior of the\n   box is a selected text field. Type  RT  and click the check box. Repeat this\n   process on the right-hand border, but select  Add Output  and type  T  into\n   the box.    The arrow is still broken, but now the error message complains of an\n   \"unwired input.\" Let's try to fix that: connect the input (RT) to the wire\n   between the division block and the numeric indicator which displays the\n   value of  \\(R_T\\) .  Unfortunately, this seems to have made things worse. Not only is the arrow\nstill broken, but we also have a broken wire. (Broken wires are indicated\nby dashed lines with a red X in the middle.) The error list tells us: \"You\nhave connected two terminals of different types.\"  Dynamic data contains a lot of information in addition to the value of the\nsample, for example, the time at which the sample was taken, whether any\nerrors were made in previous handling of the sample, etc. Dynamic data\nusually makes life easer for us by bundling ancillary information along\nwith a signal so we don't have to be concerend about carrying it around\nseparately, but at the moment it's causing problems. While most blocks\n(e.g. subtract, divide, numeric indicator) can accept any appropriate data\ntype, including dynamic, others are more picky about what they will take.\nFor example, the formula node expects ordinary, pure numeric data and\ndoesn't know what to do with the additional stuff contained in dynamic\ndata. We can fix this by converting the dynamic data to scalar data.    Remove the offending broken wire. To do this, place the cursor directly over\n   the wire, so that it turns into an arrow, and double click. Press the\n    Delete  key.    Right click to bring up the  Functions  palette. Select Express\n     \\(\\rightarrow\\)  Sig Manip button to bring up the Signal Manipulation palette.       From this select the  From DDT  block. Place this just to the left of the\n     RT  terminal of the formula node.    When you place the  From DDT  block, a dialog box labeled \"Configure\n    Convert from Dynamic Data\" will appear. In the  Resulting data type  field,\n    select  Single Scalar , then click  OK .    Wire the output of the  From DDT  block to the  RT  terminal of the formula\n    node. Connect the input of the  From DDT  block to the wire between the\n    division block and the  RT  numeric indicator. The arrow should now be\n    unbroken.    Now display the value of temperature by placing another numeric indicator\n    on the front panel and labeling it  T . Return to the block diagram, and\n    wire the new indicator icon to the  T  terminal of the formula node. Here's\n    what you should have:       Return to the front panel and press the run button. The  T  indicator will\n    display the current temperature.", 
            "title": "Part C: Converting R to T"
        }, 
        {
            "location": "/lab3/experiment_3-2/#part-d-continuous-display", 
            "text": "Although we have technically achieved our goal of measuring and displaying\ntemperature, we can only do so on demand. It would be much more useful if we\nhad a system which could continuously display the current temperature.\nFortunately, this is a simple enhancement to make.  Like more conventional\nprogramming languages, Labview has looping and branching constructs. What we\nneed here is the  while loop  which repeats its contents until an exit\ncondition is met.    Right click in the block diagram to bring up the  Functions  palette.\n   Select Structures. Click on the  While Loop  button.       This is a variable sized block, like the formula node, and we want it to\n   enclose everything we currently have in our VI. Click on the panel, and\n   enclose your entire block diagram with the while loop.   Note  Note the green-bordered block labeled  stop  in the lower right corner\nof the while loop. This is a free accessory that allows us to stop the\nloop, which would otherwise run forever. This block is an example of a control . A control is the dual of an indicator, i.e. it provides\ninput from the front panel to the block diagram. Go to the front panel\nand notice that there is a new object, a button labeled  STOP .\nPressing this button causes the associated icon to output a True value\n(when the button is not pressed, the output is False).     From the front panel, press the  Run  button. The indicators should now\n   display continuously updated values. To convince yourself that these aren't\n   random, grab the body of the thermistor between your thumb and forefinger,\n   being careful not to touch the leads. The displayed temperature should\n   increase. Press the  STOP  button when done.    The updating of the display, while certainly continuous, might be too fast\n   to read. This is because new samples are being taken and displayed as fast\n   as the A/D converter is able to take them (1,250,000 samples/second), which\n   is much faster than any phenomenon we might bring into the lab is capable of\n   changing its temperature. The net result is wasted processor power and a\n   blurry display which is difficult to read.  There are a number of ways in which we can set the sampling rate to a more\nreasonable value. We will utilize one which requires minimal change to what\nwe have already constructed.    Return to the block diagram and go to Functions  \\(\\rightarrow\\)  Programming\n    \\(\\rightarrow\\)  Timing.  Select the  Time Delay  block     and place it in a convenient location inside the while loop. Accept the\ndefault delay of 1\u00a0second by clicking  OK  in the  Configure Time Delay \ndialog box. (If the block automatically wires itself to something, remove\nthe resulting wire.)    Return to the front panel and click  Run . The display should now update at\n   a more leisurely rate.    Be sure to include a screenshot of your block diagram in your lab writeup.    Save your work as we will make further enhancements to this program next\n   week.", 
            "title": "Part D: Continuous Display"
        }, 
        {
            "location": "/lab4/", 
            "text": "Lab 4: Computer Aided Measurements II\n\n\n Introduction \n\n\nExperiments\n\n\n\n\nExperiment 4.1: \nLabview as a Source of Signals\n\n\nExperiment 4.2: \nImproved Resistance Measurement", 
            "title": "Home"
        }, 
        {
            "location": "/lab4/#lab-4-computer-aided-measurements-ii", 
            "text": "", 
            "title": "Lab 4: Computer Aided Measurements II"
        }, 
        {
            "location": "/lab4/#introduction", 
            "text": "", 
            "title": "Introduction"
        }, 
        {
            "location": "/lab4/#experiments", 
            "text": "Experiment 4.1:  Labview as a Source of Signals  Experiment 4.2:  Improved Resistance Measurement", 
            "title": "Experiments"
        }, 
        {
            "location": "/lab4/introduction/", 
            "text": "Introduction\n\n\nThis week we will add a number of words to our Labview vocabulary. We will\ngenerate outputs in addition to reading and displaying inputs. We will deal\nwith streams of continuous samples as well as single, discrete samples. We will\nintroduce some simple \nsignal processing\n. And we will display our results in\ngraphic as well as numeric form. We will apply some of these techniques to the\nresistance/temperature measurement system we built last week to produce a new\nsystem with increased accuracy and capability.", 
            "title": "Introduction"
        }, 
        {
            "location": "/lab4/introduction/#introduction", 
            "text": "This week we will add a number of words to our Labview vocabulary. We will\ngenerate outputs in addition to reading and displaying inputs. We will deal\nwith streams of continuous samples as well as single, discrete samples. We will\nintroduce some simple  signal processing . And we will display our results in\ngraphic as well as numeric form. We will apply some of these techniques to the\nresistance/temperature measurement system we built last week to produce a new\nsystem with increased accuracy and capability.", 
            "title": "Introduction"
        }, 
        {
            "location": "/lab4/experiment_4-1/", 
            "text": "Experiment 4.1\n\n\nLabview as a Source of Signals\n\n\nLast week we looked at the ability of Labview to measure and display external\nsignals. These included voltages and other physical variables which we could\nrepresent as voltages. This week we will start by looking at the other\ndirection: using Labview to \ngenerate\n signals. These will also be voltages,\nwhich we can then use in their own right or transform into other physical\nvariables.\n\n\nIn this Experiment we will practice signal generation techniques on a new,\nblank VI. When we are confident of our skills, we will use them to make\nimprovements to the VI we built last week in Experiment 3.2.\n\n\nPart A: Generate a Fixed Voltage\n\n\nLet's start with something simple: a VI that puts out a constant 1\u00a0volt signal.\nNot very exciting, but we can add enhancements until it does something useful.\n\n\nRecall that the DAQ card has two analog voltage outputs: \ndac0\n and \ndac1\n.\nUnlike the analog inputs which have different sensitivities, there's no real\ndifference between these, so we'll arbitrarily choose \ndac0\n for our output.\n\n\n\n\n\n\nUse a BNC patch cable to connect \nJ1-1\n to \nCH 1\n of the oscilloscope.  On\n   the breadboard, connect \nJ1-1\n (pin 1) to \ndac0\n (pin 51).\n\n\n\n\n\n\nStart Labview and open a new, blank VI. Since we want this VI to run\n   continuously, go to the block diagram window and create a large while loop.\n   There is a shortcut to creating an input or output block to any placed\n   block. We can use this shortcut to create a Stop button for the while loop.\n   Hover over the input pin of the loop condition (red dot) and the arrow\n   cursor will turn into a spool of wire cursor. Right-click on the input pin\n   and dialog box appears:\n\n\n\n\n\n\n\n\n\n\n\n\nThere are three types of entries possible - a constant, a control (which is\n   a user-controlled variable) or an indicator (i.e., a numeric or graphical\n   display). Click on Create Control, and a stop button appears.\n\n\n\n\n\n\nWe create D/A output blocks in nearly the same way we did A/D input blocks,\n   using the DAQ Assistant. Go to SignalExpress \n\\(\\rightarrow\\)\n DAQ Assistant, then place\n   the resulting block inside the while loop, somewhere in the right-hand half.\n\n\n\n\n\n\nSelect Generate Signals \n\\(\\rightarrow\\)\n Analog Output \n\\(\\rightarrow\\)\n Voltage.\n   From the list of Supported Physical Channels, select \nao0\n, then click the\n   \nFinish\n button at the bottom of the frame.\n\n\n\n\n\n\nSet the \nOutput Range\n to have a \nMax\n of 10\u00a0Volts and a \nMin\n of -10\u00a0Volts.\n   Set the \nGeneration Mode\n to \n1 Sample (On Demand)\n. When finished, click\n   the \nOK\n button. The block will expand, and a white band containing the word\n   \ndata\n will appear.\n\n\n\n\n\n\nOn the left-hand side of the while loop, place a numeric constant and set\n   the value set to 1.\n\n\n\n\n\n\nWire the constant to the \ndata\n input of the D/A output block. Our first\n   signal generating VI is finished.\n\n\n\n\n\n\nPress \nRun\n and verify on the oscilloscope that the output is set to 1\u00a0volt.\n\n\n\n\n\n\nPart B: Input from the Front Panel\n\n\nAs we'll see shortly, being able to output/ produce a fixed voltage is a useful\ncapability. But being able to change the value of that voltage would make it\neven more useful. We could do this by editing the value of the numeric\nconstant, but we would have to stop the VI each time we wanted to make a\nchange. It would be much easier if we could do this from the front panel.\nFortunately, we are able to do this by using a \nnumeric control\n, which is the\ndual of a numeric indicator, i.e.  instead of displaying a value it allows you\nto enter one.\n\n\n\n\n\n\nGo to the front panel and press the \nStop\n button. (VIs can't be edited\n   while they are running).\n\n\n\n\n\n\nDelete the numeric constant input. Right-click on the input pin to data and\n   select Create.\n\n\n\n\n\n\n\n\n\n\n\n\nSelect Control. Change the label to \nVout\n.\n\n\n\n\n\n\nFind the newly created numeric control on the Front Panel. A shortcut for\n   this is to right-click on it in the block diagram and select Find Control.\n   This will bring up the block diagram with the associated icon selected.\n\n\n\n\n\n\nPress the \nRun\n button. If the numeric control still contains the default\n   value (zero), the signal displayed on the scope should fall to zero.\n\n\n\n\n\n\nWith the VI still running, double click over the \nVout\n control and type in\n   a new value (between -10 and 10). Press \nEnter\n or click the check box. The\n   signal on the scope should jump to the value that you entered.\n\n\n\n\n\n\nTry typing in a few more values. When the excitement has faded, stop the VI.\n\n\n\n\n\n\nTyping in a number is a convenient way to precisely set a value, but for\n   quick changes, something like a knob is more suitable. On the Front Panel,\n   right-click over the \nVout\n control and select \nReplace\n. This will bring up\n   a palette of objects with which this control may be replaced. From this\n   palette, select Numeric \n\\(\\rightarrow\\)\n Vertical Pointer Slide.\n\n\n\n\n\n\n\n\n\n\n\n\nStart the VI. Place the cursor over the white triangular portion of the\n   slider left click, and drag the pointer up and down. The signal on the scope\n   should rise in fall in response.\n\n\n\n\n\n\nChange the lower limit on the slider from the default value (0) to -10 by\n    double-clicking the default 0 lower limit. You should now be able to vary\n    the output over the full range of -10\u00a0volts to +10\u00a0volts.\n\n\n\n\n\n\nPart C: A Function Generator VI\n\n\nNow let's try changing the input to a mathematical function.\n\n\nWe will have Labview compute the value of \n\\(sin(\\omega)\\)\n at regularly spaced\nvalues of \n\\(t\\)\n, then set the D/A output to that value during the corresponding\ninterval. The tricky part is keeping the values of \n\\(t\\)\n at which we update the\noutput regularly spaced. In Part D of Experiment 3.2 we took samples of the A/D\ninput value at 1\u00a0second intervals by placing a 1\u00a0second delay block inside the\nwhile loop. This is satisfactory for long intervals (like 1\u00a0second), but as we\ntry to generate more closely spaced samples (think of that 1\u00a0kHz sine wave) the\nscheduling uncertainty of Windows will make the sample spacing very irregular.\n\n\nThe solution is to do the sampling in hardware, on the DAQ card, directly at\nthe A/D or D/A converter. If we buffer a sufficient number of samples,\nirregularities in processing them can be smoothed out and the actual input and\noutput values will change at consistently correct times. In order for this to\nwork, we need to generate and process samples in blocks or buffers containing a\nfixed number of samples.  Labview provides for this with the \narray\n data type.\n\n\n\n\n\n\nStop the VI. Go to the block diagram and disconnect the slider output from\n   the D/A converter input. Move the slider icon out of the way, but don't\n   delete it; we'll use it again a bit later.\n\n\n\n\n\n\nGo to Functions \n\\(\\rightarrow\\)\n Express \n\\(\\rightarrow\\)\n Signal Analysis\n   \n\\(\\rightarrow\\)\n Simulate Sig...  Place the \nSimulate Signal\n block to the left\n   of the \nDAQ Assistant\n block and left click to place it. In the \nConfigure\n   Simulate Signal\n accept the default values and click \nOK\n A white band\n   labeled \nSine\n will appear at the bottom of the block. Wire the \nSine\n\n   output of this block to the \ndata\n input of the D/A block. Double click on\n   the D/A block or right click and select \nProperties\n from the menu. Change\n   the \nGeneration Mode\n from \n1 Sample (On Demand)\n to \nContinuous\n. Click\n   \nOK\n and wait for everything to settle down.\n\n\n\n\n\n\nClick \nRun\n. You should see a 10.1\u00a0Hz sine wave on the oscilloscope.\n\n\n\n\n\n\nAgain, it would be convenient if we could change the parameters of the\n   waveform (e.g. frequency or amplitude) without having to stop the VI, edit\n   the Simulate Signal block, and restart. Fortunately that's easy to do.\n\n\n\n\n\n\nStop the VI. Move the cursor over the small double arrow in the middle of\n   the bottom edge of the Simulate Signal block. It will turn into a small blue\n   square and the cursor will become a resize arrow.\n\n\n\n\n\n\n\n\n\n\n\n\nLeft click and drag down slightly until the dashed outline grows by one\n   increment, then release. Another white band, labeled \nerror out\n will appear\n   (the brown color indicates the data type of the output). Left click in this\n   new box to bring up the menu of choices. This is the list of all available\n   inputs and outputs for this block. Select \nFrequency\n.\n\n\n\n\n\n\nWire the slider output to this new input. Edit the slider to set its range\n   to be 0 to 100 and change its name.\n\n\n\n\n\n\nGo to the front panel and start the VI. Adjust the slider and observe that\n   the frequency of the sine wave changes corresponding to the position of the\n   slider.\n\n\n\n\n\n\nYou may notice that the output sine wave is initially discontinuous and that\n   the response to changes in the slider position is very sluggish. The former\n   is caused by a lag in synchronizing the generation and output processes and\n   the latter is due to the amount of buffering that Labview provides. We can\n   speed things up by increasing the sample rate.\n\n\n\n\n\n\nDouble click on the \nSimulate Signal\n block. In the \nTiming\n sub-panel, set\n    \nSamples per second (Hz)\n to 10000. Restart the VI.  Things should now be a\n    bit more responsive.\n\n\n\n\n\n\nIf you feel so inclined, place another slider (or knob) on the front panel\n    and use it to control the amplitude of the sine wave.\n\n\n\n\n\n\nStop the VI and save it in a persistent location.", 
            "title": "Labview as a Source of Signals"
        }, 
        {
            "location": "/lab4/experiment_4-1/#experiment-41", 
            "text": "", 
            "title": "Experiment 4.1"
        }, 
        {
            "location": "/lab4/experiment_4-1/#labview-as-a-source-of-signals", 
            "text": "Last week we looked at the ability of Labview to measure and display external\nsignals. These included voltages and other physical variables which we could\nrepresent as voltages. This week we will start by looking at the other\ndirection: using Labview to  generate  signals. These will also be voltages,\nwhich we can then use in their own right or transform into other physical\nvariables.  In this Experiment we will practice signal generation techniques on a new,\nblank VI. When we are confident of our skills, we will use them to make\nimprovements to the VI we built last week in Experiment 3.2.", 
            "title": "Labview as a Source of Signals"
        }, 
        {
            "location": "/lab4/experiment_4-1/#part-a-generate-a-fixed-voltage", 
            "text": "Let's start with something simple: a VI that puts out a constant 1\u00a0volt signal.\nNot very exciting, but we can add enhancements until it does something useful.  Recall that the DAQ card has two analog voltage outputs:  dac0  and  dac1 .\nUnlike the analog inputs which have different sensitivities, there's no real\ndifference between these, so we'll arbitrarily choose  dac0  for our output.    Use a BNC patch cable to connect  J1-1  to  CH 1  of the oscilloscope.  On\n   the breadboard, connect  J1-1  (pin 1) to  dac0  (pin 51).    Start Labview and open a new, blank VI. Since we want this VI to run\n   continuously, go to the block diagram window and create a large while loop.\n   There is a shortcut to creating an input or output block to any placed\n   block. We can use this shortcut to create a Stop button for the while loop.\n   Hover over the input pin of the loop condition (red dot) and the arrow\n   cursor will turn into a spool of wire cursor. Right-click on the input pin\n   and dialog box appears:       There are three types of entries possible - a constant, a control (which is\n   a user-controlled variable) or an indicator (i.e., a numeric or graphical\n   display). Click on Create Control, and a stop button appears.    We create D/A output blocks in nearly the same way we did A/D input blocks,\n   using the DAQ Assistant. Go to SignalExpress  \\(\\rightarrow\\)  DAQ Assistant, then place\n   the resulting block inside the while loop, somewhere in the right-hand half.    Select Generate Signals  \\(\\rightarrow\\)  Analog Output  \\(\\rightarrow\\)  Voltage.\n   From the list of Supported Physical Channels, select  ao0 , then click the\n    Finish  button at the bottom of the frame.    Set the  Output Range  to have a  Max  of 10\u00a0Volts and a  Min  of -10\u00a0Volts.\n   Set the  Generation Mode  to  1 Sample (On Demand) . When finished, click\n   the  OK  button. The block will expand, and a white band containing the word\n    data  will appear.    On the left-hand side of the while loop, place a numeric constant and set\n   the value set to 1.    Wire the constant to the  data  input of the D/A output block. Our first\n   signal generating VI is finished.    Press  Run  and verify on the oscilloscope that the output is set to 1\u00a0volt.", 
            "title": "Part A: Generate a Fixed Voltage"
        }, 
        {
            "location": "/lab4/experiment_4-1/#part-b-input-from-the-front-panel", 
            "text": "As we'll see shortly, being able to output/ produce a fixed voltage is a useful\ncapability. But being able to change the value of that voltage would make it\neven more useful. We could do this by editing the value of the numeric\nconstant, but we would have to stop the VI each time we wanted to make a\nchange. It would be much easier if we could do this from the front panel.\nFortunately, we are able to do this by using a  numeric control , which is the\ndual of a numeric indicator, i.e.  instead of displaying a value it allows you\nto enter one.    Go to the front panel and press the  Stop  button. (VIs can't be edited\n   while they are running).    Delete the numeric constant input. Right-click on the input pin to data and\n   select Create.       Select Control. Change the label to  Vout .    Find the newly created numeric control on the Front Panel. A shortcut for\n   this is to right-click on it in the block diagram and select Find Control.\n   This will bring up the block diagram with the associated icon selected.    Press the  Run  button. If the numeric control still contains the default\n   value (zero), the signal displayed on the scope should fall to zero.    With the VI still running, double click over the  Vout  control and type in\n   a new value (between -10 and 10). Press  Enter  or click the check box. The\n   signal on the scope should jump to the value that you entered.    Try typing in a few more values. When the excitement has faded, stop the VI.    Typing in a number is a convenient way to precisely set a value, but for\n   quick changes, something like a knob is more suitable. On the Front Panel,\n   right-click over the  Vout  control and select  Replace . This will bring up\n   a palette of objects with which this control may be replaced. From this\n   palette, select Numeric  \\(\\rightarrow\\)  Vertical Pointer Slide.       Start the VI. Place the cursor over the white triangular portion of the\n   slider left click, and drag the pointer up and down. The signal on the scope\n   should rise in fall in response.    Change the lower limit on the slider from the default value (0) to -10 by\n    double-clicking the default 0 lower limit. You should now be able to vary\n    the output over the full range of -10\u00a0volts to +10\u00a0volts.", 
            "title": "Part B: Input from the Front Panel"
        }, 
        {
            "location": "/lab4/experiment_4-1/#part-c-a-function-generator-vi", 
            "text": "Now let's try changing the input to a mathematical function.  We will have Labview compute the value of  \\(sin(\\omega)\\)  at regularly spaced\nvalues of  \\(t\\) , then set the D/A output to that value during the corresponding\ninterval. The tricky part is keeping the values of  \\(t\\)  at which we update the\noutput regularly spaced. In Part D of Experiment 3.2 we took samples of the A/D\ninput value at 1\u00a0second intervals by placing a 1\u00a0second delay block inside the\nwhile loop. This is satisfactory for long intervals (like 1\u00a0second), but as we\ntry to generate more closely spaced samples (think of that 1\u00a0kHz sine wave) the\nscheduling uncertainty of Windows will make the sample spacing very irregular.  The solution is to do the sampling in hardware, on the DAQ card, directly at\nthe A/D or D/A converter. If we buffer a sufficient number of samples,\nirregularities in processing them can be smoothed out and the actual input and\noutput values will change at consistently correct times. In order for this to\nwork, we need to generate and process samples in blocks or buffers containing a\nfixed number of samples.  Labview provides for this with the  array  data type.    Stop the VI. Go to the block diagram and disconnect the slider output from\n   the D/A converter input. Move the slider icon out of the way, but don't\n   delete it; we'll use it again a bit later.    Go to Functions  \\(\\rightarrow\\)  Express  \\(\\rightarrow\\)  Signal Analysis\n    \\(\\rightarrow\\)  Simulate Sig...  Place the  Simulate Signal  block to the left\n   of the  DAQ Assistant  block and left click to place it. In the  Configure\n   Simulate Signal  accept the default values and click  OK  A white band\n   labeled  Sine  will appear at the bottom of the block. Wire the  Sine \n   output of this block to the  data  input of the D/A block. Double click on\n   the D/A block or right click and select  Properties  from the menu. Change\n   the  Generation Mode  from  1 Sample (On Demand)  to  Continuous . Click\n    OK  and wait for everything to settle down.    Click  Run . You should see a 10.1\u00a0Hz sine wave on the oscilloscope.    Again, it would be convenient if we could change the parameters of the\n   waveform (e.g. frequency or amplitude) without having to stop the VI, edit\n   the Simulate Signal block, and restart. Fortunately that's easy to do.    Stop the VI. Move the cursor over the small double arrow in the middle of\n   the bottom edge of the Simulate Signal block. It will turn into a small blue\n   square and the cursor will become a resize arrow.       Left click and drag down slightly until the dashed outline grows by one\n   increment, then release. Another white band, labeled  error out  will appear\n   (the brown color indicates the data type of the output). Left click in this\n   new box to bring up the menu of choices. This is the list of all available\n   inputs and outputs for this block. Select  Frequency .    Wire the slider output to this new input. Edit the slider to set its range\n   to be 0 to 100 and change its name.    Go to the front panel and start the VI. Adjust the slider and observe that\n   the frequency of the sine wave changes corresponding to the position of the\n   slider.    You may notice that the output sine wave is initially discontinuous and that\n   the response to changes in the slider position is very sluggish. The former\n   is caused by a lag in synchronizing the generation and output processes and\n   the latter is due to the amount of buffering that Labview provides. We can\n   speed things up by increasing the sample rate.    Double click on the  Simulate Signal  block. In the  Timing  sub-panel, set\n     Samples per second (Hz)  to 10000. Restart the VI.  Things should now be a\n    bit more responsive.    If you feel so inclined, place another slider (or knob) on the front panel\n    and use it to control the amplitude of the sine wave.    Stop the VI and save it in a persistent location.", 
            "title": "Part C: A Function Generator VI"
        }, 
        {
            "location": "/lab4/experiment_4-2/", 
            "text": "Experiment 4.2\n\n\nImproved Resistance Measurement\n\n\nLet's apply our new Labview skills to the task of improving the\nresistance/temperature measurement system we built last week.\n\n\nPart A: Measure Vs\n\n\nOne shortcoming of last week's system is that we have to be careful to set the\npower supply voltage to the correct value. Since \n\\(V_S\\)\n appears in the formula\nfor temperature, if this voltage is incorrect, the temperature reading will be\nincorrect. A much better design would be to have Labview measure the actual\nvalue of \n\\(V_S\\)\n and use that value in the formula.\n\n\n\n\n\n\nRestore the connections you had in Experiment 3.2 last week with the 0-6\u00a0V\n   output of the power supply (set to 5.00\u00a0V) connected to J1-3.  Check that\n   the circuit on your breadboard is still wired correctly. Load and run the VI\n   you saved last week and verify that it still produces the correct reading\n   for temperature. Vary the power supply voltage and observe that the\n   temperature reading changes in response.\n\n\n\n\n\n\nStop the VI. On your breadboard, add a wire to connect \n\\(V_S\\)\n to \nach4\n, so\n   that your circuit looks like this:\n\n\n\n\n\n\n\n\n\n\n\n\nWe are now asking the A/D converter to read two different voltages\n   simultaneously. This is not a problem for the A/D converter, but it does\n   require \nus\n to figure out how Labview represents multiple simultaneous\n   samples.\n\n\n\n\n\n\nThe obvious way to handle this would be to simply add another A/D block and\n   set it to A/D Channel 4. If you try this, you will get a cryptic error\n   message to the effect that the device is already in use.  This is because\n   all of the channels are on the same card, and the first channel which is\n   opened has exclusive use of the device. Labview handles this by combing\n   multiple samples into a \nvector\n, with one entry for each channel.\n\n\n\n\n\n\nDouble click the A/D block or select \nProperties\n from the menu. This will\n   bring up the \nDAQ Assistant\n dialog. Click on Add Channels button near the\n   top of the panel\n\n\n\n\n\n\n\n\n\n\n\n\nSelect \nVoltage\n from the popup menu, then select \nai4\n from the list of\n   Supported Physical Channels. A new entry for ai4 should appear in the\n   channels list. Because channel 5 appears first on the list, it will be the\n   first element of the vector of samples and channel 4 will be the second. It\n   won't cause problems as long as we remember the order. Click \nOK\n.\n\n\n\n\n\n\nThe block diagram looks the same as before, but now the wire is carrying two\n   separate values. Perhaps surprisingly, this fact does not change the\n   original operation of the VI. Subsequent blocks, expecting a single value,\n   simply take the first element of the vector. Since we left the original\n   signal (\n\\(V_T\\)\n) as the first element, everything to the right of the A/D\n   converter block works as it did before. Start the VI and verify that this is\n   the case.\n\n\n\n\n\n\nClick on the wire segment coming out of the \ndata\n terminal of the \nDAQ\n   Assistant\n block and press \nDelete\n to remove it. The remainder of the wire\n   will become broken, since there is now no input. From the \nFunctions\n\n   palette, select Express \n\\(\\rightarrow\\)\n Sig Manip \n\\(\\rightarrow\\)\n Split Signals.  Place the\n   resulting icon between the A/D converter output and the leftmost portion of\n   the broken wire, and click to release.\n\n\n\n\n\n\nThe split signals block is expandable to accomodate the number of signals in\n   a bundle. Place the cursor over the middle of the bottom edge and move it\n   around until it turns into a resize arrow. Drag the bottom edge down by one\n   increment. The resulting icon will look like a wishbone in a box.\n\n\n\n\n\n\n\n\n\n\n\n\nWire the left side of the split signals block to the A/D output. The upper\n    output is \n\\(V_T\\)\n (ach5).  Connect it to the broken \n\\(V_T\\)\n wire.\n\n\n\n\n\n\nThe lower output is \n\\(V_S\\)\n , which will replace the constant value of 5\n    currently connected to the upper input of the subtract block. Delete this\n    numeric constant block and wire the lower output of the split signal block\n    to its previous destination.\n\n\n\n\n\n\nStart the VI and verify that the displayed temperature value is still\n    correct. Vary the value of \n\\(V_S\\)\n and verify that it remains correct.\n\n\n\n\n\n\nPart B: Generate \n\\(V\\)\ns in Labview\n\n\nOur temperature measurement system is now more accurate, but it's still very\nbulky since it requires the power supply in order to function. In the previous\nExperiment we were able to use Labview to generate constant voltages. If we\nwere to generate such a voltage and connect it in place of the power supply, we\nwould have a self-contained measurement system.\n\n\n\n\nStop the VI. On your breadboard, remove the wire connecting J1-3 to \n\\(V_S\\)\n\n   and replace it with a wire connecting \ndac0\n to \n\\(V_S\\)\n.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOn the block diagram, move the bottom edge of the while loop down to create\n   room for additional components. In the resulting space add a \nDAQ Assist\n\n   output block, selecting \nAnalog Output\n, \nVoltage\n, \nao0\n, and \n1 Sample (On\n   Demand)\n as before. To the left of this block, place a numeric constant, set\n   its value to 5, and wire it to the D/A block input.\n\n\n\n\n\n\nStart the VI and verify that all is well.\n\n\n\n\n\n\nPart C: Smoothing\n\n\nYou have probably noticed that the displayed temperature is not very steady.\nThis is due to undesired signals, or \nnoise\n, finding their way into our\nsystem.\n\n\nMuch of what we will do in subsequent Labs, will be devoted to minimizing the\neffect of noise. For now we will content ourselves with the most common\nresponse to unwanted variation in data: taking the average.\n\n\nBefore we start to improve the situation, let's try to get a\nquantitative idea of how bad it is. At the moment what we know is that\nthe displayed value jumps around a lot. Let's get a picture of those\njumps.\n\n\n\n\n\n\nStop the VI and go to the front panel. Right click to bring up the\n   \nControls\n palette, go to Graph \n\\(\\rightarrow\\)\n Waveform Chart. Place the\n   resulting chart in a convenient location on the front panel.\n\n\n\n\n\n\nUse \nFind Terminal\n or your own navigational skills to find the icon for the\n   \nWaveform Chart\n on the block diagram. Connect its input to the \nT\n output\n   of the formula node.\n\n\n\n\n\n\nReturn to the front panel and start the VI. The chart will provide a graphic\n   record of the variations in the temperature reading. Accumulate a few\n   seconds of readings, then stop the VI and take a screenshot of the front\n   panel.\n\n\n\n\n\n\nRight click to bring up the \nFunctions\n palette, select Sound and Vibration\n   \n\\(\\rightarrow\\)\n Data Evaluation \n\\(\\rightarrow\\)\n Probability and Statistics\n   \n\\(\\rightarrow\\)\n Statistics. Place the resulting block between the \nDAQ\n   Assistant\n block and the split signals block. When the \nConfigure\n   Statistics\n dialog appears, select \nArithmetic mean\n, then click \nOK\n.\n   Connect the output of the \nDAQ Assistant\n block to the \nSignals\n input of\n   the \nStatistics\n block. Connect the \nArithmetic Mean\n output to the input of\n   the split signals block.\n\n\n\n\n\n\nIf we were to run the VI at this point, we would get the same behavior as\n   before. This shouldn't be surprising, since the average of a single value\n   (the \n1 Sample\n from the A/D converter) is just the original value. What we\n   need to do is take the average of a large number of input values to produce\n   a single output.\n\n\n\n\n\n\nDouble click on the \nDAQ Assistant\n block to bring up the configuration\n   dialog. Under \nAcquisition Mode\n, change \n1 Sample (On Demand)\n to \nN\n   Samples\n. Set \nSamples To Read\n to 1000. Since the \nRate\n is 1000 samples\n   per second, this will give us 1000 values to average. Click \nOK\n.\n\n\n\n\n\n\nSince the process of gathering the 1000 samples now consumes one second, the\n   \nTime Delay\n block is no longer needed. Either delete it, or edit it and set\n   the delay to zero.\n\n\n\n\n\n\nReturn to the front panel and start the VI. The signal on the \nWaveform\n   Chart\n should be much smoother. In fact we might be willing to believe that\n   the variations that remain correspond to actual changes in temperature.\n   Screenshot to compare with the unsmoothed plot.\n\n\n\n\n\n\nStop the VI and save it in a persistent location.\n\n\n\n\n\n\nPart D: Measure Illumination\n\n\nHaving spent considerable effort developing a system for accurately measuring\ntemperature, we would like to leverage this technology into new market areas.\nSince this technology is based on the measurement of resistance, we can use it\nto measure any physical phenomenon for which we have a resistance based\ntransducer. A quick search of our parts kit turns up an ideal candidate for\nthis new venture: the CdS photocell.\n\n\n\n\n\n\nIn the circuit from the previous Part, replace the thermistor with your CdS\n   photocell.\n\n\n\n\n\n\nMake a copy of the VI you used in the previous part and give it an\n   appropriate name. Load this VI and go to the block diagram.\n\n\n\n\n\n\nBased on the information in the CdS photocell\n   \ndatasheet\n\n   , \nderive a formula which gives the illumination level (in Lux) in terms of\n   the resistance.\n\n\n\n\n\n\nReplace the formula in the formula node of the block diagram with the one\n   you derived in the previous step. On the front panel, change the label of\n   the temperature display from \nT\n to \nIllumination\n.\n\n\n\n\n\n\nSince light can vary much more rapidly than temperature, the \nWaveform\n   Chart\n display would be more useful with a faster update rate.  Edit the A/D\n   converter block and change the \nSamples To Read\n from 1000 to 100.\n\n\n\n\n\n\nStart the VI and verify that it works correctly.\n\n\n\n\n\n\nDetermine the illumination level under various conditions: under-shelf\n   light on or off, smart phone light on or off, photocell covered, or even\n   movement around the photocell, etc.\n If necessary, clear the plot by\n   right-clicking over the display window and selecting \"Clear Chart\".\n\n\n\n\n\n\nSet the VirtualBench function generator to produce a 1\u00a0Hz, 8\u00a0\n\\(V_{ pp }\\)\n\n   square wave. Use BNC clip leads to connect a red LED to the output.(polarity\n   is not important). The LED should be flashing at a rate of once per second.\n\n\n\n\n\n\nHold the LED over the photocell, pointing downward. Observe the resulting\n   waveform on the \nWaveform Chart\n display. Increase the distance between the\n   LED and the photocell and \nnote the maximum distance\n at which the signal\n   from the LED is still discernable in the displayed waveform.\n\n\n\n\n\n\nThis last step provides an example of an optical communication system where the\nsignal delivered to the LED is transfered over an optical channel to emerge\nsome distance away as the output of the photocell.  This is essentially the\nsame arrangement we used in Part C of Experiment 2.3, except we're using the\nphotocell instead of the photodiode.\n\n\nThe response of the photodiode is much faster than that of the photocell, but\nwe found that its output voltage was a distorted version of the optical input.\nThe reason for this: viewed as a \ncurrent\n source the photodiode's output is\nlinear in the input irradiance, while viewed as a \nvoltage\n source its output\nis logarithmic. We will deal with this next week by building a circuit which\nconverts this output current to a voltage.", 
            "title": "Improved Resistance Measurement"
        }, 
        {
            "location": "/lab4/experiment_4-2/#experiment-42", 
            "text": "", 
            "title": "Experiment 4.2"
        }, 
        {
            "location": "/lab4/experiment_4-2/#improved-resistance-measurement", 
            "text": "Let's apply our new Labview skills to the task of improving the\nresistance/temperature measurement system we built last week.", 
            "title": "Improved Resistance Measurement"
        }, 
        {
            "location": "/lab4/experiment_4-2/#part-a-measure-vs", 
            "text": "One shortcoming of last week's system is that we have to be careful to set the\npower supply voltage to the correct value. Since  \\(V_S\\)  appears in the formula\nfor temperature, if this voltage is incorrect, the temperature reading will be\nincorrect. A much better design would be to have Labview measure the actual\nvalue of  \\(V_S\\)  and use that value in the formula.    Restore the connections you had in Experiment 3.2 last week with the 0-6\u00a0V\n   output of the power supply (set to 5.00\u00a0V) connected to J1-3.  Check that\n   the circuit on your breadboard is still wired correctly. Load and run the VI\n   you saved last week and verify that it still produces the correct reading\n   for temperature. Vary the power supply voltage and observe that the\n   temperature reading changes in response.    Stop the VI. On your breadboard, add a wire to connect  \\(V_S\\)  to  ach4 , so\n   that your circuit looks like this:       We are now asking the A/D converter to read two different voltages\n   simultaneously. This is not a problem for the A/D converter, but it does\n   require  us  to figure out how Labview represents multiple simultaneous\n   samples.    The obvious way to handle this would be to simply add another A/D block and\n   set it to A/D Channel 4. If you try this, you will get a cryptic error\n   message to the effect that the device is already in use.  This is because\n   all of the channels are on the same card, and the first channel which is\n   opened has exclusive use of the device. Labview handles this by combing\n   multiple samples into a  vector , with one entry for each channel.    Double click the A/D block or select  Properties  from the menu. This will\n   bring up the  DAQ Assistant  dialog. Click on Add Channels button near the\n   top of the panel       Select  Voltage  from the popup menu, then select  ai4  from the list of\n   Supported Physical Channels. A new entry for ai4 should appear in the\n   channels list. Because channel 5 appears first on the list, it will be the\n   first element of the vector of samples and channel 4 will be the second. It\n   won't cause problems as long as we remember the order. Click  OK .    The block diagram looks the same as before, but now the wire is carrying two\n   separate values. Perhaps surprisingly, this fact does not change the\n   original operation of the VI. Subsequent blocks, expecting a single value,\n   simply take the first element of the vector. Since we left the original\n   signal ( \\(V_T\\) ) as the first element, everything to the right of the A/D\n   converter block works as it did before. Start the VI and verify that this is\n   the case.    Click on the wire segment coming out of the  data  terminal of the  DAQ\n   Assistant  block and press  Delete  to remove it. The remainder of the wire\n   will become broken, since there is now no input. From the  Functions \n   palette, select Express  \\(\\rightarrow\\)  Sig Manip  \\(\\rightarrow\\)  Split Signals.  Place the\n   resulting icon between the A/D converter output and the leftmost portion of\n   the broken wire, and click to release.    The split signals block is expandable to accomodate the number of signals in\n   a bundle. Place the cursor over the middle of the bottom edge and move it\n   around until it turns into a resize arrow. Drag the bottom edge down by one\n   increment. The resulting icon will look like a wishbone in a box.       Wire the left side of the split signals block to the A/D output. The upper\n    output is  \\(V_T\\)  (ach5).  Connect it to the broken  \\(V_T\\)  wire.    The lower output is  \\(V_S\\)  , which will replace the constant value of 5\n    currently connected to the upper input of the subtract block. Delete this\n    numeric constant block and wire the lower output of the split signal block\n    to its previous destination.    Start the VI and verify that the displayed temperature value is still\n    correct. Vary the value of  \\(V_S\\)  and verify that it remains correct.", 
            "title": "Part A: Measure Vs"
        }, 
        {
            "location": "/lab4/experiment_4-2/#part-b-generate-vs-in-labview", 
            "text": "Our temperature measurement system is now more accurate, but it's still very\nbulky since it requires the power supply in order to function. In the previous\nExperiment we were able to use Labview to generate constant voltages. If we\nwere to generate such a voltage and connect it in place of the power supply, we\nwould have a self-contained measurement system.   Stop the VI. On your breadboard, remove the wire connecting J1-3 to  \\(V_S\\) \n   and replace it with a wire connecting  dac0  to  \\(V_S\\) .        On the block diagram, move the bottom edge of the while loop down to create\n   room for additional components. In the resulting space add a  DAQ Assist \n   output block, selecting  Analog Output ,  Voltage ,  ao0 , and  1 Sample (On\n   Demand)  as before. To the left of this block, place a numeric constant, set\n   its value to 5, and wire it to the D/A block input.    Start the VI and verify that all is well.", 
            "title": "Part B: Generate \\(V\\)s in Labview"
        }, 
        {
            "location": "/lab4/experiment_4-2/#part-c-smoothing", 
            "text": "You have probably noticed that the displayed temperature is not very steady.\nThis is due to undesired signals, or  noise , finding their way into our\nsystem.  Much of what we will do in subsequent Labs, will be devoted to minimizing the\neffect of noise. For now we will content ourselves with the most common\nresponse to unwanted variation in data: taking the average.  Before we start to improve the situation, let's try to get a\nquantitative idea of how bad it is. At the moment what we know is that\nthe displayed value jumps around a lot. Let's get a picture of those\njumps.    Stop the VI and go to the front panel. Right click to bring up the\n    Controls  palette, go to Graph  \\(\\rightarrow\\)  Waveform Chart. Place the\n   resulting chart in a convenient location on the front panel.    Use  Find Terminal  or your own navigational skills to find the icon for the\n    Waveform Chart  on the block diagram. Connect its input to the  T  output\n   of the formula node.    Return to the front panel and start the VI. The chart will provide a graphic\n   record of the variations in the temperature reading. Accumulate a few\n   seconds of readings, then stop the VI and take a screenshot of the front\n   panel.    Right click to bring up the  Functions  palette, select Sound and Vibration\n    \\(\\rightarrow\\)  Data Evaluation  \\(\\rightarrow\\)  Probability and Statistics\n    \\(\\rightarrow\\)  Statistics. Place the resulting block between the  DAQ\n   Assistant  block and the split signals block. When the  Configure\n   Statistics  dialog appears, select  Arithmetic mean , then click  OK .\n   Connect the output of the  DAQ Assistant  block to the  Signals  input of\n   the  Statistics  block. Connect the  Arithmetic Mean  output to the input of\n   the split signals block.    If we were to run the VI at this point, we would get the same behavior as\n   before. This shouldn't be surprising, since the average of a single value\n   (the  1 Sample  from the A/D converter) is just the original value. What we\n   need to do is take the average of a large number of input values to produce\n   a single output.    Double click on the  DAQ Assistant  block to bring up the configuration\n   dialog. Under  Acquisition Mode , change  1 Sample (On Demand)  to  N\n   Samples . Set  Samples To Read  to 1000. Since the  Rate  is 1000 samples\n   per second, this will give us 1000 values to average. Click  OK .    Since the process of gathering the 1000 samples now consumes one second, the\n    Time Delay  block is no longer needed. Either delete it, or edit it and set\n   the delay to zero.    Return to the front panel and start the VI. The signal on the  Waveform\n   Chart  should be much smoother. In fact we might be willing to believe that\n   the variations that remain correspond to actual changes in temperature.\n   Screenshot to compare with the unsmoothed plot.    Stop the VI and save it in a persistent location.", 
            "title": "Part C: Smoothing"
        }, 
        {
            "location": "/lab4/experiment_4-2/#part-d-measure-illumination", 
            "text": "Having spent considerable effort developing a system for accurately measuring\ntemperature, we would like to leverage this technology into new market areas.\nSince this technology is based on the measurement of resistance, we can use it\nto measure any physical phenomenon for which we have a resistance based\ntransducer. A quick search of our parts kit turns up an ideal candidate for\nthis new venture: the CdS photocell.    In the circuit from the previous Part, replace the thermistor with your CdS\n   photocell.    Make a copy of the VI you used in the previous part and give it an\n   appropriate name. Load this VI and go to the block diagram.    Based on the information in the CdS photocell\n    datasheet \n   ,  derive a formula which gives the illumination level (in Lux) in terms of\n   the resistance.    Replace the formula in the formula node of the block diagram with the one\n   you derived in the previous step. On the front panel, change the label of\n   the temperature display from  T  to  Illumination .    Since light can vary much more rapidly than temperature, the  Waveform\n   Chart  display would be more useful with a faster update rate.  Edit the A/D\n   converter block and change the  Samples To Read  from 1000 to 100.    Start the VI and verify that it works correctly.    Determine the illumination level under various conditions: under-shelf\n   light on or off, smart phone light on or off, photocell covered, or even\n   movement around the photocell, etc.  If necessary, clear the plot by\n   right-clicking over the display window and selecting \"Clear Chart\".    Set the VirtualBench function generator to produce a 1\u00a0Hz, 8\u00a0 \\(V_{ pp }\\) \n   square wave. Use BNC clip leads to connect a red LED to the output.(polarity\n   is not important). The LED should be flashing at a rate of once per second.    Hold the LED over the photocell, pointing downward. Observe the resulting\n   waveform on the  Waveform Chart  display. Increase the distance between the\n   LED and the photocell and  note the maximum distance  at which the signal\n   from the LED is still discernable in the displayed waveform.    This last step provides an example of an optical communication system where the\nsignal delivered to the LED is transfered over an optical channel to emerge\nsome distance away as the output of the photocell.  This is essentially the\nsame arrangement we used in Part C of Experiment 2.3, except we're using the\nphotocell instead of the photodiode.  The response of the photodiode is much faster than that of the photocell, but\nwe found that its output voltage was a distorted version of the optical input.\nThe reason for this: viewed as a  current  source the photodiode's output is\nlinear in the input irradiance, while viewed as a  voltage  source its output\nis logarithmic. We will deal with this next week by building a circuit which\nconverts this output current to a voltage.", 
            "title": "Part D: Measure Illumination"
        }, 
        {
            "location": "/lab5/", 
            "text": "Lab 5: Op Amps I\n\n\nIntroduction\n\n\nExperiments\n\n\n\n\nExperiment 5.1: \nThe 741 Op-Amp\n\n\nExperiment 5.2: \nVoltage Amplifiers", 
            "title": "Home"
        }, 
        {
            "location": "/lab5/#lab-5-op-amps-i", 
            "text": "", 
            "title": "Lab 5: Op Amps I"
        }, 
        {
            "location": "/lab5/#introduction", 
            "text": "", 
            "title": "Introduction"
        }, 
        {
            "location": "/lab5/#experiments", 
            "text": "Experiment 5.1:  The 741 Op-Amp  Experiment 5.2:  Voltage Amplifiers", 
            "title": "Experiments"
        }, 
        {
            "location": "/lab5/introduction/", 
            "text": "Introduction\n\n\nNow that we are experts on Labview, able to process and display any signal we\ncan digitize, we need to become experts on what happens in the analog world\nbetween the transducer and the A/D converter. The process of effectively and\nefficiently connecting a transducer to the remainder of the measurement system\nis often referred to as \nsignal conditioning\n.  Some of the conditions which\nneed to be met before delivering a signal to the A/D converter include:\n\n\nIt must be a voltage.\n\n\nThe A/D converter only converts voltages. If we have a current, resistance, or\nother type of signal, it must be converted to a voltage before being digitized.\nWe did this last week with the thermistor and photocell, which respond to\nphysical variables by changes in resistance.\n\n\nIt should efficiently utilize the range of the A/D converter.\n\n\nThe range of A/D channels 0-3 is \n\\(\\pm 100 V\\)\n and that of channels 4-7 is \n\\(\\pm\n10 V\\)\n. All of the signals we have seen so far fit comfortably in one or both of\nthese ranges. However, the A/D conversion process is \nquantized\n. The resulting\ndigital value is represented as a 16-bit integer. This means that the\n\nresolution\n of a digitized measurement is \n\\(\\frac{1}{2^{16}}\\)\n of the total\nrange, i.e. the \n\\(200\u00a0V\\)\n or \n\\(20\u00a0V\\)\n range is divided into steps of \n\\(3.1\u00a0mV\\)\n or\n\n\\(0.31\u00a0mV\\)\n.  Any input or change in input smaller than this will go unnoticed.\n\n\nIt must have an appropriately limited bandwidth.\n\n\nIn Experiment 3.1 we saw that funny things can happen if the frequency of a\nsignal is higher than the rate at which we sample the signal. In fact, bad\nthings happen if any component of the signal being digitized has a frequency\ngreater than \nhalf\n the sampling rate.\n\n\nIt should contain a minimum amount of noise.\n\n\nIt's always better to eliminate noise at the source than to try to reduce its\neffect after it is already in the system.\n\n\nMeeting these conditions will be the goal of the next group of labs. We will\nbegin this week with a look at the \noperational amplifier\n, or \nop-amp\n for\nshort. In addition to simply amplifying signals, this versatile component can\nperform or assist in all of the other tasks in our signal conditioning list.\nHowever, since amplifying is (at least conceptually) simple, we'll start by\nlooking at amplifiers.\n\n\nAn amplifier is characterized by its \ngain\n, the ratio of its output to its\ninput. If the input and output are both voltages (the most common case) the\ngain is \n\\(A=\\frac{v_{out}}{v_{in}}\\)\n.  \n\\(A\\)\n can be either positive or negative.\nIf it is negative we say that we have an \ninverting\n amplifier.\n\n\nIf we want to make a point that the gain is a ratio of voltages we can call it\n\nvoltage gain\n and write it as \n\\(A_v\\)\n.  This is because there are other\nquantities besides voltage that we can amplify.  For example, we could have a\n\ncurrent amplifier\n where \n\\(i_{out} = A_i i_{in}\\)\n, with \n\\(A_i\\)\n being the\n\ncurrent gain\n.", 
            "title": "Introduction"
        }, 
        {
            "location": "/lab5/introduction/#introduction", 
            "text": "Now that we are experts on Labview, able to process and display any signal we\ncan digitize, we need to become experts on what happens in the analog world\nbetween the transducer and the A/D converter. The process of effectively and\nefficiently connecting a transducer to the remainder of the measurement system\nis often referred to as  signal conditioning .  Some of the conditions which\nneed to be met before delivering a signal to the A/D converter include:  It must be a voltage.  The A/D converter only converts voltages. If we have a current, resistance, or\nother type of signal, it must be converted to a voltage before being digitized.\nWe did this last week with the thermistor and photocell, which respond to\nphysical variables by changes in resistance.  It should efficiently utilize the range of the A/D converter.  The range of A/D channels 0-3 is  \\(\\pm 100 V\\)  and that of channels 4-7 is  \\(\\pm\n10 V\\) . All of the signals we have seen so far fit comfortably in one or both of\nthese ranges. However, the A/D conversion process is  quantized . The resulting\ndigital value is represented as a 16-bit integer. This means that the resolution  of a digitized measurement is  \\(\\frac{1}{2^{16}}\\)  of the total\nrange, i.e. the  \\(200\u00a0V\\)  or  \\(20\u00a0V\\)  range is divided into steps of  \\(3.1\u00a0mV\\)  or \\(0.31\u00a0mV\\) .  Any input or change in input smaller than this will go unnoticed.  It must have an appropriately limited bandwidth.  In Experiment 3.1 we saw that funny things can happen if the frequency of a\nsignal is higher than the rate at which we sample the signal. In fact, bad\nthings happen if any component of the signal being digitized has a frequency\ngreater than  half  the sampling rate.  It should contain a minimum amount of noise.  It's always better to eliminate noise at the source than to try to reduce its\neffect after it is already in the system.  Meeting these conditions will be the goal of the next group of labs. We will\nbegin this week with a look at the  operational amplifier , or  op-amp  for\nshort. In addition to simply amplifying signals, this versatile component can\nperform or assist in all of the other tasks in our signal conditioning list.\nHowever, since amplifying is (at least conceptually) simple, we'll start by\nlooking at amplifiers.  An amplifier is characterized by its  gain , the ratio of its output to its\ninput. If the input and output are both voltages (the most common case) the\ngain is  \\(A=\\frac{v_{out}}{v_{in}}\\) .   \\(A\\)  can be either positive or negative.\nIf it is negative we say that we have an  inverting  amplifier.  If we want to make a point that the gain is a ratio of voltages we can call it voltage gain  and write it as  \\(A_v\\) .  This is because there are other\nquantities besides voltage that we can amplify.  For example, we could have a current amplifier  where  \\(i_{out} = A_i i_{in}\\) , with  \\(A_i\\)  being the current gain .", 
            "title": "Introduction"
        }, 
        {
            "location": "/lab5/experiment_5-1/", 
            "text": "Experiment 5.1\n\n\nThe 741 Op-Amp\n\n\nComponents\n\n\n\n\n741 Op Amp\n\n\nResistors: 1-10\u00a0\n\\(\\Omega\\)\n, 1-10\u00a0\n\\(k\\Omega\\)\n\n\n\n\nThe 741 operational amplifier, or op-amp, comes in an 8-pin dual inline package\n(DIP) which looks like this\n\n\n\n\n\n\n\n\nIf you look closely at the package, you will find a notch at one end or a dot\nin one corner. This tells us how to find Pin 1: the dot is located next to\nPin\u00a01 and the notch is located between Pins 1 and 8. The rest of the pins are\nnumbered like this:\n\n\n\n\n\n\n\n\nPin 8 is not connected (NC). Pins 1 and 5 are used to eliminate the offset\nvoltage. We won't be using this feature this week, so don't connect anything to\nthese pins. The remaining pins give us the following circuit symbol for our\nop-amp:\n\n\n\n\n\n\n\n\nFor more information, see the \n741 data\nsheet\n.\n\n\nIn order to function, the op-amp must be connected to an external \npower\nsupply\n. Since we want to produce both positive and negative output voltages,\nwe need both positive and negative voltages for the power supply. These are\nlabeled \n\\(V_{CC+}\\)\n and \n\\(V_{CC-}\\)\n on the diagram. For a 741, the nominal values\nare \n\\(V_{CC+} =15\u00a0V\\)\n and \n\\(V_{CC-} = 15\u00a0V\\)\n.\n\n\nTo avoid clutter, we won't show the power supply terminals (pins 4 and 7) on\nany of the subsequent circuit diagrams. However, they must be connected or your\namplifier will not operate.\n\n\nNote that there is no ground terminal on the op-amp. The zero reference point\nis established by the external circuit and is not important to the op-amp\nitself.\n\n\nPart A: Powering up the Op-Amp\n\n\n\n\n\n\nIf you have not already done so, wire the bus strips on your breadboard (as\n   described in the \nwiring\n section) to provide positive\n   power, negative power and ground buses.\n\n\n\n\n\n\nPlug an op-amp into the breadboard so that it straddles the gap between the\n   top and bottom sections of the socket strip. If you have wired the power\n   buses as suggested above, Pin 1 should be to the left.\n\n\n\n\nWarning\n\n\nDo not try to unplug the op-amp with your thumb and forefinger. It's a\ngood way to end up with the op-amp plugged into your fingertip. Use the\npliers or \nIC puller\n from your toolkit.\n\n\n\n\n\n\n\n\nConnect Pin 4 (\n\\(V_{CC-}\\)\n ) to the negative power supply bus (-15\u00a0V). Connect\n   Pin 7 (\n\\(V_{CC+}\\)\n ) to the positive power supply bus (+15\u00a0V).\n\n\n\n\n\n\n\n\n\n\n\n\nWith the power supply off, adjust the \n\\(+25V\\)\n supply to \n\\(15V\\)\n and \n\\(-25V\\)\n to\n   \n\\(-15V\\)\n.\n\n\n\n\n\n\nConnect the negative power supply to the black banana jack on your\n   breadboard, the positive power supply to the red breadboard banana jack, and\n   the common (arrow) terminal to the green breadboard banana jack. The common\n   terminal must now be grounded, so use a fourth banana plug cable to connect\n   the common terminal to the ground terminal on the power supply dongle.\n\n\n\n\n\n\nPart B: Open-Loop Response\n\n\n!!! caution\n    The components we've used so far have been simple (only two terminals)\n    and fairly rugged (connecting a resistor \"backwards\" won't harm it).\n    The op-amp has four times as many pins, so it's easier to make a\n    mistake in wiring it. Unfortunately, it's also considerably more\n    delicate, so connecting it incorrectly can destroy it.\n\n    The moral: Always wire your circuit with the power turned off and check\n    your wiring carefully before turning the power on.\n\n\n\n\n\n\n\nWith the power turned off, wire the following circuit. Note that this is a\n   1000:1 voltage divider, so that a 1\u00a0V signal at \n\\(v_{in}\\)\n results in a 1\u00a0mV\n   signal at the input of the op-amp.\n\n\n\n\n\n\n\n\n\n\n\n\nIn the experiments below we will see the shortcomings of a real (as opposed\n   to an ideal) operational amplifier. \nAs you go through the experiments\n   below, explain in your report which experiments demonstrate the following:\n\n   (1) clipping, which limits the maximum amplitude of the output; (2)\n   slew-rate limitation, which limits the maximum slope of the output; (3)\n   offset, which gives a non-zero output for zero input.\n\n\n\n\n\n\nSet the function generator to produce a \n\\(2\u00a0V_{pp}\\)\n, 20\u00a0Hz sine wave.\n\n\n\n\n\n\nConnect the function generator output to \n\\(v_{in}\\)\n of the circuit above.\n   Connect \nCH1\n of the scope to \n\\(v_{in}\\)\n and \nCH2\n to \n\\(v_{out}\\)\n . Make sure\n   both channels of the scope are on \nDC\n.\n\n\n\n\n\n\nYou should see a badly distorted (clipped) waveform at \n\\(v_{out}\\)\n . If you\n   don't, try increasing the function generator output.\nTake a screenshot for\n   your lab report and note your vin value. Why is the output distorted?\n\n\n\n\n\n\nAdjust DC offset on the function generator until the waveform is roughly a\n   symmetrical square wave. \nNote the positive and negative peak values of\n   \n\\(v_{out}\\)\n. What is the DC offset value that was required to get symmetrical\n   output?\n\n\n\n\n\n\nConnect a 100\n\\(\\Omega\\)\n resistor from \n\\(v_{out}\\)\n to ground.  \nWhat happens to\n   the output signal?\n\n\n\n\n\n\nRemove the 100\n\\(\\Omega\\)\n resistor from the op-amp output. Set the function\n   generator output to square wave. \nNote the shape of the \n\\(v_{out}\\)\n waveform.\n   Is the output able to switch as fast as the fast-switching square wave\n   input?\n\n\n\n\n\n\nSet the function generator to produce a 1\u00a0kHz sine wave. Adjust the\n   amplitude and DC offset until the op-amp output is a 10\u00a0V\u00a0p-p unclipped sine\n   wave. \nNote the amplitude of the function generator output. Can you\n   estimate the open-loop gain of your opamp? Is it consistent with the\n   specifications in the data sheet? (Look up the large signal voltage gain).\n\n\n\n\n\n\nWhen we reduce the overall gain with feedback, some of these (e.g.  offset)\n    are reduced significantly, and we get an output which is an amplified\n    version of the input. However, other limits (such as maximum output)\n    appear.", 
            "title": "The 741 Op-Amp"
        }, 
        {
            "location": "/lab5/experiment_5-1/#experiment-51", 
            "text": "", 
            "title": "Experiment 5.1"
        }, 
        {
            "location": "/lab5/experiment_5-1/#the-741-op-amp", 
            "text": "", 
            "title": "The 741 Op-Amp"
        }, 
        {
            "location": "/lab5/experiment_5-1/#components", 
            "text": "741 Op Amp  Resistors: 1-10\u00a0 \\(\\Omega\\) , 1-10\u00a0 \\(k\\Omega\\)   The 741 operational amplifier, or op-amp, comes in an 8-pin dual inline package\n(DIP) which looks like this     If you look closely at the package, you will find a notch at one end or a dot\nin one corner. This tells us how to find Pin 1: the dot is located next to\nPin\u00a01 and the notch is located between Pins 1 and 8. The rest of the pins are\nnumbered like this:     Pin 8 is not connected (NC). Pins 1 and 5 are used to eliminate the offset\nvoltage. We won't be using this feature this week, so don't connect anything to\nthese pins. The remaining pins give us the following circuit symbol for our\nop-amp:     For more information, see the  741 data\nsheet .  In order to function, the op-amp must be connected to an external  power\nsupply . Since we want to produce both positive and negative output voltages,\nwe need both positive and negative voltages for the power supply. These are\nlabeled  \\(V_{CC+}\\)  and  \\(V_{CC-}\\)  on the diagram. For a 741, the nominal values\nare  \\(V_{CC+} =15\u00a0V\\)  and  \\(V_{CC-} = 15\u00a0V\\) .  To avoid clutter, we won't show the power supply terminals (pins 4 and 7) on\nany of the subsequent circuit diagrams. However, they must be connected or your\namplifier will not operate.  Note that there is no ground terminal on the op-amp. The zero reference point\nis established by the external circuit and is not important to the op-amp\nitself.", 
            "title": "Components"
        }, 
        {
            "location": "/lab5/experiment_5-1/#part-a-powering-up-the-op-amp", 
            "text": "If you have not already done so, wire the bus strips on your breadboard (as\n   described in the  wiring  section) to provide positive\n   power, negative power and ground buses.    Plug an op-amp into the breadboard so that it straddles the gap between the\n   top and bottom sections of the socket strip. If you have wired the power\n   buses as suggested above, Pin 1 should be to the left.   Warning  Do not try to unplug the op-amp with your thumb and forefinger. It's a\ngood way to end up with the op-amp plugged into your fingertip. Use the\npliers or  IC puller  from your toolkit.     Connect Pin 4 ( \\(V_{CC-}\\)  ) to the negative power supply bus (-15\u00a0V). Connect\n   Pin 7 ( \\(V_{CC+}\\)  ) to the positive power supply bus (+15\u00a0V).       With the power supply off, adjust the  \\(+25V\\)  supply to  \\(15V\\)  and  \\(-25V\\)  to\n    \\(-15V\\) .    Connect the negative power supply to the black banana jack on your\n   breadboard, the positive power supply to the red breadboard banana jack, and\n   the common (arrow) terminal to the green breadboard banana jack. The common\n   terminal must now be grounded, so use a fourth banana plug cable to connect\n   the common terminal to the ground terminal on the power supply dongle.", 
            "title": "Part A: Powering up the Op-Amp"
        }, 
        {
            "location": "/lab5/experiment_5-1/#part-b-open-loop-response", 
            "text": "!!! caution\n    The components we've used so far have been simple (only two terminals)\n    and fairly rugged (connecting a resistor \"backwards\" won't harm it).\n    The op-amp has four times as many pins, so it's easier to make a\n    mistake in wiring it. Unfortunately, it's also considerably more\n    delicate, so connecting it incorrectly can destroy it.\n\n    The moral: Always wire your circuit with the power turned off and check\n    your wiring carefully before turning the power on.    With the power turned off, wire the following circuit. Note that this is a\n   1000:1 voltage divider, so that a 1\u00a0V signal at  \\(v_{in}\\)  results in a 1\u00a0mV\n   signal at the input of the op-amp.       In the experiments below we will see the shortcomings of a real (as opposed\n   to an ideal) operational amplifier.  As you go through the experiments\n   below, explain in your report which experiments demonstrate the following: \n   (1) clipping, which limits the maximum amplitude of the output; (2)\n   slew-rate limitation, which limits the maximum slope of the output; (3)\n   offset, which gives a non-zero output for zero input.    Set the function generator to produce a  \\(2\u00a0V_{pp}\\) , 20\u00a0Hz sine wave.    Connect the function generator output to  \\(v_{in}\\)  of the circuit above.\n   Connect  CH1  of the scope to  \\(v_{in}\\)  and  CH2  to  \\(v_{out}\\)  . Make sure\n   both channels of the scope are on  DC .    You should see a badly distorted (clipped) waveform at  \\(v_{out}\\)  . If you\n   don't, try increasing the function generator output. Take a screenshot for\n   your lab report and note your vin value. Why is the output distorted?    Adjust DC offset on the function generator until the waveform is roughly a\n   symmetrical square wave.  Note the positive and negative peak values of\n    \\(v_{out}\\) . What is the DC offset value that was required to get symmetrical\n   output?    Connect a 100 \\(\\Omega\\)  resistor from  \\(v_{out}\\)  to ground.   What happens to\n   the output signal?    Remove the 100 \\(\\Omega\\)  resistor from the op-amp output. Set the function\n   generator output to square wave.  Note the shape of the  \\(v_{out}\\)  waveform.\n   Is the output able to switch as fast as the fast-switching square wave\n   input?    Set the function generator to produce a 1\u00a0kHz sine wave. Adjust the\n   amplitude and DC offset until the op-amp output is a 10\u00a0V\u00a0p-p unclipped sine\n   wave.  Note the amplitude of the function generator output. Can you\n   estimate the open-loop gain of your opamp? Is it consistent with the\n   specifications in the data sheet? (Look up the large signal voltage gain).    When we reduce the overall gain with feedback, some of these (e.g.  offset)\n    are reduced significantly, and we get an output which is an amplified\n    version of the input. However, other limits (such as maximum output)\n    appear.", 
            "title": "Part B: Open-Loop Response"
        }, 
        {
            "location": "/lab5/experiment_5-2/", 
            "text": "Experiment 5.2\n\n\nVoltage Amplifiers\n\n\nComponents\n\n\n\n\n741 Op Amp\n\n\nResistors: 1-100\u00a0\n\\(\\Omega\\)\n, 2-10\u00a0\n\\(k\\Omega\\)\n, 1-100\u00a0\n\\(k\\Omega\\)\n\n\n\n\nAs we saw in the previous experiment, the op-amp isn't very useful in an\n\"open-loop\" configuration (i.e. without feedback). The most common\nconfiguration for op-amp circuits is the \ninverting amplifier\n where the output\nis an amplified and inverted version of the input (i.e.  \n\\(A\\)\n is negative). From\nthis starting point we can create a number of different input-output\nrelationships, including sum, difference, and non-inverted gain.\n\n\nPart A: The Basic Inverting Amplifier\n\n\n\n\n\n\nWire the following circuit using 10\u00a0k\n\\(\\Omega\\)\n resistors for both \n\\(R_1\\)\n and\n   \n\\(R_F\\)\n.\n\n\n\n\n\n\n\n\n\n\n\n\nSet the function generator to produce a 1\u00a0\n\\(V_{pp}\\)\n, 100\u00a0Hz sine wave.\n   \nMeasure the voltage gain\n, \n\\(A_v = \\frac{V_{out}}{V_{in}}\\)\n using the\n   oscilloscope. Note that the output is inverted with respect to the input.\n\n\n\n\n\n\nReplace \n\\(R_F\\)\n with a 100\u00a0k\n\\(\\Omega\\)\n resistor.  \nMeasure the gain.\n\n\n\n\n\n\nIncrease the input amplitude until output clipping occurs. \nWhat is the\n   clipping level? Is it the same as in Exp. 5.1?\n\n\n\n\n\n\nReduce the input amplitude till the output is 20\u00a0\n\\(V_{pp}\\)\n. Then increase the\n   frequency until the output amplitude drops to 10\u00a0\n\\(V_{pp}\\)\n. You should see a\n   triangular output waveform. This is because there is a limit to the maximum\n   rate at which the output voltage can change, called the \nslew rate.\n\n\n\n\n\n\nSet the input to triangle and square wave and \ncomment on how the output\n   changes.\n\n\n\n\n\n\nReset the function generator for a 100\u00a0Hz sine wave and reduce the amplitude\n   to produce a 1\u00a0\n\\(V_{pp}\\)\n output from the op amp.\n\n\n\n\n\n\nAgain increase the frequency until the output is 0.7\u00a0\n\\(V_{pp}\\)\n. Observe that\n   the output is still sinusoidal. \nNote the frequency.\n This is called the\n   cutoff frequency or \nbandwidth\n of the amplifier.\n\n\n\n\n\n\nPart B: Summing Amplifier\n\n\nThere are a number of applications where it is useful to produce the sum, or\nmore generally the weighted sum, of two or more signals. One example is the\nmixer system in a recording or broadcast studio where various sources\n(microphones, audio files, etc.) are combined to produce the final mix for the\ntrack or program.\n\n\nThe inverting amplifier configuration we used makes this very easy to do, just\nadd another resistor to the inverting (-) input of the op amp:\n\n\n\n\n\n\n\n\nA quick analysis shows that \n\\(v_{out} = -(\\frac{R_F}{R_1}v_1 +\n\\frac{R_F}{R_2}v_2)\\)\n , i.e.  the output is a weighted sum of the inputs. The\nkey is to notice that the current flowing in \n\\(R_F\\)\n must be (by KCL) equal to\nthe sum of the currents in \n\\(R_1\\)\n and \n\\(R_2\\)\n . For this reason, the node of an op\namp circuit which is connected to the inverting input is sometimes referred to\nas the \nsumming junction\n. This summation can be extended to any number of\ninputs.\n\n\n\n\n\n\nRather than just add two arbitrary signals together and watch the result on\n   the oscilloscope, let's do something a bit more entertaining: add two\n   signals together and listen to them. From our observations in Part A of\n   Experiment 2.2 and Part A of this Experiment, we would expect to have\n   trouble driving the loudspeaker with the output of the op-amp.  Fortunately,\n   we have a more suitable acoustic output transducer: the earpiece of the\n   telephone handset. The telephone earpiece is also very easy to connect to:\n   just plug it into J1-7 and wire to the appropriate pins on the interface\n   module connector strip. Notice that, unlike the microphone, neither of the\n   two earpiece terminals is automatically grounded. Be sure to ground one and\n   connect the other to \n\\(v_{out}\\)\n.\n\n\n\n\n\n\nFor our two inputs, we will use the function generator for \n\\(v_1\\)\n and the\n   dynamic microphone for \n\\(v_2\\)\n . The earpiece produces a comfortably loud\n   output with a signal of about 1\u00a0V\u00a0p-p. This is a level easy to produce with\n   the function generator, so we will choose a gain of 1 from \n\\(v_1\\)\n to \n\\(v_out\\)\n\n   . This means we must choose \n\\(R_1=R_F\\)\n , but says nothing about the actual\n   value. From past experience, 100\u00a0k\u03a9 is a good choice. \nChoose the value of\n   \n\\(R_2\\)\n required to give a 1\u00a0V\u00a0p-p output when speaking into the microphone in\n   a normal tone of voice.\n (Hint: Plug in your microphone into J1-4, and view\n   pin 4 on your oscilloscope to see the approximate peak-to-peak output when\n   you speak into the microphone. Then calculate the gain required to get 1-V\n   output. Size R2 based on this).\n\n\n\n\n\n\nBuild the circuit using the component values you determined in the previous\n   step. Connect \n\\(v_1\\)\n , \n\\(v_2\\)\n , and \n\\(v_{out}\\)\n appropriately (function\n   generator, microphone, handset). Also connect \n\\(v_{out}\\)\n to the oscilloscope.\n   When the circuit is completed, speak into the microphone at a normal\n   speaking level and \nverify that the output \n\\(v_{mic}\\)\n is approximately\n   1\u00a0V\u00a0p-p.\n\n\n\n\n\n\nSet the function generator to produce a 440\u00a0Hz sine wave (musical note A).\n   Adjust the amplitude to produce a comfortable listening level in the handset\n   earpiece. While listening to the earpiece and watching the oscilloscope, hum\n   the note A. \nTake a screenshot and describe what happens on the scope when\n   you are in tune and when you are slightly out of tune with the function\n   generator.\n If the range of your voice does not encompass A440, try tuning\n   the function generator down an octave to 220\u00a0Hz.\n\n\n\n\n\n\nPart C: Non-Inverting Amplifier\n\n\nSo far all of the op-amp circuits we have examined have been \ninverting\n, i.e.\nthe polarity of the output is inverted with respect to the input. This doesn't\nhave to be the case, as the following circuit shows:\n\n\n\n\n\n\n\n\nThis is an example of the basic \nnon-inverting\n op-amp configuration. A simple\nanalysis shows that \n\\(v_{out}=(1+\\frac{R_2}{R_1})v_{in}\\)\n (with no minus sign).\nThis circuit has a couple of useful characteristics. Most obvious is that it\ndoesn't invert. Another is that the input impedance is extremely high. One\npotential disadvantage is that the minimum value of gain is unity.\n\n\n\n\n\n\nUsing another 741 op amp, wire the non-inverting amplifier circuit.  Let\n   \n\\(R_1\\)\n be 1\u00a0\n\\(k\\Omega\\)\n. Choose \n\\(R_2\\)\n to give a gain of 2.\n\n\n\n\n\n\nConnect a 1\u00a0\n\\(V_{pp}\\)\n 1\u00a0kHz sine wave to \n\\(v_{in}\\)\n . Observe \n\\(v_{in}\\)\n and\n   \n\\(v_{out}\\)\n on the oscilloscope.\n\n\n\n\n\n\nTake a screenshot. What is the actual gain? Is it in non-inverting?\n\n\n\n\n\n\nPart D: Difference Amplifier\n\n\nWhat if we want the difference, rather than the sum of two signals? We could\ncombine an inverting amplifier with a summing amplifier to negate one of the\nsignals before forming a sum, but this would require two op-amps. A simpler\ncircuit results from combining an inverting and a non-inverting configuration\non the same op-amp, like this:\n\n\n\n\n\n\n\n\nFor arbitrary values of the resistors, we get \n\n\n\\[\nv_{out}=-\\frac{R_2}{R_1}v_1+\\frac{R_4}{R_3+R_4}\\frac{R_1+R_2}{R_1}v_2\n\\]\nwhich doesn't seem very useful. However, if we let \n\\(R_3=R_1\\)\n and \n\\(R_4=R_2\\)\n,\nthen we have \n\n\n\\[\nv_{out}=\\frac{R_2}{R_1}(v_2-v_1)\n\\]\ni.e. a \ndifference amplifier\n.\n\n\n\n\n\n\nWire the above circuit, using 10\u00a0\n\\(k\\Omega\\)\n for all four resistors.\n\n\n\n\n\n\nUsing the function generator for \n\\(v_1\\)\n and the 0-6\u00a0V power supply for \n\\(v_2\\)\n,\n   \ntake a screenshot and verify that \n\\(v_{out}\\)\n is indeed the difference of\n   \n\\(v_1\\)\n and \n\\(v_2\\)\n with the expected sign.", 
            "title": "Voltage Amplifiers"
        }, 
        {
            "location": "/lab5/experiment_5-2/#experiment-52", 
            "text": "", 
            "title": "Experiment 5.2"
        }, 
        {
            "location": "/lab5/experiment_5-2/#voltage-amplifiers", 
            "text": "", 
            "title": "Voltage Amplifiers"
        }, 
        {
            "location": "/lab5/experiment_5-2/#components", 
            "text": "741 Op Amp  Resistors: 1-100\u00a0 \\(\\Omega\\) , 2-10\u00a0 \\(k\\Omega\\) , 1-100\u00a0 \\(k\\Omega\\)   As we saw in the previous experiment, the op-amp isn't very useful in an\n\"open-loop\" configuration (i.e. without feedback). The most common\nconfiguration for op-amp circuits is the  inverting amplifier  where the output\nis an amplified and inverted version of the input (i.e.   \\(A\\)  is negative). From\nthis starting point we can create a number of different input-output\nrelationships, including sum, difference, and non-inverted gain.", 
            "title": "Components"
        }, 
        {
            "location": "/lab5/experiment_5-2/#part-a-the-basic-inverting-amplifier", 
            "text": "Wire the following circuit using 10\u00a0k \\(\\Omega\\)  resistors for both  \\(R_1\\)  and\n    \\(R_F\\) .       Set the function generator to produce a 1\u00a0 \\(V_{pp}\\) , 100\u00a0Hz sine wave.\n    Measure the voltage gain ,  \\(A_v = \\frac{V_{out}}{V_{in}}\\)  using the\n   oscilloscope. Note that the output is inverted with respect to the input.    Replace  \\(R_F\\)  with a 100\u00a0k \\(\\Omega\\)  resistor.   Measure the gain.    Increase the input amplitude until output clipping occurs.  What is the\n   clipping level? Is it the same as in Exp. 5.1?    Reduce the input amplitude till the output is 20\u00a0 \\(V_{pp}\\) . Then increase the\n   frequency until the output amplitude drops to 10\u00a0 \\(V_{pp}\\) . You should see a\n   triangular output waveform. This is because there is a limit to the maximum\n   rate at which the output voltage can change, called the  slew rate.    Set the input to triangle and square wave and  comment on how the output\n   changes.    Reset the function generator for a 100\u00a0Hz sine wave and reduce the amplitude\n   to produce a 1\u00a0 \\(V_{pp}\\)  output from the op amp.    Again increase the frequency until the output is 0.7\u00a0 \\(V_{pp}\\) . Observe that\n   the output is still sinusoidal.  Note the frequency.  This is called the\n   cutoff frequency or  bandwidth  of the amplifier.", 
            "title": "Part A: The Basic Inverting Amplifier"
        }, 
        {
            "location": "/lab5/experiment_5-2/#part-b-summing-amplifier", 
            "text": "There are a number of applications where it is useful to produce the sum, or\nmore generally the weighted sum, of two or more signals. One example is the\nmixer system in a recording or broadcast studio where various sources\n(microphones, audio files, etc.) are combined to produce the final mix for the\ntrack or program.  The inverting amplifier configuration we used makes this very easy to do, just\nadd another resistor to the inverting (-) input of the op amp:     A quick analysis shows that  \\(v_{out} = -(\\frac{R_F}{R_1}v_1 +\n\\frac{R_F}{R_2}v_2)\\)  , i.e.  the output is a weighted sum of the inputs. The\nkey is to notice that the current flowing in  \\(R_F\\)  must be (by KCL) equal to\nthe sum of the currents in  \\(R_1\\)  and  \\(R_2\\)  . For this reason, the node of an op\namp circuit which is connected to the inverting input is sometimes referred to\nas the  summing junction . This summation can be extended to any number of\ninputs.    Rather than just add two arbitrary signals together and watch the result on\n   the oscilloscope, let's do something a bit more entertaining: add two\n   signals together and listen to them. From our observations in Part A of\n   Experiment 2.2 and Part A of this Experiment, we would expect to have\n   trouble driving the loudspeaker with the output of the op-amp.  Fortunately,\n   we have a more suitable acoustic output transducer: the earpiece of the\n   telephone handset. The telephone earpiece is also very easy to connect to:\n   just plug it into J1-7 and wire to the appropriate pins on the interface\n   module connector strip. Notice that, unlike the microphone, neither of the\n   two earpiece terminals is automatically grounded. Be sure to ground one and\n   connect the other to  \\(v_{out}\\) .    For our two inputs, we will use the function generator for  \\(v_1\\)  and the\n   dynamic microphone for  \\(v_2\\)  . The earpiece produces a comfortably loud\n   output with a signal of about 1\u00a0V\u00a0p-p. This is a level easy to produce with\n   the function generator, so we will choose a gain of 1 from  \\(v_1\\)  to  \\(v_out\\) \n   . This means we must choose  \\(R_1=R_F\\)  , but says nothing about the actual\n   value. From past experience, 100\u00a0k\u03a9 is a good choice.  Choose the value of\n    \\(R_2\\)  required to give a 1\u00a0V\u00a0p-p output when speaking into the microphone in\n   a normal tone of voice.  (Hint: Plug in your microphone into J1-4, and view\n   pin 4 on your oscilloscope to see the approximate peak-to-peak output when\n   you speak into the microphone. Then calculate the gain required to get 1-V\n   output. Size R2 based on this).    Build the circuit using the component values you determined in the previous\n   step. Connect  \\(v_1\\)  ,  \\(v_2\\)  , and  \\(v_{out}\\)  appropriately (function\n   generator, microphone, handset). Also connect  \\(v_{out}\\)  to the oscilloscope.\n   When the circuit is completed, speak into the microphone at a normal\n   speaking level and  verify that the output  \\(v_{mic}\\)  is approximately\n   1\u00a0V\u00a0p-p.    Set the function generator to produce a 440\u00a0Hz sine wave (musical note A).\n   Adjust the amplitude to produce a comfortable listening level in the handset\n   earpiece. While listening to the earpiece and watching the oscilloscope, hum\n   the note A.  Take a screenshot and describe what happens on the scope when\n   you are in tune and when you are slightly out of tune with the function\n   generator.  If the range of your voice does not encompass A440, try tuning\n   the function generator down an octave to 220\u00a0Hz.", 
            "title": "Part B: Summing Amplifier"
        }, 
        {
            "location": "/lab5/experiment_5-2/#part-c-non-inverting-amplifier", 
            "text": "So far all of the op-amp circuits we have examined have been  inverting , i.e.\nthe polarity of the output is inverted with respect to the input. This doesn't\nhave to be the case, as the following circuit shows:     This is an example of the basic  non-inverting  op-amp configuration. A simple\nanalysis shows that  \\(v_{out}=(1+\\frac{R_2}{R_1})v_{in}\\)  (with no minus sign).\nThis circuit has a couple of useful characteristics. Most obvious is that it\ndoesn't invert. Another is that the input impedance is extremely high. One\npotential disadvantage is that the minimum value of gain is unity.    Using another 741 op amp, wire the non-inverting amplifier circuit.  Let\n    \\(R_1\\)  be 1\u00a0 \\(k\\Omega\\) . Choose  \\(R_2\\)  to give a gain of 2.    Connect a 1\u00a0 \\(V_{pp}\\)  1\u00a0kHz sine wave to  \\(v_{in}\\)  . Observe  \\(v_{in}\\)  and\n    \\(v_{out}\\)  on the oscilloscope.    Take a screenshot. What is the actual gain? Is it in non-inverting?", 
            "title": "Part C: Non-Inverting Amplifier"
        }, 
        {
            "location": "/lab5/experiment_5-2/#part-d-difference-amplifier", 
            "text": "What if we want the difference, rather than the sum of two signals? We could\ncombine an inverting amplifier with a summing amplifier to negate one of the\nsignals before forming a sum, but this would require two op-amps. A simpler\ncircuit results from combining an inverting and a non-inverting configuration\non the same op-amp, like this:     For arbitrary values of the resistors, we get   \\[\nv_{out}=-\\frac{R_2}{R_1}v_1+\\frac{R_4}{R_3+R_4}\\frac{R_1+R_2}{R_1}v_2\n\\] which doesn't seem very useful. However, if we let  \\(R_3=R_1\\)  and  \\(R_4=R_2\\) ,\nthen we have   \\[\nv_{out}=\\frac{R_2}{R_1}(v_2-v_1)\n\\] i.e. a  difference amplifier .    Wire the above circuit, using 10\u00a0 \\(k\\Omega\\)  for all four resistors.    Using the function generator for  \\(v_1\\)  and the 0-6\u00a0V power supply for  \\(v_2\\) ,\n    take a screenshot and verify that  \\(v_{out}\\)  is indeed the difference of\n    \\(v_1\\)  and  \\(v_2\\)  with the expected sign.", 
            "title": "Part D: Difference Amplifier"
        }, 
        {
            "location": "/lab6/", 
            "text": "Lab 6: Op Amps II\n\n\nIntroduction\n\n\nOrganizing Your Breadboard\n\n\nLast week we had some generic guidelines on using your breadboard to build op\namp circuits. This week we need to consider the organization of the breadboard\nat a higher level.\n\n\nWe will be reusing parts of the transducer amplifier for a later lab, so build it in a\ncorner of the breadboard and don't take it apart at the end of lab.\n\n\nExperiments\n\n\n\n\nExperiment 6.1: \nTransducer Amplifiers\n\n\nExperiment 6.2: \nFrequency Response", 
            "title": "Home"
        }, 
        {
            "location": "/lab6/#lab-6-op-amps-ii", 
            "text": "", 
            "title": "Lab 6: Op Amps II"
        }, 
        {
            "location": "/lab6/#introduction", 
            "text": "", 
            "title": "Introduction"
        }, 
        {
            "location": "/lab6/#organizing-your-breadboard", 
            "text": "Last week we had some generic guidelines on using your breadboard to build op\namp circuits. This week we need to consider the organization of the breadboard\nat a higher level.  We will be reusing parts of the transducer amplifier for a later lab, so build it in a\ncorner of the breadboard and don't take it apart at the end of lab.", 
            "title": "Organizing Your Breadboard"
        }, 
        {
            "location": "/lab6/#experiments", 
            "text": "Experiment 6.1:  Transducer Amplifiers  Experiment 6.2:  Frequency Response", 
            "title": "Experiments"
        }, 
        {
            "location": "/lab6/introduction/", 
            "text": "ELEC 243 Lab\n\n\n\n\nIntroduction\n\n\nLast week we looked at several op-amp circuits for amplifying voltages.\nWhile there are many things you can do with a voltage amplifier, there\nare also many things that you can't. In particular, the optoelectronic\ntransducers we studied in Lab 2 have nonlinear behavior in terms of\ntheir voltages, but very linear behavior in terms of current. To\neffectively utilize these, we will need amplifiers which accept and\ndeliver currents rather than voltages.", 
            "title": "Introduction"
        }, 
        {
            "location": "/lab6/introduction/#introduction", 
            "text": "Last week we looked at several op-amp circuits for amplifying voltages.\nWhile there are many things you can do with a voltage amplifier, there\nare also many things that you can't. In particular, the optoelectronic\ntransducers we studied in Lab 2 have nonlinear behavior in terms of\ntheir voltages, but very linear behavior in terms of current. To\neffectively utilize these, we will need amplifiers which accept and\ndeliver currents rather than voltages.", 
            "title": "Introduction"
        }, 
        {
            "location": "/lab6/experiment_6-1/", 
            "text": "Experiment 6.1\n\n\nTransducer Amplifiers\n\n\nEquipment\n\n\n\n\nTest board\n\n\nRed LED\n\n\nPhotodiode\n\n\nLego pieces (2) 1x2 beams, (2) 2x4 pieces\n\n\n3 LM741 opamps\n\n\n100\n\\(\\Omega\\)\n, 10\n\\(\\Omega\\)\n, 1.5\n\\(k\\Omega\\)\n, 2 100\n\\(k\\Omega\\)\n, 2.2\n\\(k\\Omega\\)\n\n\n\n\nTransducers are devices that convert a physical quantity into an electric\nsignal, or vice versa. Photodiodes and LEDs belong to the class of transducers.\nWe tried connecting these devices directly to our measuring instruments in\nExperiments 1.2 and 2.4 with less than ideal results. The reason for this is\ntheir performance is based on current rather than voltage or resistance. We\ndon't have current sources available to drive the LED and our current measuring\nequipment is not sensitive enough to produce useful readings from the\nphotodiode.\n\n\nIn this Experiment, we will use op-amps to produce a pair of hybrid amplifiers.\nOne is an amplifier which accepts a current as an input and produces a voltage\nas an output. Quantitatively we can express this as \n\\(v_{out}=R_mi_{in}\\)\n where\n\n\\(R_m\\)\n is the gain of the amplifier. \n\\(R_m\\)\n is called the \nmutual resistance\n or\nmore commonly \ntransresistance\n (short for \"transfer resistance\"). Similarly a\n\ntransconductance\n amplifier will convert an input voltage \n\\(v_{in}\\)\n to an\noutput current \n\\(i_{out}\\)\n.\n\n\nThere is a variety of applications for either a transresistance amplified\nphotodiode or a transconductance amplified LED. A further set of applications\nis opened up by combining the two into an \nemitter-detector pair\n. We saw one\nsuch application in Lab 2 where we built a miniature optical communication\nsystem using an LED as a transmitter and a photodiode as the receiver. In a\ncommunication system we want to maximize the achievable distance between\ntransmitter and receiver and our main concern about the space between them is\nthat it cause as little attenuation to the transmitted signal as possible.\n\n\nToday we will provide additional circuitry to improve the linearity and\nsensitivity of the resulting emitter-detector pair.\n\n\nPart A: An Emitter-Detector Pair\n\n\nFor a communication system, portability of the transmitter and receiver is\nimportant. However, many of the measurement systems based on optical\nemitter-detector pairs require a precisely fixed distance between the\ntransmitter and receiver. Our first step will be to build the mechanical\nstructure to house our emitter and detector.\n\n\nWe will use Legos to create our mechanical structure (see figure below for final structure). Use the 1x2 beam to mount the photodiodes and LEDs. We will be using\na high-brightness red LED in this experiment.\n\n\n\n\n\n\nPress the LED into the hole in a 1x2 beam, and the photodiode into another 1x2 beam.\n\n\n\n\nTip\n\n\nIf the photodiode is a bit too small to fit into the Lego hole, cut a\nstrip of paper and wrap around the photodiode before inserting into the\nblock.\n\n\n\n\n\n\n\n\nFor convenience we will mount the entire assembly on the breadboard, so use\n   a 2x4 plate as the base and use 1x2 plates for\n   vertical height.  \n\n\n\n\n\n\nBend the leads of the photodiode and LED downward so they will fit into the breadboard. Position the assembly in the center of the breadboard with the\n   LED on the left and plug in the leads.\n    \n\n    \n\n    \n\n\n\n\n\n\nWe now have an optical path, of length approximately equal to three times the\nbasic Lego pitch, with an LED at one end and a photodiode at the other. This\nwill be our basic apparatus for transmission measurements.\n\n\nPart B: Photodiode Amplifier\n\n\nThe inverting op-amp circuit works by taking the current that flows into the\n\"virtual ground\" at the inverting input and forcing it to flow in the feedback\nresistor. Since the voltage across \n\\(R_F\\)\n is equal to \n\\(R_F I_F\\)\n , the output\nvoltage (on the other terminal of \n\\(R_F\\)\n ) is proportional to the current\nflowing into the virtual ground. What if instead of this current originating\nfrom the voltage across \n\\(R_1\\)\n , it instead came directly from a current source?\nWell, the output voltage would still be proportional to it: \n\\(v_{out} = -R_F I_F\n= -R_F I_{in}\\)\n I.e. we have an amplifier which accepts a current as an input\nand produces a voltage as an output.  This is called a \ntransresistance\namplifier\n. (Since a resistance converts its current to a voltage (\n\\(v=Ri\\)\n ), a\ntransresistance converts a current in one part of the circuit to a voltage in\nanother.)\n\n\n\n\n\n\n\n\n\n\n\n\nWire up the photodiode amplifier shown above near the photodiode.  Leave\n   enough space to the right of this circuit for an additional op-amp.\n\n\n\n\n\n\nTurn on the under-shelf florescent lamp and monitor \n\\(v_{out}\\)\n with the\n   oscilloscope. You should see a DC value with a significant amount of 120\u00a0Hz\n   ripple. \nTake a screenshot.\n\n\n\n\n\n\nPart C: LED Driver\n\n\nIf we drive the LED directly from the function generator (as we did in Lab 2)\nthe resulting optical signal is badly distorted since the LED only conducts on\nthe positive half-cycle of the waveform. We can fix this problem by using the\n\nOFFSET\n control to add a DC \nbias\n to the signal. If the bias is greater than\nthe amplitude of the AC component, the signal is always positive and the LED\nwill always conduct. However, there is still some distortion due to the\nexponential i-v relationship of the diode. Since the brightness of the LED is\nproportional to current and our signal sources put out voltages, we need a\nvoltage-in, current-out or \ntransconductance\n amplifier.\n\n\nSome background before constructing: the simplest way to get a transconductance\namplifier out of our basic inverting amplifier configuration is to replace the\nfeedback resistor with the element whose current we wish to control, in this\ncase the LED:\n\n\n\n\n\n\n\n\nTo get the offset we need to avoid clipping, we can add a second input and\nconnect it to one of the power supplies. In this case, to forward bias the\ndiode, we must connect it to the negative (-15\u00a0V) supply.\n\n\n\n\n\n\n\n\nThirdly, we would like to be able to monitor the current in the LED. To do this\nwe simply add a current sensing resistor in series.\n\n\nPutting this all together we get the following:\n\n\n\n\n\n\n\n\n\n\n\n\nWire the circuit as shown above to the left of the LED in the\n   emitter-detector pair.\n\n\n\n\n\n\nSet the function generator to produce a 1\u00a0V\u00a0p-p, 1\u00a0Hz square wave and\n   connect it to \n\\(v_{drive}\\)\n . The LED should get brighter and dimmer, but\n   never be completely extinguished.\n\n\n\n\n\n\nWhile observing both \n\\(v_1\\)\n and the photodiode amplifier output on the\n   oscilloscope, \ndetermine the maximum value \n\\(v_{drive}\\)\n can have before\n   distortion occurs.\n\n\n\n\n\n\nAnalyze the above circuit and \ndetermine the relationship between\n   \n\\(v_{drive}\\)\n and \n\\(i_{LED}\\)\n. What is the quiescent current in the LED (i.e.\n   with no input signal)?\n\n\n\n\n\n\nPart D: More Gain for the Photodiode\n\n\nWith nothing but air between the LED and the photodiode, our photodiode\namplifier gives a satisfactory output. However if we want to be able to measure\nobjects with high optical density, we will need more sensitivity. Since the\noutput voltage is determined by the product of the photodiode current and\n\n\\(R_F\\)\n, we can get more output for the same input simply by increasing \n\\(R_F\\)\n.\n\n\nWe could increase the gain by a factor of 100, by replacing \n\\(R_F\\)\n with 10\u00a0M\u03a9;\nhowever, there are a couple of reasons not to do it that way. One is that\nputting too much gain in a single stage can lead to problems, including reduced\nbandwidth. Another is that this would amplify the DC component of the signal\n(due to ambient light) by the same amount as our (much smaller) LED signal.\nThis could cause the amplifier to saturate (clip), causing complete loss of the\ndesired signal. Adding a second stage, with a DC blocking capacitor between the\nstages, eliminates both of these objections.\n\n\n\n\n\n\n\n\n\n\n\n\nAdd additional components to your existing photodiode amplifier to produce\n   the circuit above. The additional circuitry should be placed directly to the\n   right of the original photodiode amplifier that you built in Part B.\n\n\n\n\n\n\nObserve \n\\(v_{photo2}\\)\n with the oscilloscope. You should see the 120\u00a0Hz ripple\n   due to the ambient flourescent lighting. With the scope set to DC, there\n   should be no significant offset voltage.\n\n\n\n\n\n\nIgnoring the effect of the capacitor, what is the total transresistance\n   gain ( \n\\(v_{photo2}/i_d\\)\n ) for this circuit?\n Don't disassemble the\n   photodiode amplifier or LED driver circuits. We will be using them in future\n   labs.", 
            "title": "Transducer Amplifiers"
        }, 
        {
            "location": "/lab6/experiment_6-1/#experiment-61", 
            "text": "", 
            "title": "Experiment 6.1"
        }, 
        {
            "location": "/lab6/experiment_6-1/#transducer-amplifiers", 
            "text": "", 
            "title": "Transducer Amplifiers"
        }, 
        {
            "location": "/lab6/experiment_6-1/#equipment", 
            "text": "Test board  Red LED  Photodiode  Lego pieces (2) 1x2 beams, (2) 2x4 pieces  3 LM741 opamps  100 \\(\\Omega\\) , 10 \\(\\Omega\\) , 1.5 \\(k\\Omega\\) , 2 100 \\(k\\Omega\\) , 2.2 \\(k\\Omega\\)   Transducers are devices that convert a physical quantity into an electric\nsignal, or vice versa. Photodiodes and LEDs belong to the class of transducers.\nWe tried connecting these devices directly to our measuring instruments in\nExperiments 1.2 and 2.4 with less than ideal results. The reason for this is\ntheir performance is based on current rather than voltage or resistance. We\ndon't have current sources available to drive the LED and our current measuring\nequipment is not sensitive enough to produce useful readings from the\nphotodiode.  In this Experiment, we will use op-amps to produce a pair of hybrid amplifiers.\nOne is an amplifier which accepts a current as an input and produces a voltage\nas an output. Quantitatively we can express this as  \\(v_{out}=R_mi_{in}\\)  where \\(R_m\\)  is the gain of the amplifier.  \\(R_m\\)  is called the  mutual resistance  or\nmore commonly  transresistance  (short for \"transfer resistance\"). Similarly a transconductance  amplifier will convert an input voltage  \\(v_{in}\\)  to an\noutput current  \\(i_{out}\\) .  There is a variety of applications for either a transresistance amplified\nphotodiode or a transconductance amplified LED. A further set of applications\nis opened up by combining the two into an  emitter-detector pair . We saw one\nsuch application in Lab 2 where we built a miniature optical communication\nsystem using an LED as a transmitter and a photodiode as the receiver. In a\ncommunication system we want to maximize the achievable distance between\ntransmitter and receiver and our main concern about the space between them is\nthat it cause as little attenuation to the transmitted signal as possible.  Today we will provide additional circuitry to improve the linearity and\nsensitivity of the resulting emitter-detector pair.", 
            "title": "Equipment"
        }, 
        {
            "location": "/lab6/experiment_6-1/#part-a-an-emitter-detector-pair", 
            "text": "For a communication system, portability of the transmitter and receiver is\nimportant. However, many of the measurement systems based on optical\nemitter-detector pairs require a precisely fixed distance between the\ntransmitter and receiver. Our first step will be to build the mechanical\nstructure to house our emitter and detector.  We will use Legos to create our mechanical structure (see figure below for final structure). Use the 1x2 beam to mount the photodiodes and LEDs. We will be using\na high-brightness red LED in this experiment.    Press the LED into the hole in a 1x2 beam, and the photodiode into another 1x2 beam.   Tip  If the photodiode is a bit too small to fit into the Lego hole, cut a\nstrip of paper and wrap around the photodiode before inserting into the\nblock.     For convenience we will mount the entire assembly on the breadboard, so use\n   a 2x4 plate as the base and use 1x2 plates for\n   vertical height.      Bend the leads of the photodiode and LED downward so they will fit into the breadboard. Position the assembly in the center of the breadboard with the\n   LED on the left and plug in the leads.\n     \n     \n        We now have an optical path, of length approximately equal to three times the\nbasic Lego pitch, with an LED at one end and a photodiode at the other. This\nwill be our basic apparatus for transmission measurements.", 
            "title": "Part A: An Emitter-Detector Pair"
        }, 
        {
            "location": "/lab6/experiment_6-1/#part-b-photodiode-amplifier", 
            "text": "The inverting op-amp circuit works by taking the current that flows into the\n\"virtual ground\" at the inverting input and forcing it to flow in the feedback\nresistor. Since the voltage across  \\(R_F\\)  is equal to  \\(R_F I_F\\)  , the output\nvoltage (on the other terminal of  \\(R_F\\)  ) is proportional to the current\nflowing into the virtual ground. What if instead of this current originating\nfrom the voltage across  \\(R_1\\)  , it instead came directly from a current source?\nWell, the output voltage would still be proportional to it:  \\(v_{out} = -R_F I_F\n= -R_F I_{in}\\)  I.e. we have an amplifier which accepts a current as an input\nand produces a voltage as an output.  This is called a  transresistance\namplifier . (Since a resistance converts its current to a voltage ( \\(v=Ri\\)  ), a\ntransresistance converts a current in one part of the circuit to a voltage in\nanother.)       Wire up the photodiode amplifier shown above near the photodiode.  Leave\n   enough space to the right of this circuit for an additional op-amp.    Turn on the under-shelf florescent lamp and monitor  \\(v_{out}\\)  with the\n   oscilloscope. You should see a DC value with a significant amount of 120\u00a0Hz\n   ripple.  Take a screenshot.", 
            "title": "Part B: Photodiode Amplifier"
        }, 
        {
            "location": "/lab6/experiment_6-1/#part-c-led-driver", 
            "text": "If we drive the LED directly from the function generator (as we did in Lab 2)\nthe resulting optical signal is badly distorted since the LED only conducts on\nthe positive half-cycle of the waveform. We can fix this problem by using the OFFSET  control to add a DC  bias  to the signal. If the bias is greater than\nthe amplitude of the AC component, the signal is always positive and the LED\nwill always conduct. However, there is still some distortion due to the\nexponential i-v relationship of the diode. Since the brightness of the LED is\nproportional to current and our signal sources put out voltages, we need a\nvoltage-in, current-out or  transconductance  amplifier.  Some background before constructing: the simplest way to get a transconductance\namplifier out of our basic inverting amplifier configuration is to replace the\nfeedback resistor with the element whose current we wish to control, in this\ncase the LED:     To get the offset we need to avoid clipping, we can add a second input and\nconnect it to one of the power supplies. In this case, to forward bias the\ndiode, we must connect it to the negative (-15\u00a0V) supply.     Thirdly, we would like to be able to monitor the current in the LED. To do this\nwe simply add a current sensing resistor in series.  Putting this all together we get the following:       Wire the circuit as shown above to the left of the LED in the\n   emitter-detector pair.    Set the function generator to produce a 1\u00a0V\u00a0p-p, 1\u00a0Hz square wave and\n   connect it to  \\(v_{drive}\\)  . The LED should get brighter and dimmer, but\n   never be completely extinguished.    While observing both  \\(v_1\\)  and the photodiode amplifier output on the\n   oscilloscope,  determine the maximum value  \\(v_{drive}\\)  can have before\n   distortion occurs.    Analyze the above circuit and  determine the relationship between\n    \\(v_{drive}\\)  and  \\(i_{LED}\\) . What is the quiescent current in the LED (i.e.\n   with no input signal)?", 
            "title": "Part C: LED Driver"
        }, 
        {
            "location": "/lab6/experiment_6-1/#part-d-more-gain-for-the-photodiode", 
            "text": "With nothing but air between the LED and the photodiode, our photodiode\namplifier gives a satisfactory output. However if we want to be able to measure\nobjects with high optical density, we will need more sensitivity. Since the\noutput voltage is determined by the product of the photodiode current and \\(R_F\\) , we can get more output for the same input simply by increasing  \\(R_F\\) .  We could increase the gain by a factor of 100, by replacing  \\(R_F\\)  with 10\u00a0M\u03a9;\nhowever, there are a couple of reasons not to do it that way. One is that\nputting too much gain in a single stage can lead to problems, including reduced\nbandwidth. Another is that this would amplify the DC component of the signal\n(due to ambient light) by the same amount as our (much smaller) LED signal.\nThis could cause the amplifier to saturate (clip), causing complete loss of the\ndesired signal. Adding a second stage, with a DC blocking capacitor between the\nstages, eliminates both of these objections.       Add additional components to your existing photodiode amplifier to produce\n   the circuit above. The additional circuitry should be placed directly to the\n   right of the original photodiode amplifier that you built in Part B.    Observe  \\(v_{photo2}\\)  with the oscilloscope. You should see the 120\u00a0Hz ripple\n   due to the ambient flourescent lighting. With the scope set to DC, there\n   should be no significant offset voltage.    Ignoring the effect of the capacitor, what is the total transresistance\n   gain (  \\(v_{photo2}/i_d\\)  ) for this circuit?  Don't disassemble the\n   photodiode amplifier or LED driver circuits. We will be using them in future\n   labs.", 
            "title": "Part D: More Gain for the Photodiode"
        }, 
        {
            "location": "/lab6/experiment_6-2/", 
            "text": "Experiment 6.2\n\n\nFrequency Response\n\n\nEquipment\n\n\n\n\nTest board\n\n\n1k\n\\(\\Omega\\)\n and 100\n\\(\\Omega\\)\n resistors\n\n\n0.1 \n\\(\\mu F\\)\n capacitor\n\n\nLM741 opamp\n\n\nLab computer or laptop\n\n\n\n\nPart A: Measuring Frequency Response\n\n\nIn this part of the lab you will use look at the frequency response of an op\namp circuit called an integrator (which does exactly that...  integrates the\ninput).\n\n\n\n\n\n\nBuild the following circuit. For the input, connect a 1 Vp-p sinusoidal\n   signal from your VirtualBench function generator.\n\n\n\n\n\n\n\n\n\n\n\n\nRecord the peak-to-peak output voltage values for the following frequencies:\n   10Hz, 100Hz, 500 Hz, 800 Hz, 1kHz, 1.5kHz, 2kHz, 5kHz, 10kHz, 50kHz.\n\n\n\n\n\n\nAt the same above frequencies, record the phase shift between input and\n   output.\n\n\n\n\n\n\nIn VirtualBench, use your vertical cursors to make this phase measurement:\n   pick a salient feature of your signal (i.e., peak, or zero crossing of\n   signal) and measure the time difference delta-t between when your input and\n   output signal exhibit that salient feature. If you use cursors, the\n   difference between cursor points should appear below the oscilloscope\n   window. Make sure you zoom in each time you increase frequency, to ensure\n   similar accuracy of values. Phase is \n\\((\\Delta-t)*2*pi/T\\)\n, where \n\\(T\\)\n is the\n   period.\n\n\n\n\n\n\nPlot Gain(dB) vs. Frequency (Hz) in Matlab.\n\n\n\n\nTip\n\n\n\\(\\text{gain (db) } = 20*log_{10}(V_{out} / V_{in})\\)\n\n\n\n\n\n\n\n\nAt what frequency does the gain begin to drop?\n\n\n\n\n\n\nThis is called the cutoff frequency, \n\\(f_c\\)\n, \ndoes it roughly equal\n   \n\\(f_c=1/(2 * \\pi * R_5 * C_2)\\)\n?\n\n\n\n\n\n\nPart B: Circuit Simulation\n\n\nThe remainder of the lab can be done from a computer (lab computer or personal\nlaptop). We will be using circuit simulation software called LTSpice. Spice\nstands for (Simulation Program with Integrated Circuit Emphasis).\n\n\n\n\n\n\nDownload LTspice from linear.com there are Windows and Mac versions\n   available. Please note that the instructions below are specifically for\n   Windows.\n\n\n\n\n\n\nClick on New Schematic and create the same circuit you built on your\n   breadboard shown above.\n\n\n\n\n\n\nPlace components by going to the Edit menu or shortcut buttons.\n\n\n\n\n\n\nThe opamp is found under Edit \n\\(\\rightarrow\\)\n Components \n\\(\\rightarrow\\)\n\n   [OpAmps] \n\\(\\rightarrow\\)\n opamp.  The voltage source is found under Edit\n   \n\\(\\rightarrow\\)\n Components \n\\(\\rightarrow\\)\n voltage.  Connect components using\n   Edit \n\\(\\rightarrow\\)\n Wire (or the shortcut button F3).\n\n\n\n\n\n\nOther convenient shortcuts are:\n\n\n\n\nCtrl-R for Rotate\n\n\nDelete, or F5 for Delete\n\n\nF6 for Copy\n\n\nF7 for Move\n\n\nF8 for Drag\n\n\nEsc to exit out of a mode\n\n\n\n\n\n\n\n\nThe component opamp is just a symbol of an opamp and in order for Spice to\n   see the model, you need to place a Spice Directive calling the location:\n   Edit \n\\(\\rightarrow\\)\n Spice Directive. Then enter \n.lib opamp.sub\n\n\n\n\n\n\nSet the voltage source to AC by right-clicking it and selecting Advanced.\n   Set AC amplitude to 1.\n\n\n\n\n\n\nEnter in \n\\(R\\)\n and \n\\(C\\)\n values by right-clicking these components.\n\n\n\n\n\n\nOptional label nets (i.e., wires) by right-clicking on nets.\n\n\n\n\n\n\nPerform an AC analysis. An AC analysis will evaluate the gain\n    (\n\\(V_{out}\\)\n/\n\\(V_{in}\\)\n) and phase over a specified range of frequencies and\n    plot it.\n\n\n\n\n\n\nClick on the Running Man icon and select AC analysis (or go to Simulate\n    \n\\(\\rightarrow\\)\n Run).\n\n\n\n\n\n\nUse a decade frequency sweep with at least 10 points per decade over the\n    range of 1 Hz to 10 MHz. This will appear as a Spice directive on your\n    schematic as\n\n\n.ac dec 10 1 10meg\n\n\n\n\n\n\nClick on the \n\\(V_{out}\\)\n node for gain and phase plots to appear. You will\n    notice that the gain is displayed in dB and phase in degrees. The x-axis\n    will be logarithmic, i.e., the step size is 10n, where n is 0,1,2 Each of\n    the steps is called a decade (dec).\n\n\n\n\n\n\nTake a screenshot of your plots.\n\n\n\n\n\n\nWhat is the gain at low frequencies? What is the cutoff frequency?  What\n    is the slope of the gain with respect to frequency for high frequencies\n    (express in terms of dB/dec)? Do these values match what you measured on\n    your breadboard?\n\n\n\n\n\n\nWhat is the phase for very low frequencies? At 0dB? And for very high\n    frequencies? Can you explain why?", 
            "title": "Frequency Response"
        }, 
        {
            "location": "/lab6/experiment_6-2/#experiment-62", 
            "text": "", 
            "title": "Experiment 6.2"
        }, 
        {
            "location": "/lab6/experiment_6-2/#frequency-response", 
            "text": "", 
            "title": "Frequency Response"
        }, 
        {
            "location": "/lab6/experiment_6-2/#equipment", 
            "text": "Test board  1k \\(\\Omega\\)  and 100 \\(\\Omega\\)  resistors  0.1  \\(\\mu F\\)  capacitor  LM741 opamp  Lab computer or laptop", 
            "title": "Equipment"
        }, 
        {
            "location": "/lab6/experiment_6-2/#part-a-measuring-frequency-response", 
            "text": "In this part of the lab you will use look at the frequency response of an op\namp circuit called an integrator (which does exactly that...  integrates the\ninput).    Build the following circuit. For the input, connect a 1 Vp-p sinusoidal\n   signal from your VirtualBench function generator.       Record the peak-to-peak output voltage values for the following frequencies:\n   10Hz, 100Hz, 500 Hz, 800 Hz, 1kHz, 1.5kHz, 2kHz, 5kHz, 10kHz, 50kHz.    At the same above frequencies, record the phase shift between input and\n   output.    In VirtualBench, use your vertical cursors to make this phase measurement:\n   pick a salient feature of your signal (i.e., peak, or zero crossing of\n   signal) and measure the time difference delta-t between when your input and\n   output signal exhibit that salient feature. If you use cursors, the\n   difference between cursor points should appear below the oscilloscope\n   window. Make sure you zoom in each time you increase frequency, to ensure\n   similar accuracy of values. Phase is  \\((\\Delta-t)*2*pi/T\\) , where  \\(T\\)  is the\n   period.    Plot Gain(dB) vs. Frequency (Hz) in Matlab.   Tip  \\(\\text{gain (db) } = 20*log_{10}(V_{out} / V_{in})\\)     At what frequency does the gain begin to drop?    This is called the cutoff frequency,  \\(f_c\\) ,  does it roughly equal\n    \\(f_c=1/(2 * \\pi * R_5 * C_2)\\) ?", 
            "title": "Part A: Measuring Frequency Response"
        }, 
        {
            "location": "/lab6/experiment_6-2/#part-b-circuit-simulation", 
            "text": "The remainder of the lab can be done from a computer (lab computer or personal\nlaptop). We will be using circuit simulation software called LTSpice. Spice\nstands for (Simulation Program with Integrated Circuit Emphasis).    Download LTspice from linear.com there are Windows and Mac versions\n   available. Please note that the instructions below are specifically for\n   Windows.    Click on New Schematic and create the same circuit you built on your\n   breadboard shown above.    Place components by going to the Edit menu or shortcut buttons.    The opamp is found under Edit  \\(\\rightarrow\\)  Components  \\(\\rightarrow\\) \n   [OpAmps]  \\(\\rightarrow\\)  opamp.  The voltage source is found under Edit\n    \\(\\rightarrow\\)  Components  \\(\\rightarrow\\)  voltage.  Connect components using\n   Edit  \\(\\rightarrow\\)  Wire (or the shortcut button F3).    Other convenient shortcuts are:   Ctrl-R for Rotate  Delete, or F5 for Delete  F6 for Copy  F7 for Move  F8 for Drag  Esc to exit out of a mode     The component opamp is just a symbol of an opamp and in order for Spice to\n   see the model, you need to place a Spice Directive calling the location:\n   Edit  \\(\\rightarrow\\)  Spice Directive. Then enter  .lib opamp.sub    Set the voltage source to AC by right-clicking it and selecting Advanced.\n   Set AC amplitude to 1.    Enter in  \\(R\\)  and  \\(C\\)  values by right-clicking these components.    Optional label nets (i.e., wires) by right-clicking on nets.    Perform an AC analysis. An AC analysis will evaluate the gain\n    ( \\(V_{out}\\) / \\(V_{in}\\) ) and phase over a specified range of frequencies and\n    plot it.    Click on the Running Man icon and select AC analysis (or go to Simulate\n     \\(\\rightarrow\\)  Run).    Use a decade frequency sweep with at least 10 points per decade over the\n    range of 1 Hz to 10 MHz. This will appear as a Spice directive on your\n    schematic as  .ac dec 10 1 10meg    Click on the  \\(V_{out}\\)  node for gain and phase plots to appear. You will\n    notice that the gain is displayed in dB and phase in degrees. The x-axis\n    will be logarithmic, i.e., the step size is 10n, where n is 0,1,2 Each of\n    the steps is called a decade (dec).    Take a screenshot of your plots.    What is the gain at low frequencies? What is the cutoff frequency?  What\n    is the slope of the gain with respect to frequency for high frequencies\n    (express in terms of dB/dec)? Do these values match what you measured on\n    your breadboard?    What is the phase for very low frequencies? At 0dB? And for very high\n    frequencies? Can you explain why?", 
            "title": "Part B: Circuit Simulation"
        }, 
        {
            "location": "/lab7/", 
            "text": "Lab 7: Digital Signal Processing\n\n\nIntroduction\n\n\nExperiments\n\n\n\n\nExperiment 7.1: \nSampling and Quantization\n\n\nExperiment 7.2: \nRecording a Reference Signal\n\n\nExperiment 7.3: \nSignal Processing in Matlab", 
            "title": "Home"
        }, 
        {
            "location": "/lab7/#lab-7-digital-signal-processing", 
            "text": "", 
            "title": "Lab 7: Digital Signal Processing"
        }, 
        {
            "location": "/lab7/#introduction", 
            "text": "", 
            "title": "Introduction"
        }, 
        {
            "location": "/lab7/#experiments", 
            "text": "Experiment 7.1:  Sampling and Quantization  Experiment 7.2:  Recording a Reference Signal  Experiment 7.3:  Signal Processing in Matlab", 
            "title": "Experiments"
        }, 
        {
            "location": "/lab7/introduction/", 
            "text": "Introduction\n\n\nVoltages in a circuit (so-called analog signals) are continuous, whereas the\nsequence of numbers in the computer with which we are representing it is\ndiscrete, both in time and in value. In other words, by sampling the analog\nsignal at regular intervals we ignore any changes that may take place between\nthese sampling times, and by representing the value by a number with a limited\nnumber of digits we introduce an error between the actual value and its\nrepresentation. In the first part of this lab we will observe sampling effects\nusing Labview.  Next, we will look at how we might use the computer alongside\n(or instead of) op amps as part of an overall signal processing system. We will\nlook at some processing functions (e.g. filtering) which are direct \"analogs\"\nof analog processing, as well as some that would be difficult or impossible to\nimplement in an analog circuit. For this, we will use Matlab to do most of our\nsignal processing.\n\n\nMatlab is a more conventional programming language, and it allows us to\ncircumvent the real time constraint by using \"batch\" processing: we record a\nsignal on disk, process it (taking as long as we need), write the resulting\noutput to disk, and then play back the output signal. This has the additional\nadvantage of allowing us to perform different processing functions on exactly\nthe same input (reference) signal and compare the results.\n\n\nWe will also look a bit further into the process of filter design and\nimplementation. Then we will try generating signals digitally, as well as\nfiltering them. Finally, we'll look at some applications that are more\nelaborate than simply filtering signals.", 
            "title": "Introduction"
        }, 
        {
            "location": "/lab7/introduction/#introduction", 
            "text": "Voltages in a circuit (so-called analog signals) are continuous, whereas the\nsequence of numbers in the computer with which we are representing it is\ndiscrete, both in time and in value. In other words, by sampling the analog\nsignal at regular intervals we ignore any changes that may take place between\nthese sampling times, and by representing the value by a number with a limited\nnumber of digits we introduce an error between the actual value and its\nrepresentation. In the first part of this lab we will observe sampling effects\nusing Labview.  Next, we will look at how we might use the computer alongside\n(or instead of) op amps as part of an overall signal processing system. We will\nlook at some processing functions (e.g. filtering) which are direct \"analogs\"\nof analog processing, as well as some that would be difficult or impossible to\nimplement in an analog circuit. For this, we will use Matlab to do most of our\nsignal processing.  Matlab is a more conventional programming language, and it allows us to\ncircumvent the real time constraint by using \"batch\" processing: we record a\nsignal on disk, process it (taking as long as we need), write the resulting\noutput to disk, and then play back the output signal. This has the additional\nadvantage of allowing us to perform different processing functions on exactly\nthe same input (reference) signal and compare the results.  We will also look a bit further into the process of filter design and\nimplementation. Then we will try generating signals digitally, as well as\nfiltering them. Finally, we'll look at some applications that are more\nelaborate than simply filtering signals.", 
            "title": "Introduction"
        }, 
        {
            "location": "/lab7/experiment_7-1/", 
            "text": "Experiment 7.1\n\n\nSampling and Quantization\n\n\nEquipment\n\n\n\n\nTest board\n\n\nLab PC\n\n\n\n\nPart A: Sample Rate and Aliasing\n\n\nWhen we convert a continuous, analog signal to a digital signal (digitize it),\nwe \nsample\n its value at regular intervals. The sequence of numbers that\nresults represents the original signal at these sample points, but ignores what\ngoes on between them. If the signal is sufficiently well-behaved (i.e. it\nsatisfies the Nyquist criterion and contains no energy at frequencies greater\nthan half the sampling frequency), then these sample points are enough to\nrepresent the original signal exactly. But if the original signal contains a\nfrequency greater than half the sampling rate, that frequency will be \naliased\n\nto a lower frequency.  \n\n\nLet's start by looking at what sampling looks like in the time domain.\n\n\n\n\n\n\nConnect the function generator output and CH1 of the scope to A/D input4\n   (pin 46 on the interface board socket strip).\n\n\n\n\n\n\nSet the function generator to produce a \n\\(5 V_{ pp }\\)\n, 300 Hz sine wave.\n\n\n\n\n\n\nDownload the \nspectrum analyzer\n and\n   open in Labview. Set \"number of samples per channel\" and \"rate\" to 10000.\n   Set \"averaging mode\" to RMS averaging. Start the program by pressing the run\n   button or by pressing CTRL-R with the cursor over the window.\n\n\n\n\nNote\n\n\nHere's what we have:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRight-click on the black box indicating waveform type above the Signal\n   waveform, which says Dev1/ai4. Select Common Plots and select the 2nd option\n   (points only). You should see about three cycles of a sine wave displayed in\n   the waveform graph. Unlike last week's display, the samples are shown as\n   individual dots, rather than connected line segments.\n\n\n\n\n\n\n\n\n\n\n\n\nSlowly increase the frequency to 2 kHz and note how the waveform becomes\n   less clear.\n\n\n\n\n\n\nAt 2 kHz, press \nSTOP\n. You should see either several lines or several\n   overlapping sine waves. This is an illusion caused by the fact that only a\n   few samples of each cycle are being taken. \nHow many samples are being\n   taken per cycle? Take a screenshot.\n\n\n\n\n\n\nTo see the actual underlying waveform more clearly, switch the display to a\n    continuous line style from the \"Common Plots\" submenu.\n\n\n\n\n\n\nRestart the program and continue increasing the frequency of the function\n    generator until you reach 5 kHz, stopping at several points along the way\n    to examine the waveform. When the function generator frequency is exactly\n    half the sampling frequency the samples will alternate the same positive\n    and negative values. (This may be easier to see by switching to the\n    vertical line plot display style.)\n\n\n\n\n\n\nAdd a fundamental frequency indicator (Frequency.vi) to your block diagram\n    to display the frequency numerically.\n\n\n\n\n\n\nContinue increasing the function generator frequency. Notice that as you\n    approach 10 kHz, you begin to see a well-defined sine wave which\n    \ndecreases\n in frequency as you increase the function generator frequency.\n    This is the \nalias\n of the generator frequency. At exactly 10 kHz you\n    should get a zero frequency sine wave.\n\n\n\n\n\n\nContinue increasing the function generator frequency past 10 kHz. Note that\n    you once again have a sine wave that increases in frequency as the input\n    frequency increases. \nDo the input frequency and displayed frequency\n    match? Pick two input frequencies to comment on.\n\n\n\n\n\n\nExplain the concept of aliasing, folding, and the Nyquist criterion, and\n    relate to your results.\n\n\n\n\n\n\nTry square and triangle waves of various frequencies and comment on what\n    happens to them as the frequency changes.\n\n\n\n\n\n\nPress the \nSTOP\n button and exit the waveform view program.\n\n\n\n\n\n\nPart B: Amplitude Quantization\n\n\nOnce the input signal has been sampled, it must be represented as a number in\nthe computer. Since there are a limited number of bits available to encode the\nnumber (12 in this case), there are only a limited number of values that can be\nexactly represented. Values in between two successive encodings must be rounded\nor truncated to one or the other. This process of forcing the continuous input\nrange into a discrete set of values is called \nquantization\n.\n\n\n\n\n\n\nLet's add a quantizer to our spectrum analyzer VI. Add the following blocks\n   and connections to your VI. See the note below for the locations of function\n   blocks.\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nAll function blocks are found under Express \n\\(\\rightarrow\\)\n Arithmetic\nand Comparison \n\\(\\rightarrow\\)\n Express Numeric. The above function blocks\ninclude Divide, Multiply, Round to Nearest (indicated by square\nbrackets) and Scale by Power of 2 (\n\\(\\alpha 2^n\\)\n).\n\n\n\n\n\n\n\n\nConnect the data signal to the leftmost Divide block, so that the full block\n   diagram looks like this:\n\n\n\n\n\n\n\n\n\n\n\n\nOn the left hand side of the spectrum analyzer are two controls which\n   control the quantization of the sampled signal. The \nfull scale\n control\n   sets the maximum allowed bits of the signal. The number of bits control sets\n   the \nnumber of bits\n that may be represented within the allowed range. Set\n   the \nfull scale\n to 12 and experiment with higher and lower \nnumber of\n   bits\n. \nWhat do you notice in the waveform display?\n\n\n\n\n\n\nChange the input to the PS/PSD block to be the quantized signal instead of\n   the signal coming from the DAQ cable. \nHow does the spectrum change with\n   quantization?\n\n\n\n\n\n\nChange the input to the PS/PSD block back to be the signal coming from the\n   DAQ.\n\n\n\n\n\n\nStop and exit the VI.", 
            "title": "Sampling and Quantization"
        }, 
        {
            "location": "/lab7/experiment_7-1/#experiment-71", 
            "text": "", 
            "title": "Experiment 7.1"
        }, 
        {
            "location": "/lab7/experiment_7-1/#sampling-and-quantization", 
            "text": "", 
            "title": "Sampling and Quantization"
        }, 
        {
            "location": "/lab7/experiment_7-1/#equipment", 
            "text": "Test board  Lab PC", 
            "title": "Equipment"
        }, 
        {
            "location": "/lab7/experiment_7-1/#part-a-sample-rate-and-aliasing", 
            "text": "When we convert a continuous, analog signal to a digital signal (digitize it),\nwe  sample  its value at regular intervals. The sequence of numbers that\nresults represents the original signal at these sample points, but ignores what\ngoes on between them. If the signal is sufficiently well-behaved (i.e. it\nsatisfies the Nyquist criterion and contains no energy at frequencies greater\nthan half the sampling frequency), then these sample points are enough to\nrepresent the original signal exactly. But if the original signal contains a\nfrequency greater than half the sampling rate, that frequency will be  aliased \nto a lower frequency.    Let's start by looking at what sampling looks like in the time domain.    Connect the function generator output and CH1 of the scope to A/D input4\n   (pin 46 on the interface board socket strip).    Set the function generator to produce a  \\(5 V_{ pp }\\) , 300 Hz sine wave.    Download the  spectrum analyzer  and\n   open in Labview. Set \"number of samples per channel\" and \"rate\" to 10000.\n   Set \"averaging mode\" to RMS averaging. Start the program by pressing the run\n   button or by pressing CTRL-R with the cursor over the window.   Note  Here's what we have:        Right-click on the black box indicating waveform type above the Signal\n   waveform, which says Dev1/ai4. Select Common Plots and select the 2nd option\n   (points only). You should see about three cycles of a sine wave displayed in\n   the waveform graph. Unlike last week's display, the samples are shown as\n   individual dots, rather than connected line segments.       Slowly increase the frequency to 2 kHz and note how the waveform becomes\n   less clear.    At 2 kHz, press  STOP . You should see either several lines or several\n   overlapping sine waves. This is an illusion caused by the fact that only a\n   few samples of each cycle are being taken.  How many samples are being\n   taken per cycle? Take a screenshot.    To see the actual underlying waveform more clearly, switch the display to a\n    continuous line style from the \"Common Plots\" submenu.    Restart the program and continue increasing the frequency of the function\n    generator until you reach 5 kHz, stopping at several points along the way\n    to examine the waveform. When the function generator frequency is exactly\n    half the sampling frequency the samples will alternate the same positive\n    and negative values. (This may be easier to see by switching to the\n    vertical line plot display style.)    Add a fundamental frequency indicator (Frequency.vi) to your block diagram\n    to display the frequency numerically.    Continue increasing the function generator frequency. Notice that as you\n    approach 10 kHz, you begin to see a well-defined sine wave which\n     decreases  in frequency as you increase the function generator frequency.\n    This is the  alias  of the generator frequency. At exactly 10 kHz you\n    should get a zero frequency sine wave.    Continue increasing the function generator frequency past 10 kHz. Note that\n    you once again have a sine wave that increases in frequency as the input\n    frequency increases.  Do the input frequency and displayed frequency\n    match? Pick two input frequencies to comment on.    Explain the concept of aliasing, folding, and the Nyquist criterion, and\n    relate to your results.    Try square and triangle waves of various frequencies and comment on what\n    happens to them as the frequency changes.    Press the  STOP  button and exit the waveform view program.", 
            "title": "Part A: Sample Rate and Aliasing"
        }, 
        {
            "location": "/lab7/experiment_7-1/#part-b-amplitude-quantization", 
            "text": "Once the input signal has been sampled, it must be represented as a number in\nthe computer. Since there are a limited number of bits available to encode the\nnumber (12 in this case), there are only a limited number of values that can be\nexactly represented. Values in between two successive encodings must be rounded\nor truncated to one or the other. This process of forcing the continuous input\nrange into a discrete set of values is called  quantization .    Let's add a quantizer to our spectrum analyzer VI. Add the following blocks\n   and connections to your VI. See the note below for the locations of function\n   blocks.      Note  All function blocks are found under Express  \\(\\rightarrow\\)  Arithmetic\nand Comparison  \\(\\rightarrow\\)  Express Numeric. The above function blocks\ninclude Divide, Multiply, Round to Nearest (indicated by square\nbrackets) and Scale by Power of 2 ( \\(\\alpha 2^n\\) ).     Connect the data signal to the leftmost Divide block, so that the full block\n   diagram looks like this:       On the left hand side of the spectrum analyzer are two controls which\n   control the quantization of the sampled signal. The  full scale  control\n   sets the maximum allowed bits of the signal. The number of bits control sets\n   the  number of bits  that may be represented within the allowed range. Set\n   the  full scale  to 12 and experiment with higher and lower  number of\n   bits .  What do you notice in the waveform display?    Change the input to the PS/PSD block to be the quantized signal instead of\n   the signal coming from the DAQ cable.  How does the spectrum change with\n   quantization?    Change the input to the PS/PSD block back to be the signal coming from the\n   DAQ.    Stop and exit the VI.", 
            "title": "Part B: Amplitude Quantization"
        }, 
        {
            "location": "/lab7/experiment_7-2/", 
            "text": "Experiment 7.2\n\n\nRecording a Reference Signal\n\n\nThe first step in batch processing is to record the input signal as a disk\nfile. We will use a Labview program to do this, then use Matlab to do the\nsignal processing itself.\n\n\nEquipment\n\n\n\n\nTelephone handset\n\n\nDynamic microphone\n\n\nTest board\n\n\nA musical instrument if you have one!\n\n\n\n\nPart A: Digital Recording\n\n\n\n\n\n\nConnect the cable from the DAQ card to J3-1 on the rightmost interface\n   module. Plug the sound card cable into J2-1. Plug the phone handset into\n   J1-7.\n\n\n\n\n\n\nBuild the following two circuits. The top one will be used to amplify and\n   record your voice via the dynamic microphone, and the bottom one will play\n   back audio from the computer to the phone handset.\n\n\n\n\n\n\n\n\n\n\n\n\nVerify that the audio output is working by playing this \ntest\n   signal.\n\n\n\n\n\n\nDownload \nRecorder\n and open in Labview. This program\n   will record four seconds of a signal to a file.\n\n\n\n\n\n\nMake sure Dev1 is selected as your device name. Start the program by\n   pressing the Run button or CTRL-R.\n\n\n\n\n\n\nWhen ready to record, press the \nSTART RECORDING\n button. Wait for the green\n   indicator to come on and speak a significant phrase (e.g. \"My labbies are so\n   great\") into the microphone. You should see the signal on the waveform chart\n   as it is being recorded.\n\n\n\n\n\n\nAfter four seconds a window will pop up asking you to save the signal to a\n   file. Save it as \nsig1.tdms\n. The default location will be in the C drive\n   under folder Temp.\n\n\n\n\n\n\nNavigate to the saved file and right-click on the file. Select Open With\n   \n\\(\\rightarrow\\)\n  Excel Importer.\n\n\n\n\n\n\nGo to the sheet called Untitled. You will see the sampled data in the sheet\n   called Untitled. Note that the samples have been scaled so that their value\n   corresponds to the signal value in volts. Save the excel file as \nsig1.xlsx\n\n   and close.\n\n\n\n\n\n\nMake a second recording of whistling a tune, playing your flute, or some\n    other sequence of tones with a \"simple\" harmonic structure. Or play a pure\n    tone via your smart phone (find an app or search on youtube).  Save this as\n    \nsig2.xlsx\n.\n\n\n\n\n\n\nPart B: Loading the Signals into Matlab\n\n\n\n\nLoad Matlab from the Start menu by following the All Programs  \n\\(\\rightarrow\\)\n\n   Matlab  \n\\(\\rightarrow\\)\n  Matlab R2017a. (You could also transfer the files to\n   your laptop and work with Matlab on your own computer.)\n\n\n\n\nOur signals were recorded with a sampling rate of 10 kHz. We can save a\nlittle typing by defining a Matlab variable for the sampling frequency:\n\n\nFs=10000; \n\n\n\n\nSelect the button \"Import Data\". Navigate to the data location and double-click\non the file \nsig1.xlsx\n. Select the Untitled sheet. Rename Column B (default is\nVoltage) as \nsig1\n. Click on Import Selection.  \n\n\nYou should now have a table of values named something like \"sig1S1\". Convert it\nfrom a table to an array of values with the command:\n\n\nsig1=table2array(sig1S1)\n\n\n\n\nPlay it back by typing the following command: \n\n\nsound(sig1, Fs)\n\n\n\n\nWhat happens if you reduce \nFs\n by half?\n \n\n\nRepeat steps 3 and 4 for your second signal (sig2). \n\n\nPart C: Spectral Analysis\n\n\nDisplay the spectrogram of your signal: \n\n\nspecgram(sig1, 256, Fs);\n\n\n\n\nThe number n=256 in the above command is the length of the signal chunk used in\ncomputing the Fourier transform. For our sample rate of 10 kHz, \nwhat is the\ntime resolution (n/fs)? What is the frequency resolution (fs/n)?\n\n\nWe can get finer resolution in time or frequency (but not both at the same\ntime) by decreasing or increasing this number. Try values of 128 and 512 and\n\ncomment on what difference they make in the spectrogram.\n With 512 you\nshould be able to see the individual harmonics of the pitch frequency. If you\nhave a low pitched voice, you may be able to see the individual pitch pulses\nwith length 128. Can you distinguish the voiced from the unvoiced sounds?\n\n\nWhat are the time and frequency resolutions corresponding to these transform\nlengths?\n\n\n\n\nTip\n\n\nThe \nfigure()\n command allows you to display several plots or spectrograms\nat one time\n\n\n\n\nfigure(2)\nspecgram(sig1, 128, Fs)\n\n\n\n\nwill create a new plot window (Figure 2) and display the new spectrogram in it.\nTo go back to Figure 1, just type \nfigure(1)\n. The spectrogram is simply a\nconcatenation of the spectra of individual chunks of the signal, which we can\ncompute individually. Use the time scale on the spectrogram to find a strong\nvoiced region of the signal (say, for example at \n\\(t=1.5s\\)\n). Since the sampling\nrate is 10 kHz, this corresponds to a sample index of \n\\(t*10000\\)\n (\n\\(15000\\)\n in our\nexample). Extract a chunk of length 256 from the signal at this point: \n\n\nchunk=sig1(15000:15255);\n\n\n\n\nExamine your chunk with the plot command: \n\n\nplot(chunk) \n\n\n\n\nNow take the DFT of this chunk of the signal: \n\n\nspectrum = fft(chunk);\n\n\n\n\nLet's first try to plot the spectrum in the 'obvious' way:\n\n\nplot(spectrum)\n\n\n\n\nThe result is not what we expected! The spectrum is a complex valued sequence,\nand Matlab plots complex functions as the real vs. imaginary part. A more\nsatisfying picture can be had with: \n\n\n plot(abs(spectrum));\n\n\n\n\nNote that this plots both positive and negative frequencies. To get a more\ntraditional plot: \n\n\n plot(abs(spectrum(1:129)));\n\n\n\n\nCan you see the shape of this curve in the spectrogram at the point where you\ntook your chunk? The spectrogram uses a logarithmic scale for magnitude, so you\nmight try one of the following:\n\n\nplot(log(abs(spectrum(1:129))));\n\n\n\n\nsemilogy(abs(spectrum(1:129)));\n\n\n\n\nTake a screenshot.\n\n\nDisplay the spectrogram of your musical signal.\n\n\nspecgram(sig2, 256, Fs);\n\n\n\n\nCan you identify the individual notes in the tune?\n Different instruments\nhave different harmonic structures: a flute has few harmonics, an oboe or\ntrumpet has many, a clarinet has no even harmonics. \nAnalyze the harmonic\nstructure of your tones.", 
            "title": "Recording a Reference Signal"
        }, 
        {
            "location": "/lab7/experiment_7-2/#experiment-72", 
            "text": "", 
            "title": "Experiment 7.2"
        }, 
        {
            "location": "/lab7/experiment_7-2/#recording-a-reference-signal", 
            "text": "The first step in batch processing is to record the input signal as a disk\nfile. We will use a Labview program to do this, then use Matlab to do the\nsignal processing itself.", 
            "title": "Recording a Reference Signal"
        }, 
        {
            "location": "/lab7/experiment_7-2/#equipment", 
            "text": "Telephone handset  Dynamic microphone  Test board  A musical instrument if you have one!", 
            "title": "Equipment"
        }, 
        {
            "location": "/lab7/experiment_7-2/#part-a-digital-recording", 
            "text": "Connect the cable from the DAQ card to J3-1 on the rightmost interface\n   module. Plug the sound card cable into J2-1. Plug the phone handset into\n   J1-7.    Build the following two circuits. The top one will be used to amplify and\n   record your voice via the dynamic microphone, and the bottom one will play\n   back audio from the computer to the phone handset.       Verify that the audio output is working by playing this  test\n   signal.    Download  Recorder  and open in Labview. This program\n   will record four seconds of a signal to a file.    Make sure Dev1 is selected as your device name. Start the program by\n   pressing the Run button or CTRL-R.    When ready to record, press the  START RECORDING  button. Wait for the green\n   indicator to come on and speak a significant phrase (e.g. \"My labbies are so\n   great\") into the microphone. You should see the signal on the waveform chart\n   as it is being recorded.    After four seconds a window will pop up asking you to save the signal to a\n   file. Save it as  sig1.tdms . The default location will be in the C drive\n   under folder Temp.    Navigate to the saved file and right-click on the file. Select Open With\n    \\(\\rightarrow\\)   Excel Importer.    Go to the sheet called Untitled. You will see the sampled data in the sheet\n   called Untitled. Note that the samples have been scaled so that their value\n   corresponds to the signal value in volts. Save the excel file as  sig1.xlsx \n   and close.    Make a second recording of whistling a tune, playing your flute, or some\n    other sequence of tones with a \"simple\" harmonic structure. Or play a pure\n    tone via your smart phone (find an app or search on youtube).  Save this as\n     sig2.xlsx .", 
            "title": "Part A: Digital Recording"
        }, 
        {
            "location": "/lab7/experiment_7-2/#part-b-loading-the-signals-into-matlab", 
            "text": "Load Matlab from the Start menu by following the All Programs   \\(\\rightarrow\\) \n   Matlab   \\(\\rightarrow\\)   Matlab R2017a. (You could also transfer the files to\n   your laptop and work with Matlab on your own computer.)   Our signals were recorded with a sampling rate of 10 kHz. We can save a\nlittle typing by defining a Matlab variable for the sampling frequency:  Fs=10000;   Select the button \"Import Data\". Navigate to the data location and double-click\non the file  sig1.xlsx . Select the Untitled sheet. Rename Column B (default is\nVoltage) as  sig1 . Click on Import Selection.    You should now have a table of values named something like \"sig1S1\". Convert it\nfrom a table to an array of values with the command:  sig1=table2array(sig1S1)  Play it back by typing the following command:   sound(sig1, Fs)  What happens if you reduce  Fs  by half?    Repeat steps 3 and 4 for your second signal (sig2).", 
            "title": "Part B: Loading the Signals into Matlab"
        }, 
        {
            "location": "/lab7/experiment_7-2/#part-c-spectral-analysis", 
            "text": "Display the spectrogram of your signal:   specgram(sig1, 256, Fs);  The number n=256 in the above command is the length of the signal chunk used in\ncomputing the Fourier transform. For our sample rate of 10 kHz,  what is the\ntime resolution (n/fs)? What is the frequency resolution (fs/n)?  We can get finer resolution in time or frequency (but not both at the same\ntime) by decreasing or increasing this number. Try values of 128 and 512 and comment on what difference they make in the spectrogram.  With 512 you\nshould be able to see the individual harmonics of the pitch frequency. If you\nhave a low pitched voice, you may be able to see the individual pitch pulses\nwith length 128. Can you distinguish the voiced from the unvoiced sounds?  What are the time and frequency resolutions corresponding to these transform\nlengths?   Tip  The  figure()  command allows you to display several plots or spectrograms\nat one time   figure(2)\nspecgram(sig1, 128, Fs)  will create a new plot window (Figure 2) and display the new spectrogram in it.\nTo go back to Figure 1, just type  figure(1) . The spectrogram is simply a\nconcatenation of the spectra of individual chunks of the signal, which we can\ncompute individually. Use the time scale on the spectrogram to find a strong\nvoiced region of the signal (say, for example at  \\(t=1.5s\\) ). Since the sampling\nrate is 10 kHz, this corresponds to a sample index of  \\(t*10000\\)  ( \\(15000\\)  in our\nexample). Extract a chunk of length 256 from the signal at this point:   chunk=sig1(15000:15255);  Examine your chunk with the plot command:   plot(chunk)   Now take the DFT of this chunk of the signal:   spectrum = fft(chunk);  Let's first try to plot the spectrum in the 'obvious' way:  plot(spectrum)  The result is not what we expected! The spectrum is a complex valued sequence,\nand Matlab plots complex functions as the real vs. imaginary part. A more\nsatisfying picture can be had with:    plot(abs(spectrum));  Note that this plots both positive and negative frequencies. To get a more\ntraditional plot:    plot(abs(spectrum(1:129)));  Can you see the shape of this curve in the spectrogram at the point where you\ntook your chunk? The spectrogram uses a logarithmic scale for magnitude, so you\nmight try one of the following:  plot(log(abs(spectrum(1:129))));  semilogy(abs(spectrum(1:129)));  Take a screenshot.  Display the spectrogram of your musical signal.  specgram(sig2, 256, Fs);  Can you identify the individual notes in the tune?  Different instruments\nhave different harmonic structures: a flute has few harmonics, an oboe or\ntrumpet has many, a clarinet has no even harmonics.  Analyze the harmonic\nstructure of your tones.", 
            "title": "Part C: Spectral Analysis"
        }, 
        {
            "location": "/lab7/experiment_7-3/", 
            "text": "Experiment 7.3\n\n\nSignal Processing in Matlab\n\n\nEquipment\n\n\n\n\nLab PC with Matlab\n\n\n\n\nPart A: Simple Signal Processing\n\n\nOne of the simplest things we can do to a signal is to \nscale\n it (i.e.\nmultiply it by a constant). Try: \n\n\nout1 = .25 * sig1;\nsound(out1, Fs) \n\n\n\n\nOr if you're lazy: \n\n\nsound(.25 * sig1) \n\n\n\n\nWe can also make the signal bigger: \n\n\nsound(4 * sig1) \n\n\n\n\nAbout the simplest thing we can do to \ntwo\n signals is to add them together: \n\n\nout2 = sig1 + sig2; \n\n\n\n\nListen to \nout2\n and look at its spectrogram. \nCan you identify the two\ndifferent signals in both the audible and visual domains?\n \n\n\nBoth the A/D converter which digitized the input signal and the D/A converter\nwhich converts the processed samples back to an analog signal have limited\nrange of values that they can represent. By keeping our input signal below \n\\(5V\\)\n\nwe keep it within the range of the A/D converter and avoid \"clipping\" the\nsignal. However, when we add two signals together or send then through systems\nhaving a gain greater than one, we may create an output signal with values too\nlarge for the D/A converter to convert. If this happens you will hear\ndistortion in the output signal.  To avoid this, you can use the \nsoundsc()\n\ncommand instead of \nsound()\n. This command automatically scales the signal\nvalue so that it fits within the range of the D/A converter.  \n\n\nAnother interesting thing we can do is \nmultiply\n the two signals together.\nDigitally, this is just as easy to do as adding them, but this is very\ndifficult to do in an analog circuit. \n\n\nout3 = sig1 .* sig2;\n\n\n\n\nNote the special MATLAB construct \n.*\n denoting point by point multiplication,\nas opposed to matrix multiplication. Listen to \nout3\n and look at its\nspectrogram. Can you identify either of the two signals in either the aural or\nvisual domains? \n\n\nPart B: Simple Filtering\n\n\nAs you saw in ELEC241, filtering a digital signal involves forming a weighted sum\nof the past input and output samples:\n\n\n\\[\na_0y(n) = \\sum_{k=1}^{M} a_ky(n-k) + \\sum_{k=1}^{N} b_kx(n-k)\n\\]\nMatlab has a function for performing this operation: \n\n\ny = filter(b, a, x); \n\n\n\n\nChoosing the values of the \n\\(a_k\\)\n's and \n\\(b_k\\)\n's is the art of \nfilter design,\n\nwhich we'll look at in the next part. For now, we'll just try a few simple\nvalues for \n\\(\\vec{a}\\)\n and \n\\(\\vec{b}\\)\n. As a tip, record the characteristics of\neach filter we look at - you will be asked to summarize each type at the end of\nexperiment 9.4. \n\n\n\n\nTip\n\n\nRecord the characteristics of each filter as you look at them - \nyou will\nbe asked to summarize each type at the end of the lab.\n\n\n\n\nA \nfinite impulse response\n (FIR) or non-recursive filter has all the \n\\(a_k\\)\n\n(except \n\\(a_0\\)\n) equal to zero, i.e. it is a weighted sum of input samples.  The\nsimplest FIR filter is the \nboxcar\n filter in which all the \n\\(b_k\\)\n are equal to 1.\nDefine a length 5 boxcar filter:\n\n\na=1; \nb=[1 1 1 1 1]; \n\n\n\n\nMatlab has a function to compute and display the frequency response of a\nfilter: \n\n\nfreqz(b, a) \n\n\n\n\nTake a screenshot.\n\n\nNote that the frequency axis is labeled in terms of the Nyquist frequency,\nwhich is half the sampling rate. So for our sampling rate, 1 corresponds to 5 kHz.\nAlthough it is a little distorted because of the logarithmic scaling, this is a\nclose relative of our old friend \n\\(sin(x)/x\\)\n. Also note that the jumps in phase\nare caused by a change in sign of the transfer function (the magnitude is\nalways positive).  Taking this into account, the phase is a \nlinear\n function\nof frequency.  \n\n\nWe can also look at the \nunit-sample response\n of the filter: \n\n\ndelta = \\[1 zeros(1,100)\\];\ny = filter(b, a, delta); \nplot(y, '.') \n\n\n\n\nAs you would expect, the unit-sample response is a rectangular pulse, which\nsupposedly looks like the side view of a boxcar. Now let's try applying this\nfilter to our signal:\n\n\nout1 = filter(b, a, sig1); \n\n\n\n\nListen to \nout1\n and look at its spectrogram. \n\n\nsound(out1, Fs);\nspecgram(out1, 156, Fs) \n\n\n\n\nAs you can tell from its frequency response plot, this is a \"sort-of\" lowpass\nfilter, though not a very good one. \nCan you tell this by comparing the sound\nand spectrogram of the output with the input? What do the blue areas of the\nspectrogram correspond to?\n  \n\n\nRepeat from the beginning of Part B using a length 10 boxcar filter.\n  \n\n\nWhat is the relation between the length of the filter and its frequency\nresponse?\n An \ninfinite impulse response\n (IIR) filter has an unit-sample\nresponse that doesn't go to zero after a finite number of samples.  IIR filters\nare usually implemented \nrecursively\n, i.e. with non-zero \n\\(a\\)\n coefficients.\nDefine a first order recursive filter: \n\n\na=[1, -.9];\nb=[1]; \n\n\n\n\nUsing the same technique as above, look at its unit-sample and frequency\nresponse. Note that this is also a lowpass filter, with a more conventional\nfrequency response than the boxcar filter. Apply this filter to the input\nsignal. Listen to the output and plot its spectrogram. \nCan you tell by\nlistening and looking that this is a lowpass filter?\n An interesting thing\nhappens if we change the sign of \n\\(a_1\\)\n: \n\n\na = [1 .9]; \n\n\n\n\nLook at the unit-sample and frequency response of this filter. Apply it to the\ninput signal, listen to the output, and plot its spectrogram. \nWhat kind of\nfilter is this?\n \n\n\nPart C: Fancy Filtering\n\n\nTo get filters that are really effective (i.e. that pass the desired\nfrequencies with minimum distortion and reject undesired frequencies as\nstrongly as possible), we need to have a design procedure to find the optimum\nset of coefficients for a given specification. If you take ELEC 431, you will\nlearn how to do this. In the meantime, we will utilize pre-constructed\nalgorithms.  The \nButterworth\n filter is one of the classic filter designs. It\nis characterized by having the \"flattest\" possible passband. Unfortunately, its\nperformance in the stop band is decidedly mediocre. Design a \n\\(5^{th}\\)\n-order\nlowpass Butterworth filter having a cutoff frequency of 600 Hz with our 10 kHz\nsampling frequency and print out their coefficients: \n\n\n[b,a] = butter(5, 600/5000);\nb\na \n\n\n\n\nLook at the unit-sample response and the frequency response. Notice how much\ncloser this is to an ideal low pass filter. Also notice the scale on the\ny-axis. For a better comparison with previous plots, try changing this scale: \n\n\nsubplot(2,1,1)\naxis([0 1 -60 0]) \n\n\n\n\nAlso\nnote that the phase is not linear. Now apply the filter to our input\nsignal and listen to the output: \n\n\nout=filter(b,a,sig1);\nsound(out, Fs) \n\n\n\n\nWe can also design FIR filters that are significantly better than our boxcar\nfilter: \n\n\na=1\nb=fir1(5,600/5000); \n\n\n\n\nExamine the unit-sample and frequency response of this filter and apply it to\nthe reference signal. FIR filters really start to get interesting when we build\nvery long ones.  Try the same cutoff frequency with 50 coefficients: \n\n\nb=fir1(50,600/5000); \n\n\n\n\nNote that we now have a filter of order 50.  How would you like to design and\nbuild an analog (RLC) filter of this order?! \nLook at the unit-sample and\nfrequency response of this filter. What function does the unit-sample response\nremind you of?\n Note that this filter has a much more ideal shape than any of\nthe others. \n\n\nFinally apply this filter to the reference signal. \nCan you tell the\ndifference in the sound or the spectrogram between the effects of this filter\nand the length 5 filter?\n \n\n\n\n\nCaution\n\n\nYou will need your signals \nsig1\n and \nsig2\n for the next lab so make sure\nyou save them!", 
            "title": "Signal Processing in Matlab"
        }, 
        {
            "location": "/lab7/experiment_7-3/#experiment-73", 
            "text": "", 
            "title": "Experiment 7.3"
        }, 
        {
            "location": "/lab7/experiment_7-3/#signal-processing-in-matlab", 
            "text": "", 
            "title": "Signal Processing in Matlab"
        }, 
        {
            "location": "/lab7/experiment_7-3/#equipment", 
            "text": "Lab PC with Matlab", 
            "title": "Equipment"
        }, 
        {
            "location": "/lab7/experiment_7-3/#part-a-simple-signal-processing", 
            "text": "One of the simplest things we can do to a signal is to  scale  it (i.e.\nmultiply it by a constant). Try:   out1 = .25 * sig1;\nsound(out1, Fs)   Or if you're lazy:   sound(.25 * sig1)   We can also make the signal bigger:   sound(4 * sig1)   About the simplest thing we can do to  two  signals is to add them together:   out2 = sig1 + sig2;   Listen to  out2  and look at its spectrogram.  Can you identify the two\ndifferent signals in both the audible and visual domains?    Both the A/D converter which digitized the input signal and the D/A converter\nwhich converts the processed samples back to an analog signal have limited\nrange of values that they can represent. By keeping our input signal below  \\(5V\\) \nwe keep it within the range of the A/D converter and avoid \"clipping\" the\nsignal. However, when we add two signals together or send then through systems\nhaving a gain greater than one, we may create an output signal with values too\nlarge for the D/A converter to convert. If this happens you will hear\ndistortion in the output signal.  To avoid this, you can use the  soundsc() \ncommand instead of  sound() . This command automatically scales the signal\nvalue so that it fits within the range of the D/A converter.    Another interesting thing we can do is  multiply  the two signals together.\nDigitally, this is just as easy to do as adding them, but this is very\ndifficult to do in an analog circuit.   out3 = sig1 .* sig2;  Note the special MATLAB construct  .*  denoting point by point multiplication,\nas opposed to matrix multiplication. Listen to  out3  and look at its\nspectrogram. Can you identify either of the two signals in either the aural or\nvisual domains?", 
            "title": "Part A: Simple Signal Processing"
        }, 
        {
            "location": "/lab7/experiment_7-3/#part-b-simple-filtering", 
            "text": "As you saw in ELEC241, filtering a digital signal involves forming a weighted sum\nof the past input and output samples:  \\[\na_0y(n) = \\sum_{k=1}^{M} a_ky(n-k) + \\sum_{k=1}^{N} b_kx(n-k)\n\\] Matlab has a function for performing this operation:   y = filter(b, a, x);   Choosing the values of the  \\(a_k\\) 's and  \\(b_k\\) 's is the art of  filter design, \nwhich we'll look at in the next part. For now, we'll just try a few simple\nvalues for  \\(\\vec{a}\\)  and  \\(\\vec{b}\\) . As a tip, record the characteristics of\neach filter we look at - you will be asked to summarize each type at the end of\nexperiment 9.4.    Tip  Record the characteristics of each filter as you look at them -  you will\nbe asked to summarize each type at the end of the lab.   A  finite impulse response  (FIR) or non-recursive filter has all the  \\(a_k\\) \n(except  \\(a_0\\) ) equal to zero, i.e. it is a weighted sum of input samples.  The\nsimplest FIR filter is the  boxcar  filter in which all the  \\(b_k\\)  are equal to 1.\nDefine a length 5 boxcar filter:  a=1; \nb=[1 1 1 1 1];   Matlab has a function to compute and display the frequency response of a\nfilter:   freqz(b, a)   Take a screenshot.  Note that the frequency axis is labeled in terms of the Nyquist frequency,\nwhich is half the sampling rate. So for our sampling rate, 1 corresponds to 5 kHz.\nAlthough it is a little distorted because of the logarithmic scaling, this is a\nclose relative of our old friend  \\(sin(x)/x\\) . Also note that the jumps in phase\nare caused by a change in sign of the transfer function (the magnitude is\nalways positive).  Taking this into account, the phase is a  linear  function\nof frequency.    We can also look at the  unit-sample response  of the filter:   delta = \\[1 zeros(1,100)\\];\ny = filter(b, a, delta); \nplot(y, '.')   As you would expect, the unit-sample response is a rectangular pulse, which\nsupposedly looks like the side view of a boxcar. Now let's try applying this\nfilter to our signal:  out1 = filter(b, a, sig1);   Listen to  out1  and look at its spectrogram.   sound(out1, Fs);\nspecgram(out1, 156, Fs)   As you can tell from its frequency response plot, this is a \"sort-of\" lowpass\nfilter, though not a very good one.  Can you tell this by comparing the sound\nand spectrogram of the output with the input? What do the blue areas of the\nspectrogram correspond to?     Repeat from the beginning of Part B using a length 10 boxcar filter.     What is the relation between the length of the filter and its frequency\nresponse?  An  infinite impulse response  (IIR) filter has an unit-sample\nresponse that doesn't go to zero after a finite number of samples.  IIR filters\nare usually implemented  recursively , i.e. with non-zero  \\(a\\)  coefficients.\nDefine a first order recursive filter:   a=[1, -.9];\nb=[1];   Using the same technique as above, look at its unit-sample and frequency\nresponse. Note that this is also a lowpass filter, with a more conventional\nfrequency response than the boxcar filter. Apply this filter to the input\nsignal. Listen to the output and plot its spectrogram.  Can you tell by\nlistening and looking that this is a lowpass filter?  An interesting thing\nhappens if we change the sign of  \\(a_1\\) :   a = [1 .9];   Look at the unit-sample and frequency response of this filter. Apply it to the\ninput signal, listen to the output, and plot its spectrogram.  What kind of\nfilter is this?", 
            "title": "Part B: Simple Filtering"
        }, 
        {
            "location": "/lab7/experiment_7-3/#part-c-fancy-filtering", 
            "text": "To get filters that are really effective (i.e. that pass the desired\nfrequencies with minimum distortion and reject undesired frequencies as\nstrongly as possible), we need to have a design procedure to find the optimum\nset of coefficients for a given specification. If you take ELEC 431, you will\nlearn how to do this. In the meantime, we will utilize pre-constructed\nalgorithms.  The  Butterworth  filter is one of the classic filter designs. It\nis characterized by having the \"flattest\" possible passband. Unfortunately, its\nperformance in the stop band is decidedly mediocre. Design a  \\(5^{th}\\) -order\nlowpass Butterworth filter having a cutoff frequency of 600 Hz with our 10 kHz\nsampling frequency and print out their coefficients:   [b,a] = butter(5, 600/5000);\nb\na   Look at the unit-sample response and the frequency response. Notice how much\ncloser this is to an ideal low pass filter. Also notice the scale on the\ny-axis. For a better comparison with previous plots, try changing this scale:   subplot(2,1,1)\naxis([0 1 -60 0])   Also\nnote that the phase is not linear. Now apply the filter to our input\nsignal and listen to the output:   out=filter(b,a,sig1);\nsound(out, Fs)   We can also design FIR filters that are significantly better than our boxcar\nfilter:   a=1\nb=fir1(5,600/5000);   Examine the unit-sample and frequency response of this filter and apply it to\nthe reference signal. FIR filters really start to get interesting when we build\nvery long ones.  Try the same cutoff frequency with 50 coefficients:   b=fir1(50,600/5000);   Note that we now have a filter of order 50.  How would you like to design and\nbuild an analog (RLC) filter of this order?!  Look at the unit-sample and\nfrequency response of this filter. What function does the unit-sample response\nremind you of?  Note that this filter has a much more ideal shape than any of\nthe others.   Finally apply this filter to the reference signal.  Can you tell the\ndifference in the sound or the spectrogram between the effects of this filter\nand the length 5 filter?     Caution  You will need your signals  sig1  and  sig2  for the next lab so make sure\nyou save them!", 
            "title": "Part C: Fancy Filtering"
        }, 
        {
            "location": "/lab8/", 
            "text": "Lab 8: Digital Logic and Full Adders\n\n\nIntroduction\n\n\nExperiments\n\n\n\n\nExperiment 8.1: \nDigital Logic", 
            "title": "Home"
        }, 
        {
            "location": "/lab8/#lab-8-digital-logic-and-full-adders", 
            "text": "", 
            "title": "Lab 8: Digital Logic and Full Adders"
        }, 
        {
            "location": "/lab8/#introduction", 
            "text": "", 
            "title": "Introduction"
        }, 
        {
            "location": "/lab8/#experiments", 
            "text": "Experiment 8.1:  Digital Logic", 
            "title": "Experiments"
        }, 
        {
            "location": "/lab8/introduction/", 
            "text": "Introduction\n\n\nIn this lab, we will look at how two voltages levels can be used to perform\narithmetic. By utilizing just two voltage levels, a \"high\" and a \"low\", we\ncreate a binary system. The binary system is \"a language\" used to create\nmathematical formulas, such as algebraic equations, but also logical\nexpressions. This branch of mathematics is called Boolean algebra, introduced\nby George Boole, in which the values of the variables are either \"true\" or\n\"false\" (also called \"high\" or \"low\"; \"1\" or \"0\"). The various terms for the\ntwo states will be used interchangeably. The implementation of Boolean algebra\nwith circuitry and programming is called digital logic. Boolean algebra is\nbasis for the development of digital electronics.\n\n\nIn this lab we will build a one-bit full-adder, which adds three data bits,\nwhich include data bits \n\\(x\\)\n and \n\\(y\\)\n, and a carry bit \n\\(z\\)\n. The output of the\nadder will be a one-bit result and a one-bit carry.\n\n\nNote: The name \"full-adder\" comes from the fact that it can be constructed by\ncombining two half-adders, each of which adds only two bits.", 
            "title": "Introduction"
        }, 
        {
            "location": "/lab8/introduction/#introduction", 
            "text": "In this lab, we will look at how two voltages levels can be used to perform\narithmetic. By utilizing just two voltage levels, a \"high\" and a \"low\", we\ncreate a binary system. The binary system is \"a language\" used to create\nmathematical formulas, such as algebraic equations, but also logical\nexpressions. This branch of mathematics is called Boolean algebra, introduced\nby George Boole, in which the values of the variables are either \"true\" or\n\"false\" (also called \"high\" or \"low\"; \"1\" or \"0\"). The various terms for the\ntwo states will be used interchangeably. The implementation of Boolean algebra\nwith circuitry and programming is called digital logic. Boolean algebra is\nbasis for the development of digital electronics.  In this lab we will build a one-bit full-adder, which adds three data bits,\nwhich include data bits  \\(x\\)  and  \\(y\\) , and a carry bit  \\(z\\) . The output of the\nadder will be a one-bit result and a one-bit carry.  Note: The name \"full-adder\" comes from the fact that it can be constructed by\ncombining two half-adders, each of which adds only two bits.", 
            "title": "Introduction"
        }, 
        {
            "location": "/lab8/experiment_8-1/", 
            "text": "Experiment 8.1\n\n\nDigital Logic\n\n\nEquipment\n\n\n\n\nTest board\n\n\n\\(1\\times\\)\n 74HC00 Quad 2-input NAND gate\n\n\n\\(1\\times\\)\n 7486 Quad 2-input XOR gate\n\n\n\\(2\\times\\)\n LEDs\n\n\n\\(1\\times\\)\n Quad DIP switch\n\n\n\\(5\\times\\)\n \n\\(330 \\Omega\\)\n resistors\n\n\n\n\nPart A: Understanding the Components\n\n\nLet\u2019s understand the components we will be working with.\n\n\nLED\n\n\nAn LED is a light-emitting-diode, or p-n junction diode. It has an anode pin\n(the longer one), which should be connected to the higher voltage, and a\ncathode pin (the shorter one), connected to a lower voltage.  Current only\nflows from anode to cathode, which causes it to light up.\n\n\nQuad DIP Switch\n\n\nThe quad DIP (Dual-In-Line Package) switch used here is a package with four\nswitches inside. Each switch has two statuses. When a switch is turned off (at\nthe lower position), the two ends of it are isolated.  When it is turned on,\nthe two ends are shorted.\n\n\n7400 (74HC00) NAND gate\n\n\nA NAND gate performs the function NOT AND. The circuit symbol looks like this:\n\n\n\n\n\n\n\n\nBut let\u2019s first understand the AND function, whose circuit symbol looks like\nthis:\n\n\n\n\n\n\n\n\nIf you AND inputs \n\\(A\\)\n and \n\\(B\\)\n, the output will be true only if both \n\\(A\\)\n \nand\n \n\\(B\\)\n are\ntrue. With two inputs, you have four possible combinations possible: \n\\(A\\)\n and \n\\(B\\)\n\nare both false; \n\\(A\\)\n is false while \n\\(B\\)\n is true; \n\\(A\\)\n is true while \n\\(B\\)\n is false; or \n\\(A\\)\n\nand \n\\(B\\)\n are both true.\n\n\nA NAND gate inverts the result of an AND operation. So while an AND operation\nonly outputs true when both \n\\(A\\)\n and \n\\(B\\)\n are true, a NAND operation will output\ntrue for all combinations \nexcept\n when both \n\\(A\\)\n and \n\\(B\\)\n are true. This\ninformation is compiled in a truth table which looks like this, where true is 1\nand false is 0:\n\n\n\n\n\n\n\n\nA\n\n\nB\n\n\nA NAND B\n\n\n\n\n\n\n\n\n\n\n0\n\n\n0\n\n\n1\n\n\n\n\n\n\n0\n\n\n1\n\n\n1\n\n\n\n\n\n\n1\n\n\n0\n\n\n1\n\n\n\n\n\n\n1\n\n\n1\n\n\n0\n\n\n\n\n\n\n\n\nAs you can see, the NAND gate looks like an AND gate but with a bubble on the\nend. This bubble is the symbol for the NOT (or inverter) operation. The inside\nof the NAND IC that we are going to use looks like this:\n\n\n\n\n\n\n\n\nIt contains four independent NAND gates, and a pin for \n\\(V_{cc}\\)\n (\n\\(+5V\\)\n) and a\npin for GND \n\\((0V)\\)\n. When an output is true, the voltage on the output pin will be\n\n\\(+5V\\)\n, and \n\\(0V\\)\n when false.\n\n\n7486 (74HC86) XOR gate\n\n\nThe XOR gate is performs the EXCLUSIVE OR operation. In other words, the output\nis true only when exclusively \n\\(A\\)\n or exclusively \n\\(B\\)\n is true. See the truth\ntable below for an XOR operation:\n\n\n\n\n\n\n\n\nA\n\n\nB\n\n\nA XOR B\n\n\n\n\n\n\n\n\n\n\n0\n\n\n0\n\n\n0\n\n\n\n\n\n\n0\n\n\n1\n\n\n1\n\n\n\n\n\n\n1\n\n\n0\n\n\n1\n\n\n\n\n\n\n1\n\n\n1\n\n\n0\n\n\n\n\n\n\n\n\nThe XOR IC we will use has the following pin diagram. Notice the circuit symbol\nfor an XOR gate:\n\n\n\n\n\n\n\n\nOther common logic gates are NOT (inverse of input), OR (either \n\\(A\\)\n or \n\\(B\\)\n (or\nboth) are true), NOR (not OR), and XNOR (inverse of XOR). Based on what you\u2019ve\nlearned about truth tables from the previous operations, \nfill in the truth\ntable below:\n\n\n\n\n\n\n\n\n\\(x\\)\n\n\n\\(y\\)\n\n\nNOT \n\\(x\\)\n\n\n\\(x\\)\n OR \n\\(y\\)\n\n\n\\(x\\)\n NOR \n\\(y\\)\n\n\n\\(x\\)\n XNOR \n\\(y\\)\n\n\n\n\n\n\n\n\n\n\n0\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nAll the logic ICs we are using should be supplied with a \n\\(+5V\\)\n DC voltage for\n\n\\(V_{cc}\\)\n.\n\n\n\n\nPart B: The Full-Adder Circuit\n\n\nThe binary adder circuit is an important building block of digital arithmetic\ncircuits. Its purpose is to form the arithmetic sum of two binary numbers. In\nthis lab, we will be building a one-bit full-adder, which adds two 1-bit binary\nnumbers as well as a carry bit. The result will be a 1-bit sum and a 1-bit\ncarry term. In this section we will see how to design a binary adder out of\nbasic logic gates.\n\n\nLet's first understand a little more about the binary system. Binary is\ncalculated in base 2. If we have \n\\(n\\)\n input bits, we have \n\\(2^n\\)\n possible\ncombinations, and can represent up to the decimal value \n\\(2^n-1\\)\n, starting\nwith decimal value 0. In our case, we have three 1-bit inputs, so we have\n\n\\(2^n = 8\\)\n possible input combinations.\n\n\nTo understand binary addition, let's look at an example. The steps are similar\nto a decimal summation. For example if we are adding \n\\(1101\\)\n and \n\\(0110\\)\n, we sum\nup the column beginning at right, and carry over the extra to the next column.\nA carry bit results when there are 2 or more 1's in the input. The sum\n\n\\(1101+0110=10011\\)\n is written as shown below.\n\n\n\n\n\n\n\n\nAs you can see, a multi-bit summation can be computed with several individual\naddition steps. Each step adds up one column of three 1-bit numbers and\nprovides a carry to the next column. (For the first column on the right, the\ncarry could be filled in as a zero).\n\n\nA circuit for this one-column adder is the one that we will build in this lab.\n\n\nLet's represent the two 1-bit inputs as \n\\(x\\)\n and \n\\(y\\)\n, the carry as \n\\(z\\)\n, and the\ntwo outputs as sum bit \n\\(S\\)\n, and the final carry bit \n\\(C\\)\n. The truth table is\nbelow.\n\n\n\n\n\n\n\n\nTo build a logic circuit, we want to formulate a single logical expression\nwhose result matches the truth table for all cases of input combinations. Since\nwe have two outputs \n\\(S\\)\n and \n\\(C\\)\n, we need two logical expressions.\n\n\n\n\nNote\n\n\nInstead of indicating logical operations with the gate name (i.e., \n\\(x\\)\n XOR\n\n\\(y\\)\n) there are common symbols that are used in logical expressions to\nindicate the logical operation. Given two inputs \n\\(x\\)\n and \n\\(y\\)\n:\n\n\n\n\n\n\n\n\nName\n\n\nSymbolic Expression\n\n\n\n\n\n\n\n\n\n\n\\(x\\)\n AND \n\\(y\\)\n\n\n\\(xy\\)\n or \n\\(x \\bullet y\\)\n\n\n\n\n\n\n\\(x\\)\n OR \n\\(y\\)\n\n\n\\(x \\vee y\\)\n\n\n\n\n\n\nNOT \n\\(x\\)\n\n\n\\(\\lnot x\\)\n\n\n\n\n\n\n\\(x\\)\n NAND \n\\(y\\)\n\n\n\\(\\lnot ( x \\bullet y )\\)\n\n\n\n\n\n\n\\(x\\)\n NOR \n\\(y\\)\n\n\n\\(\\lnot ( x \\vee y )\\)\n\n\n\n\n\n\n\\(x\\)\n XOR \n\\(y\\)\n\n\n\\(x \\bigoplus y\\)\n\n\n\n\n\n\n\\(x\\)\n XNOR \n\\(y\\)\n\n\n\\(\\lnot (x\\bigoplus y)\\)\n\n\n\n\n\n\n\n\n\n\nLet's start with formulating an expression for output \n\\(S\\)\n. Redraw the full adder\ntruth table and add two additional columns, labeling one as \n\\(x \\bigoplus y\\)\n and\nthe other as \n\\((x \\bigoplus y) \\bigoplus z\\)\n. \nFill in the new columns of your\ntruth table and show that\n\n\n\\[\nS = (x \\bigoplus y) \\bigoplus z\n\\]\n\n\n\n\n\n\n\\(x\\)\n\n\n\\(y\\)\n\n\n\\(z\\)\n\n\n\\(x\\bigoplus y\\)\n\n\n\\(\\left( x\\bigoplus y \\right)\\bigoplus z\\)\n\n\nC\n\n\nS\n\n\n\n\n\n\n\n\n\n\n0\n\n\n0\n\n\n0\n\n\n\n\n\n\n0\n\n\n0\n\n\n\n\n\n\n0\n\n\n0\n\n\n1\n\n\n\n\n\n\n0\n\n\n1\n\n\n\n\n\n\n0\n\n\n1\n\n\n0\n\n\n\n\n\n\n0\n\n\n1\n\n\n\n\n\n\n0\n\n\n1\n\n\n1\n\n\n\n\n\n\n1\n\n\n0\n\n\n\n\n\n\n1\n\n\n0\n\n\n0\n\n\n\n\n\n\n0\n\n\n1\n\n\n\n\n\n\n1\n\n\n0\n\n\n1\n\n\n\n\n\n\n1\n\n\n0\n\n\n\n\n\n\n1\n\n\n1\n\n\n0\n\n\n\n\n\n\n1\n\n\n0\n\n\n\n\n\n\n1\n\n\n1\n\n\n1\n\n\n\n\n\n\n1\n\n\n1\n\n\n\n\n\n\n\n\nSimilarly, show that the output \n\\(C = (x \\bullet y) \\vee (x \\bigoplus y) \\bullet z\\)\n.\n\n\nFrom our expressions, it looks like the output \n\\(S\\)\n will require two XOR gates,\nand \n\\(C\\)\n will require additional 2 ANDs and an OR. A circuit diagram for this is\nshown below.\n\n\n\n\n\n\n\n\nHowever, building this circuit will require using three different ICs, two of\nwhich we don\u2019t have.\n\n\nSo now we will apply a very useful law called DeMorgan's Law to our\nexpressions, which states:\n\n\n\\[\n\\begin{aligned}\nx \\bullet y \n= \\lnot (x \\vee y) \\\\\nx \\vee y \n= \\lnot (x \\bullet y) \n\\end{aligned}\n\\]\nDeMorgan's Law implies that any AND gate can be substituted with an OR and a\nNOT gate, and vice versa: any OR gate can be substituted with an AND and a NOT\ngate. Applying DeMorgan's Law to the expression for \n\\(C\\)\n and using some\nsimplification steps, we see that \n\\(C\\)\n could be obtained with just NAND and XOR\ngates: \n\n\n\\[\nC = \\lnot \n        \\left( \n            \\lnot (x \\bullet y) \\bullet \\lnot \n                \\left( \n                \\left(x \\bigoplus y \\right) \\bullet z \n                \\right) \n        \\right)\n\\]\nCreate a truth table to prove this to yourself.\n The circuit for this\nequation is below:\n\n\n\n\n\n\n\n\nPart C: Constructing the Full-Adder\n\n\nLet\u2019s build this full-adder on our breadboard.\n\n\n\n\n\n\nPlace the DIP switch on your breadboard, and set all the switches to the\n    off position. Let switch 1 (SW1) be x, SW2 be y, and SW3 be z.  Wire the\n    following connections to each of your switches as shown below. The pins on\n    the side of the off position should be wired to ground. The 330-\u2126 resistor\n    acts to prevent a short between power supply and ground when the switch is\n    closed. TTL (transistor-transistor logic) indicates where you will make the\n    connection to your logic gates in Step 4.\n\n\n\n\n\n\n\n\n\n\n\n\nNext, insert the NAND IC (74HC00) and XOR IC (74HC86) on your breadboard,\n    checking that the notches on the ICs both face the same direction.\n\n\n\n\n\n\n\n\n\n\n\n\nWire \n\\(V_{cc}\\)\n and GND for the two ICs, where \n\\(V_{cc} = 5V\\)\n.\n\n\n\n\n\n\nWire the logic circuit together with the pin assignments as shown\n    below:\n\n\n\n\n\n\n\n\n\n\n\n\nWe want to include some indicator of what our Sum and Carry output is. For\n    this we will use LEDs, that will light up when the output is 1. Wire the\n    following connections to your S and C outputs. (The resistor in series\n    avoids excessive voltage drop across the LED).\n\n\n\n\n\n\n\n\n\n\n\n\nYour full-adder is done! Now test if it works, by checking all possible\n    input combinations from your full-adder truth table. \nTake a photo for\n    each input combination (showing switch and LEDs) to include in your\n    report.\n\n\n\n\n\n\nOutput the adder's sum to the computer using the breadboard.  Fire up\n    Labview and create a digital display of the sum.", 
            "title": "Digital Logic"
        }, 
        {
            "location": "/lab8/experiment_8-1/#experiment-81", 
            "text": "", 
            "title": "Experiment 8.1"
        }, 
        {
            "location": "/lab8/experiment_8-1/#digital-logic", 
            "text": "", 
            "title": "Digital Logic"
        }, 
        {
            "location": "/lab8/experiment_8-1/#equipment", 
            "text": "Test board  \\(1\\times\\)  74HC00 Quad 2-input NAND gate  \\(1\\times\\)  7486 Quad 2-input XOR gate  \\(2\\times\\)  LEDs  \\(1\\times\\)  Quad DIP switch  \\(5\\times\\)   \\(330 \\Omega\\)  resistors", 
            "title": "Equipment"
        }, 
        {
            "location": "/lab8/experiment_8-1/#part-a-understanding-the-components", 
            "text": "Let\u2019s understand the components we will be working with.", 
            "title": "Part A: Understanding the Components"
        }, 
        {
            "location": "/lab8/experiment_8-1/#led", 
            "text": "An LED is a light-emitting-diode, or p-n junction diode. It has an anode pin\n(the longer one), which should be connected to the higher voltage, and a\ncathode pin (the shorter one), connected to a lower voltage.  Current only\nflows from anode to cathode, which causes it to light up.", 
            "title": "LED"
        }, 
        {
            "location": "/lab8/experiment_8-1/#quad-dip-switch", 
            "text": "The quad DIP (Dual-In-Line Package) switch used here is a package with four\nswitches inside. Each switch has two statuses. When a switch is turned off (at\nthe lower position), the two ends of it are isolated.  When it is turned on,\nthe two ends are shorted.", 
            "title": "Quad DIP Switch"
        }, 
        {
            "location": "/lab8/experiment_8-1/#7400-74hc00-nand-gate", 
            "text": "A NAND gate performs the function NOT AND. The circuit symbol looks like this:     But let\u2019s first understand the AND function, whose circuit symbol looks like\nthis:     If you AND inputs  \\(A\\)  and  \\(B\\) , the output will be true only if both  \\(A\\)   and   \\(B\\)  are\ntrue. With two inputs, you have four possible combinations possible:  \\(A\\)  and  \\(B\\) \nare both false;  \\(A\\)  is false while  \\(B\\)  is true;  \\(A\\)  is true while  \\(B\\)  is false; or  \\(A\\) \nand  \\(B\\)  are both true.  A NAND gate inverts the result of an AND operation. So while an AND operation\nonly outputs true when both  \\(A\\)  and  \\(B\\)  are true, a NAND operation will output\ntrue for all combinations  except  when both  \\(A\\)  and  \\(B\\)  are true. This\ninformation is compiled in a truth table which looks like this, where true is 1\nand false is 0:     A  B  A NAND B      0  0  1    0  1  1    1  0  1    1  1  0     As you can see, the NAND gate looks like an AND gate but with a bubble on the\nend. This bubble is the symbol for the NOT (or inverter) operation. The inside\nof the NAND IC that we are going to use looks like this:     It contains four independent NAND gates, and a pin for  \\(V_{cc}\\)  ( \\(+5V\\) ) and a\npin for GND  \\((0V)\\) . When an output is true, the voltage on the output pin will be \\(+5V\\) , and  \\(0V\\)  when false.", 
            "title": "7400 (74HC00) NAND gate"
        }, 
        {
            "location": "/lab8/experiment_8-1/#7486-74hc86-xor-gate", 
            "text": "The XOR gate is performs the EXCLUSIVE OR operation. In other words, the output\nis true only when exclusively  \\(A\\)  or exclusively  \\(B\\)  is true. See the truth\ntable below for an XOR operation:     A  B  A XOR B      0  0  0    0  1  1    1  0  1    1  1  0     The XOR IC we will use has the following pin diagram. Notice the circuit symbol\nfor an XOR gate:     Other common logic gates are NOT (inverse of input), OR (either  \\(A\\)  or  \\(B\\)  (or\nboth) are true), NOR (not OR), and XNOR (inverse of XOR). Based on what you\u2019ve\nlearned about truth tables from the previous operations,  fill in the truth\ntable below:     \\(x\\)  \\(y\\)  NOT  \\(x\\)  \\(x\\)  OR  \\(y\\)  \\(x\\)  NOR  \\(y\\)  \\(x\\)  XNOR  \\(y\\)      0  0        0  1        1  0        1  1          Note  All the logic ICs we are using should be supplied with a  \\(+5V\\)  DC voltage for \\(V_{cc}\\) .", 
            "title": "7486 (74HC86) XOR gate"
        }, 
        {
            "location": "/lab8/experiment_8-1/#part-b-the-full-adder-circuit", 
            "text": "The binary adder circuit is an important building block of digital arithmetic\ncircuits. Its purpose is to form the arithmetic sum of two binary numbers. In\nthis lab, we will be building a one-bit full-adder, which adds two 1-bit binary\nnumbers as well as a carry bit. The result will be a 1-bit sum and a 1-bit\ncarry term. In this section we will see how to design a binary adder out of\nbasic logic gates.  Let's first understand a little more about the binary system. Binary is\ncalculated in base 2. If we have  \\(n\\)  input bits, we have  \\(2^n\\)  possible\ncombinations, and can represent up to the decimal value  \\(2^n-1\\) , starting\nwith decimal value 0. In our case, we have three 1-bit inputs, so we have \\(2^n = 8\\)  possible input combinations.  To understand binary addition, let's look at an example. The steps are similar\nto a decimal summation. For example if we are adding  \\(1101\\)  and  \\(0110\\) , we sum\nup the column beginning at right, and carry over the extra to the next column.\nA carry bit results when there are 2 or more 1's in the input. The sum \\(1101+0110=10011\\)  is written as shown below.     As you can see, a multi-bit summation can be computed with several individual\naddition steps. Each step adds up one column of three 1-bit numbers and\nprovides a carry to the next column. (For the first column on the right, the\ncarry could be filled in as a zero).  A circuit for this one-column adder is the one that we will build in this lab.  Let's represent the two 1-bit inputs as  \\(x\\)  and  \\(y\\) , the carry as  \\(z\\) , and the\ntwo outputs as sum bit  \\(S\\) , and the final carry bit  \\(C\\) . The truth table is\nbelow.     To build a logic circuit, we want to formulate a single logical expression\nwhose result matches the truth table for all cases of input combinations. Since\nwe have two outputs  \\(S\\)  and  \\(C\\) , we need two logical expressions.   Note  Instead of indicating logical operations with the gate name (i.e.,  \\(x\\)  XOR \\(y\\) ) there are common symbols that are used in logical expressions to\nindicate the logical operation. Given two inputs  \\(x\\)  and  \\(y\\) :     Name  Symbolic Expression      \\(x\\)  AND  \\(y\\)  \\(xy\\)  or  \\(x \\bullet y\\)    \\(x\\)  OR  \\(y\\)  \\(x \\vee y\\)    NOT  \\(x\\)  \\(\\lnot x\\)    \\(x\\)  NAND  \\(y\\)  \\(\\lnot ( x \\bullet y )\\)    \\(x\\)  NOR  \\(y\\)  \\(\\lnot ( x \\vee y )\\)    \\(x\\)  XOR  \\(y\\)  \\(x \\bigoplus y\\)    \\(x\\)  XNOR  \\(y\\)  \\(\\lnot (x\\bigoplus y)\\)      Let's start with formulating an expression for output  \\(S\\) . Redraw the full adder\ntruth table and add two additional columns, labeling one as  \\(x \\bigoplus y\\)  and\nthe other as  \\((x \\bigoplus y) \\bigoplus z\\) .  Fill in the new columns of your\ntruth table and show that  \\[\nS = (x \\bigoplus y) \\bigoplus z\n\\]    \\(x\\)  \\(y\\)  \\(z\\)  \\(x\\bigoplus y\\)  \\(\\left( x\\bigoplus y \\right)\\bigoplus z\\)  C  S      0  0  0    0  0    0  0  1    0  1    0  1  0    0  1    0  1  1    1  0    1  0  0    0  1    1  0  1    1  0    1  1  0    1  0    1  1  1    1  1     Similarly, show that the output  \\(C = (x \\bullet y) \\vee (x \\bigoplus y) \\bullet z\\) .  From our expressions, it looks like the output  \\(S\\)  will require two XOR gates,\nand  \\(C\\)  will require additional 2 ANDs and an OR. A circuit diagram for this is\nshown below.     However, building this circuit will require using three different ICs, two of\nwhich we don\u2019t have.  So now we will apply a very useful law called DeMorgan's Law to our\nexpressions, which states:  \\[\n\\begin{aligned}\nx \\bullet y  = \\lnot (x \\vee y) \\\\\nx \\vee y  = \\lnot (x \\bullet y) \n\\end{aligned}\n\\] DeMorgan's Law implies that any AND gate can be substituted with an OR and a\nNOT gate, and vice versa: any OR gate can be substituted with an AND and a NOT\ngate. Applying DeMorgan's Law to the expression for  \\(C\\)  and using some\nsimplification steps, we see that  \\(C\\)  could be obtained with just NAND and XOR\ngates:   \\[\nC = \\lnot \n        \\left( \n            \\lnot (x \\bullet y) \\bullet \\lnot \n                \\left( \n                \\left(x \\bigoplus y \\right) \\bullet z \n                \\right) \n        \\right)\n\\] Create a truth table to prove this to yourself.  The circuit for this\nequation is below:", 
            "title": "Part B: The Full-Adder Circuit"
        }, 
        {
            "location": "/lab8/experiment_8-1/#part-c-constructing-the-full-adder", 
            "text": "Let\u2019s build this full-adder on our breadboard.    Place the DIP switch on your breadboard, and set all the switches to the\n    off position. Let switch 1 (SW1) be x, SW2 be y, and SW3 be z.  Wire the\n    following connections to each of your switches as shown below. The pins on\n    the side of the off position should be wired to ground. The 330-\u2126 resistor\n    acts to prevent a short between power supply and ground when the switch is\n    closed. TTL (transistor-transistor logic) indicates where you will make the\n    connection to your logic gates in Step 4.       Next, insert the NAND IC (74HC00) and XOR IC (74HC86) on your breadboard,\n    checking that the notches on the ICs both face the same direction.       Wire  \\(V_{cc}\\)  and GND for the two ICs, where  \\(V_{cc} = 5V\\) .    Wire the logic circuit together with the pin assignments as shown\n    below:       We want to include some indicator of what our Sum and Carry output is. For\n    this we will use LEDs, that will light up when the output is 1. Wire the\n    following connections to your S and C outputs. (The resistor in series\n    avoids excessive voltage drop across the LED).       Your full-adder is done! Now test if it works, by checking all possible\n    input combinations from your full-adder truth table.  Take a photo for\n    each input combination (showing switch and LEDs) to include in your\n    report.    Output the adder's sum to the computer using the breadboard.  Fire up\n    Labview and create a digital display of the sum.", 
            "title": "Part C: Constructing the Full-Adder"
        }, 
        {
            "location": "/finallab/", 
            "text": "Final Lab\n\n\nDesigning a Pulse Oximeter\n\n\nDescription\n\n\nA \npulse oximeter\n is device\nthat provides a measurement of pulse rate and blood oxygen concentration. It\nworks by measuring the absorption of light of two different wavelengths (red\nand infrared) passing through a site with good blood flow, typically fingertip.\nOxygenated hemoglobin in the blood absorbs more infrared light and allows more\nred light to pass through.  Deoxygenated hemoglobin absorbs more red light and\nallows more infrared light to pass through. A pulse oximeter uses a light\nemitter with red and infrared LEDs that shine through the fingertip and the\nlight is detected by a photodiode on the other side. This information is then\nprocessed to give pulse rate and percent oxygenation.\n\n\nDesign Project\n\n\nWe have studied and demonstrated in previous labs (Lab 2 and Lab 6) how optical\nsignals can be converted to electrical signals. Using this knowledge, design a\npulse oximeter with a Labview user interface.\n\n\nSystem Requirements\n\n\n\n\nThe system should measure and display SpO2 (in percent)\n\n\nThe system should operate in normal ambient lighting\n\n\nOptional feature: display heart rate (in BPM)\n\n\n\n\nAvailable Materials\n\n\n\n\nLabview software\n\n\nNellcor-compatible finger sensors\n\n\n\n\nDesign Steps\n\n\n\n\nDraw a pin diagram of the finger sensor as it relates to the breadboard\n   interface pins.\n\n\nBuild an LED driver circuit to alternately drive the red LED and IR LED by\n   modifying the LED driver from Lab 6. (No need for a current1.sensing\n   resistor).\n\n\nTest your circuit using two through1.hole LEDs and the VirtualBench\n   frequency generator \n\n\nConsider the Nyquist criterion when selecting the Vdrive frequency. You\n   want to ensure detection of heart rate.\n\n\nBuild a photodiode amplifier circuit \n\n\nDo not include the DC blocking capacitor, given that the heart rate is a\n   low frequency that could get blocked out.\n\n\nInclude filtering capability (see Lab 7) to create a lowpass filter to\n   eliminate 60Hz power line noise\n\n\nTest your circuits with the finger sensor using the VirtualBench function\n   generator and oscilloscope\n\n\nSet up the inputs and outputs for your Labview interface \n\n\nGenerate the Vdrive signal in Labview \n\n\nAcquire the photodiode circuit output into Labview\n\n\nDesign a way to distinguish between the red LED component and the IR LED\n   component of your signal\n\n\nDetermine SpO2 level by \n   \ncomputing the ratio R\n and comparing to\n   \ndata\n.\n\n\n5% Extra credit: output heart rate\n\n\n\n\nFinal Report Guidelines\n\n\nProject summary or abstract, which should include:\n\n\n\n\nA brief definition of pulse oximetry and its application (2-3 sentences).\n\n\nThe functionality of your pulse oximeter\n\n\nWere results as expected?\n\n\n\n\nDesign Procedure\n\n\n\n\nSchematic and its description (i.e., why certain components were chosen)\n\n\nLabview block diagram screenshot and its description\n\n\nScreenshots and description of inputs and outputs, i.e., input and output of\n  emitter-detector, output of Labview\n\n\n\n\nTesting\n\n\n\n\nSpO2 and pulse rate data for at least three people\n\n\nAs expected? If not, where might things have gone wrong? How did you try to\n  fix it?\n\n\n\n\nConclusion\n\n\n\n\nDid your design meet your goals?\n\n\nWhat could be improved?\n\n\n\n\nFinal Project Demo\n\n\n\n\nMaximum 10 minutes\n\n\nAt least 2 group members need to be present for the demo\n\n\nProvide a picture of the schematic and walk your labbie/instructor through it\n\n\nShow the LabView block diagram and explain how it works\n\n\nDemo the pulse ox\n\n\nExplain how you, as a team, divided up the work amongst yourselves", 
            "title": "Final Lab"
        }, 
        {
            "location": "/finallab/#final-lab", 
            "text": "", 
            "title": "Final Lab"
        }, 
        {
            "location": "/finallab/#designing-a-pulse-oximeter", 
            "text": "", 
            "title": "Designing a Pulse Oximeter"
        }, 
        {
            "location": "/finallab/#description", 
            "text": "A  pulse oximeter  is device\nthat provides a measurement of pulse rate and blood oxygen concentration. It\nworks by measuring the absorption of light of two different wavelengths (red\nand infrared) passing through a site with good blood flow, typically fingertip.\nOxygenated hemoglobin in the blood absorbs more infrared light and allows more\nred light to pass through.  Deoxygenated hemoglobin absorbs more red light and\nallows more infrared light to pass through. A pulse oximeter uses a light\nemitter with red and infrared LEDs that shine through the fingertip and the\nlight is detected by a photodiode on the other side. This information is then\nprocessed to give pulse rate and percent oxygenation.", 
            "title": "Description"
        }, 
        {
            "location": "/finallab/#design-project", 
            "text": "We have studied and demonstrated in previous labs (Lab 2 and Lab 6) how optical\nsignals can be converted to electrical signals. Using this knowledge, design a\npulse oximeter with a Labview user interface.", 
            "title": "Design Project"
        }, 
        {
            "location": "/finallab/#system-requirements", 
            "text": "The system should measure and display SpO2 (in percent)  The system should operate in normal ambient lighting  Optional feature: display heart rate (in BPM)", 
            "title": "System Requirements"
        }, 
        {
            "location": "/finallab/#available-materials", 
            "text": "Labview software  Nellcor-compatible finger sensors", 
            "title": "Available Materials"
        }, 
        {
            "location": "/finallab/#design-steps", 
            "text": "Draw a pin diagram of the finger sensor as it relates to the breadboard\n   interface pins.  Build an LED driver circuit to alternately drive the red LED and IR LED by\n   modifying the LED driver from Lab 6. (No need for a current1.sensing\n   resistor).  Test your circuit using two through1.hole LEDs and the VirtualBench\n   frequency generator   Consider the Nyquist criterion when selecting the Vdrive frequency. You\n   want to ensure detection of heart rate.  Build a photodiode amplifier circuit   Do not include the DC blocking capacitor, given that the heart rate is a\n   low frequency that could get blocked out.  Include filtering capability (see Lab 7) to create a lowpass filter to\n   eliminate 60Hz power line noise  Test your circuits with the finger sensor using the VirtualBench function\n   generator and oscilloscope  Set up the inputs and outputs for your Labview interface   Generate the Vdrive signal in Labview   Acquire the photodiode circuit output into Labview  Design a way to distinguish between the red LED component and the IR LED\n   component of your signal  Determine SpO2 level by \n    computing the ratio R  and comparing to\n    data .  5% Extra credit: output heart rate", 
            "title": "Design Steps"
        }, 
        {
            "location": "/finallab/#final-report-guidelines", 
            "text": "", 
            "title": "Final Report Guidelines"
        }, 
        {
            "location": "/finallab/#project-summary-or-abstract-which-should-include", 
            "text": "A brief definition of pulse oximetry and its application (2-3 sentences).  The functionality of your pulse oximeter  Were results as expected?", 
            "title": "Project summary or abstract, which should include:"
        }, 
        {
            "location": "/finallab/#design-procedure", 
            "text": "Schematic and its description (i.e., why certain components were chosen)  Labview block diagram screenshot and its description  Screenshots and description of inputs and outputs, i.e., input and output of\n  emitter-detector, output of Labview", 
            "title": "Design Procedure"
        }, 
        {
            "location": "/finallab/#testing", 
            "text": "SpO2 and pulse rate data for at least three people  As expected? If not, where might things have gone wrong? How did you try to\n  fix it?", 
            "title": "Testing"
        }, 
        {
            "location": "/finallab/#conclusion", 
            "text": "Did your design meet your goals?  What could be improved?", 
            "title": "Conclusion"
        }, 
        {
            "location": "/finallab/#final-project-demo", 
            "text": "Maximum 10 minutes  At least 2 group members need to be present for the demo  Provide a picture of the schematic and walk your labbie/instructor through it  Show the LabView block diagram and explain how it works  Demo the pulse ox  Explain how you, as a team, divided up the work amongst yourselves", 
            "title": "Final Project Demo"
        }, 
        {
            "location": "/misc_images/", 
            "text": "Miscellanous Images\n\n\nBanana Adapter\n\n\n \n\n\nBNC T\n\n\n \n\n\n741 Op-Amp\n\n\n \n\n\nBNC Cliplead\n\n\n \n\n\nVB Probe\n\n\n \n\n\nDIN8\n\n\n\n\nPhoto Diode\n\n\n \n\n\nRed LED\n\n\n \n\n\nCeramic Caps2\n\n\n \n\n\nIC Puller\n\n\n\n\nBanana Plug Patch Cords\n\n\n\n\nBattery Pack\n\n\n\n\nBNC Patch Cables\n\n\n\n\nDAQ Cable", 
            "title": "Home"
        }, 
        {
            "location": "/misc_images/#miscellanous-images", 
            "text": "", 
            "title": "Miscellanous Images"
        }, 
        {
            "location": "/misc_images/#banana-adapter", 
            "text": "", 
            "title": "Banana Adapter"
        }, 
        {
            "location": "/misc_images/#bnc-t", 
            "text": "", 
            "title": "BNC T"
        }, 
        {
            "location": "/misc_images/#741-op-amp", 
            "text": "", 
            "title": "741 Op-Amp"
        }, 
        {
            "location": "/misc_images/#bnc-cliplead", 
            "text": "", 
            "title": "BNC Cliplead"
        }, 
        {
            "location": "/misc_images/#vb-probe", 
            "text": "", 
            "title": "VB Probe"
        }, 
        {
            "location": "/misc_images/#din8", 
            "text": "", 
            "title": "DIN8"
        }, 
        {
            "location": "/misc_images/#photo-diode", 
            "text": "", 
            "title": "Photo Diode"
        }, 
        {
            "location": "/misc_images/#red-led", 
            "text": "", 
            "title": "Red LED"
        }, 
        {
            "location": "/misc_images/#ceramic-caps2", 
            "text": "", 
            "title": "Ceramic Caps2"
        }, 
        {
            "location": "/misc_images/#ic-puller", 
            "text": "", 
            "title": "IC Puller"
        }, 
        {
            "location": "/misc_images/#banana-plug-patch-cords", 
            "text": "", 
            "title": "Banana Plug Patch Cords"
        }, 
        {
            "location": "/misc_images/#battery-pack", 
            "text": "", 
            "title": "Battery Pack"
        }, 
        {
            "location": "/misc_images/#bnc-patch-cables", 
            "text": "", 
            "title": "BNC Patch Cables"
        }, 
        {
            "location": "/misc_images/#daq-cable", 
            "text": "", 
            "title": "DAQ Cable"
        }
    ]
}